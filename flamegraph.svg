<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="758630"><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (479 samples, 0.06%)</title><rect x="0.0071%" y="197" width="0.0631%" height="15" fill="rgb(227,0,7)" fg:x="54" fg:w="479"/><text x="0.2571%" y="207.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread::Thread::new (479 samples, 0.06%)</title><rect x="0.0071%" y="181" width="0.0631%" height="15" fill="rgb(217,0,24)" fg:x="54" fg:w="479"/><text x="0.2571%" y="191.50"></text></g><g><title>`0x7FFDA074B91D (479 samples, 0.06%)</title><rect x="0.0071%" y="165" width="0.0631%" height="15" fill="rgb(221,193,54)" fg:x="54" fg:w="479"/><text x="0.2571%" y="175.50"></text></g><g><title>`0x7FFD9F54BBAF (471 samples, 0.06%)</title><rect x="0.0082%" y="149" width="0.0621%" height="15" fill="rgb(248,212,6)" fg:x="62" fg:w="471"/><text x="0.2582%" y="159.50"></text></g><g><title>`0x7FFDA1AEED94 (471 samples, 0.06%)</title><rect x="0.0082%" y="133" width="0.0621%" height="15" fill="rgb(208,68,35)" fg:x="62" fg:w="471"/><text x="0.2582%" y="143.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::clear (487 samples, 0.06%)</title><rect x="0.0066%" y="277" width="0.0642%" height="15" fill="rgb(232,128,0)" fg:x="50" fg:w="487"/><text x="0.2566%" y="287.50"></text></g><g><title>1brc.exe`std::thread::spawn&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (487 samples, 0.06%)</title><rect x="0.0066%" y="261" width="0.0642%" height="15" fill="rgb(207,160,47)" fg:x="50" fg:w="487"/><text x="0.2566%" y="271.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn (487 samples, 0.06%)</title><rect x="0.0066%" y="245" width="0.0642%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="487"/><text x="0.2566%" y="255.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked (487 samples, 0.06%)</title><rect x="0.0066%" y="229" width="0.0642%" height="15" fill="rgb(218,30,26)" fg:x="50" fg:w="487"/><text x="0.2566%" y="239.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, 1brc::input_multitreaded::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (487 samples, 0.06%)</title><rect x="0.0066%" y="213" width="0.0642%" height="15" fill="rgb(220,122,19)" fg:x="50" fg:w="487"/><text x="0.2566%" y="223.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (90 samples, 0.01%)</title><rect x="0.0708%" y="181" width="0.0119%" height="15" fill="rgb(250,228,42)" fg:x="537" fg:w="90"/><text x="0.3208%" y="191.50"></text></g><g><title>1brc.exe`alloc::alloc::dealloc (90 samples, 0.01%)</title><rect x="0.0708%" y="165" width="0.0119%" height="15" fill="rgb(240,193,28)" fg:x="537" fg:w="90"/><text x="0.3208%" y="175.50"></text></g><g><title>`0x7FFDA1A747B1 (90 samples, 0.01%)</title><rect x="0.0708%" y="149" width="0.0119%" height="15" fill="rgb(216,20,37)" fg:x="537" fg:w="90"/><text x="0.3208%" y="159.50"></text></g><g><title>`0x7FFDA1A75B74 (90 samples, 0.01%)</title><rect x="0.0708%" y="133" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="537" fg:w="90"/><text x="0.3208%" y="143.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::IntoIter&lt;tuple$ (91 samples, 0.01%)</title><rect x="0.0708%" y="277" width="0.0120%" height="15" fill="rgb(217,207,13)" fg:x="537" fg:w="91"/><text x="0.3208%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop(alloc::vec::into_iter::IntoIter&lt;tuple$ (91 samples, 0.01%)</title><rect x="0.0708%" y="261" width="0.0120%" height="15" fill="rgb(231,73,38)" fg:x="537" fg:w="91"/><text x="0.3208%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (91 samples, 0.01%)</title><rect x="0.0708%" y="245" width="0.0120%" height="15" fill="rgb(225,20,46)" fg:x="537" fg:w="91"/><text x="0.3208%" y="255.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop::impl$0::drop(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (91 samples, 0.01%)</title><rect x="0.0708%" y="229" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="537" fg:w="91"/><text x="0.3208%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (91 samples, 0.01%)</title><rect x="0.0708%" y="213" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="537" fg:w="91"/><text x="0.3208%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (91 samples, 0.01%)</title><rect x="0.0708%" y="197" width="0.0120%" height="15" fill="rgb(226,26,5)" fg:x="537" fg:w="91"/><text x="0.3208%" y="207.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash (92 samples, 0.01%)</title><rect x="0.0912%" y="181" width="0.0121%" height="15" fill="rgb(249,33,26)" fg:x="692" fg:w="92"/><text x="0.3412%" y="191.50"></text></g><g><title>1brc.exe`alloc::string::impl$23::hash (89 samples, 0.01%)</title><rect x="0.0916%" y="165" width="0.0117%" height="15" fill="rgb(235,183,28)" fg:x="695" fg:w="89"/><text x="0.3416%" y="175.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$2::hash(ref$ (89 samples, 0.01%)</title><rect x="0.0916%" y="149" width="0.0117%" height="15" fill="rgb(221,5,38)" fg:x="695" fg:w="89"/><text x="0.3416%" y="159.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (89 samples, 0.01%)</title><rect x="0.0916%" y="133" width="0.0117%" height="15" fill="rgb(247,18,42)" fg:x="695" fg:w="89"/><text x="0.3416%" y="143.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (89 samples, 0.01%)</title><rect x="0.0916%" y="117" width="0.0117%" height="15" fill="rgb(241,131,45)" fg:x="695" fg:w="89"/><text x="0.3416%" y="127.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (89 samples, 0.01%)</title><rect x="0.0916%" y="101" width="0.0117%" height="15" fill="rgb(249,31,29)" fg:x="695" fg:w="89"/><text x="0.3416%" y="111.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (89 samples, 0.01%)</title><rect x="0.0916%" y="85" width="0.0117%" height="15" fill="rgb(225,111,53)" fg:x="695" fg:w="89"/><text x="0.3416%" y="95.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (88 samples, 0.01%)</title><rect x="0.0917%" y="69" width="0.0116%" height="15" fill="rgb(238,160,17)" fg:x="696" fg:w="88"/><text x="0.3417%" y="79.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (137 samples, 0.02%)</title><rect x="0.0906%" y="213" width="0.0181%" height="15" fill="rgb(214,148,48)" fg:x="687" fg:w="137"/><text x="0.3406%" y="223.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (135 samples, 0.02%)</title><rect x="0.0908%" y="197" width="0.0178%" height="15" fill="rgb(232,36,49)" fg:x="689" fg:w="135"/><text x="0.3408%" y="207.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;::entry (209 samples, 0.03%)</title><rect x="0.0887%" y="277" width="0.0275%" height="15" fill="rgb(209,103,24)" fg:x="673" fg:w="209"/><text x="0.3387%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::rustc_entry (209 samples, 0.03%)</title><rect x="0.0887%" y="261" width="0.0275%" height="15" fill="rgb(229,88,8)" fg:x="673" fg:w="209"/><text x="0.3387%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0 (208 samples, 0.03%)</title><rect x="0.0888%" y="245" width="0.0274%" height="15" fill="rgb(213,181,19)" fg:x="674" fg:w="208"/><text x="0.3388%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (208 samples, 0.03%)</title><rect x="0.0888%" y="229" width="0.0274%" height="15" fill="rgb(254,191,54)" fg:x="674" fg:w="208"/><text x="0.3388%" y="239.50"></text></g><g><title>1brc.exe`std::io::BufRead::has_data_left(std::io::buffered::bufreader::BufReader (120 samples, 0.02%)</title><rect x="0.1168%" y="277" width="0.0158%" height="15" fill="rgb(241,83,37)" fg:x="886" fg:w="120"/><text x="0.3668%" y="287.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$5::fill_buf(std::io::buffered::bufreader::BufReader (120 samples, 0.02%)</title><rect x="0.1168%" y="261" width="0.0158%" height="15" fill="rgb(233,36,39)" fg:x="886" fg:w="120"/><text x="0.3668%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (120 samples, 0.02%)</title><rect x="0.1168%" y="245" width="0.0158%" height="15" fill="rgb(226,3,54)" fg:x="886" fg:w="120"/><text x="0.3668%" y="255.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (119 samples, 0.02%)</title><rect x="0.1169%" y="229" width="0.0157%" height="15" fill="rgb(245,192,40)" fg:x="887" fg:w="119"/><text x="0.3669%" y="239.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read_buf (119 samples, 0.02%)</title><rect x="0.1169%" y="213" width="0.0157%" height="15" fill="rgb(238,167,29)" fg:x="887" fg:w="119"/><text x="0.3669%" y="223.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (118 samples, 0.02%)</title><rect x="0.1171%" y="197" width="0.0156%" height="15" fill="rgb(232,182,51)" fg:x="888" fg:w="118"/><text x="0.3671%" y="207.50"></text></g><g><title>`0x7FFDA1AED624 (118 samples, 0.02%)</title><rect x="0.1171%" y="181" width="0.0156%" height="15" fill="rgb(231,60,39)" fg:x="888" fg:w="118"/><text x="0.3671%" y="191.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded(std::collections::hash::map::HashMap (1,130 samples, 0.15%)</title><rect x="0.0046%" y="293" width="0.1490%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="1130"/><text x="0.2546%" y="303.50"></text></g><g><title>`0x7FFDA1A747B1 (131 samples, 0.02%)</title><rect x="0.1363%" y="277" width="0.0173%" height="15" fill="rgb(235,93,37)" fg:x="1034" fg:w="131"/><text x="0.3863%" y="287.50"></text></g><g><title>1brc.exe`invoke_main() (1,141 samples, 0.15%)</title><rect x="0.0043%" y="469" width="0.1504%" height="15" fill="rgb(213,116,39)" fg:x="33" fg:w="1141"/><text x="0.2543%" y="479.50"></text></g><g><title>1brc.exe`main (1,141 samples, 0.15%)</title><rect x="0.0043%" y="453" width="0.1504%" height="15" fill="rgb(222,207,29)" fg:x="33" fg:w="1141"/><text x="0.2543%" y="463.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal (1,141 samples, 0.15%)</title><rect x="0.0043%" y="437" width="0.1504%" height="15" fill="rgb(206,96,30)" fg:x="33" fg:w="1141"/><text x="0.2543%" y="447.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (1,141 samples, 0.15%)</title><rect x="0.0043%" y="421" width="0.1504%" height="15" fill="rgb(218,138,4)" fg:x="33" fg:w="1141"/><text x="0.2543%" y="431.50"></text></g><g><title>1brc.exe`std::panicking::try (1,141 samples, 0.15%)</title><rect x="0.0043%" y="405" width="0.1504%" height="15" fill="rgb(250,191,14)" fg:x="33" fg:w="1141"/><text x="0.2543%" y="415.50"></text></g><g><title>1brc.exe`std::panicking::try::do_call (1,141 samples, 0.15%)</title><rect x="0.0043%" y="389" width="0.1504%" height="15" fill="rgb(239,60,40)" fg:x="33" fg:w="1141"/><text x="0.2543%" y="399.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$2 (1,140 samples, 0.15%)</title><rect x="0.0045%" y="373" width="0.1503%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="1140"/><text x="0.2545%" y="383.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (1,140 samples, 0.15%)</title><rect x="0.0045%" y="357" width="0.1503%" height="15" fill="rgb(225,35,8)" fg:x="34" fg:w="1140"/><text x="0.2545%" y="367.50"></text></g><g><title>1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (1,140 samples, 0.15%)</title><rect x="0.0045%" y="341" width="0.1503%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="1140"/><text x="0.2545%" y="351.50"></text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (1,140 samples, 0.15%)</title><rect x="0.0045%" y="325" width="0.1503%" height="15" fill="rgb(247,123,22)" fg:x="34" fg:w="1140"/><text x="0.2545%" y="335.50"></text></g><g><title>1brc.exe`1brc::main (1,140 samples, 0.15%)</title><rect x="0.0045%" y="309" width="0.1503%" height="15" fill="rgb(231,138,38)" fg:x="34" fg:w="1140"/><text x="0.2545%" y="319.50"></text></g><g><title>1brc.exe`__scrt_common_main_seh() (1,154 samples, 0.15%)</title><rect x="0.0043%" y="485" width="0.1521%" height="15" fill="rgb(231,145,46)" fg:x="33" fg:w="1154"/><text x="0.2543%" y="495.50"></text></g><g><title>`0x7FFDA1A7B3C7 (200 samples, 0.03%)</title><rect x="4.4471%" y="165" width="0.0264%" height="15" fill="rgb(251,118,11)" fg:x="33737" fg:w="200"/><text x="4.6971%" y="175.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (255 samples, 0.03%)</title><rect x="4.4412%" y="213" width="0.0336%" height="15" fill="rgb(217,147,25)" fg:x="33692" fg:w="255"/><text x="4.6912%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (255 samples, 0.03%)</title><rect x="4.4412%" y="197" width="0.0336%" height="15" fill="rgb(247,81,37)" fg:x="33692" fg:w="255"/><text x="4.6912%" y="207.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (255 samples, 0.03%)</title><rect x="4.4412%" y="181" width="0.0336%" height="15" fill="rgb(209,12,38)" fg:x="33692" fg:w="255"/><text x="4.6912%" y="191.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (257 samples, 0.03%)</title><rect x="4.4412%" y="277" width="0.0339%" height="15" fill="rgb(227,1,9)" fg:x="33692" fg:w="257"/><text x="4.6912%" y="287.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (257 samples, 0.03%)</title><rect x="4.4412%" y="261" width="0.0339%" height="15" fill="rgb(248,47,43)" fg:x="33692" fg:w="257"/><text x="4.6912%" y="271.50"></text></g><g><title>1brc.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (257 samples, 0.03%)</title><rect x="4.4412%" y="245" width="0.0339%" height="15" fill="rgb(221,10,30)" fg:x="33692" fg:w="257"/><text x="4.6912%" y="255.50"></text></g><g><title>1brc.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (257 samples, 0.03%)</title><rect x="4.4412%" y="229" width="0.0339%" height="15" fill="rgb(210,229,1)" fg:x="33692" fg:w="257"/><text x="4.6912%" y="239.50"></text></g><g><title>`0x7FFDA1AECDFE (195 samples, 0.03%)</title><rect x="4.4932%" y="181" width="0.0257%" height="15" fill="rgb(222,148,37)" fg:x="34087" fg:w="195"/><text x="4.7432%" y="191.50"></text></g><g><title>`0x7FFDA1AED864 (195 samples, 0.03%)</title><rect x="4.4932%" y="165" width="0.0257%" height="15" fill="rgb(234,67,33)" fg:x="34087" fg:w="195"/><text x="4.7432%" y="175.50"></text></g><g><title>`0x7FFDA1A7EEEE (273 samples, 0.04%)</title><rect x="4.4932%" y="197" width="0.0360%" height="15" fill="rgb(247,98,35)" fg:x="34087" fg:w="273"/><text x="4.7432%" y="207.50"></text></g><g><title>`0x7FFDA1A7B44D (387 samples, 0.05%)</title><rect x="4.4845%" y="213" width="0.0510%" height="15" fill="rgb(247,138,52)" fg:x="34021" fg:w="387"/><text x="4.7345%" y="223.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity (392 samples, 0.05%)</title><rect x="4.4841%" y="277" width="0.0517%" height="15" fill="rgb(213,79,30)" fg:x="34018" fg:w="392"/><text x="4.7341%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (392 samples, 0.05%)</title><rect x="4.4841%" y="261" width="0.0517%" height="15" fill="rgb(246,177,23)" fg:x="34018" fg:w="392"/><text x="4.7341%" y="271.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (392 samples, 0.05%)</title><rect x="4.4841%" y="245" width="0.0517%" height="15" fill="rgb(230,62,27)" fg:x="34018" fg:w="392"/><text x="4.7341%" y="255.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (392 samples, 0.05%)</title><rect x="4.4841%" y="229" width="0.0517%" height="15" fill="rgb(216,154,8)" fg:x="34018" fg:w="392"/><text x="4.7341%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$2::checked_add (1,354 samples, 0.18%)</title><rect x="4.5358%" y="277" width="0.1785%" height="15" fill="rgb(244,35,45)" fg:x="34410" fg:w="1354"/><text x="4.7858%" y="287.50"></text></g><g><title>1brc.exe`core::num::impl$2::overflowing_add (546 samples, 0.07%)</title><rect x="4.6423%" y="261" width="0.0720%" height="15" fill="rgb(251,115,12)" fg:x="35218" fg:w="546"/><text x="4.8923%" y="271.50"></text></g><g><title>`0x7FFDA1A59B1A (663 samples, 0.09%)</title><rect x="4.7152%" y="213" width="0.0874%" height="15" fill="rgb(240,54,50)" fg:x="35771" fg:w="663"/><text x="4.9652%" y="223.50"></text></g><g><title>`0x7FFDA1AED924 (663 samples, 0.09%)</title><rect x="4.7152%" y="197" width="0.0874%" height="15" fill="rgb(233,84,52)" fg:x="35771" fg:w="663"/><text x="4.9652%" y="207.50"></text></g><g><title>`0x7FFDA1A76F37 (664 samples, 0.09%)</title><rect x="4.7152%" y="229" width="0.0875%" height="15" fill="rgb(207,117,47)" fg:x="35771" fg:w="664"/><text x="4.9652%" y="239.50"></text></g><g><title>`0x7FFDA1A75B74 (668 samples, 0.09%)</title><rect x="4.7149%" y="245" width="0.0881%" height="15" fill="rgb(249,43,39)" fg:x="35769" fg:w="668"/><text x="4.9649%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(std::io::buffered::bufreader::BufReader (707 samples, 0.09%)</title><rect x="4.7146%" y="277" width="0.0932%" height="15" fill="rgb(209,38,44)" fg:x="35766" fg:w="707"/><text x="4.9646%" y="287.50"></text></g><g><title>`0x7FFDA1A747B1 (704 samples, 0.09%)</title><rect x="4.7149%" y="261" width="0.0928%" height="15" fill="rgb(236,212,23)" fg:x="35769" fg:w="704"/><text x="4.9649%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (444 samples, 0.06%)</title><rect x="4.8077%" y="277" width="0.0585%" height="15" fill="rgb(242,79,21)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="287.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (444 samples, 0.06%)</title><rect x="4.8077%" y="261" width="0.0585%" height="15" fill="rgb(211,96,35)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (444 samples, 0.06%)</title><rect x="4.8077%" y="245" width="0.0585%" height="15" fill="rgb(253,215,40)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (444 samples, 0.06%)</title><rect x="4.8077%" y="229" width="0.0585%" height="15" fill="rgb(211,81,21)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (444 samples, 0.06%)</title><rect x="4.8077%" y="213" width="0.0585%" height="15" fill="rgb(208,190,38)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::Vec (444 samples, 0.06%)</title><rect x="4.8077%" y="197" width="0.0585%" height="15" fill="rgb(235,213,38)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (444 samples, 0.06%)</title><rect x="4.8077%" y="181" width="0.0585%" height="15" fill="rgb(237,122,38)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="191.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (444 samples, 0.06%)</title><rect x="4.8077%" y="165" width="0.0585%" height="15" fill="rgb(244,218,35)" fg:x="36473" fg:w="444"/><text x="5.0577%" y="175.50"></text></g><g><title>`0x7FFD9F541075 (426 samples, 0.06%)</title><rect x="4.8101%" y="149" width="0.0562%" height="15" fill="rgb(240,68,47)" fg:x="36491" fg:w="426"/><text x="5.0601%" y="159.50"></text></g><g><title>`0x7FFDA1AED744 (420 samples, 0.06%)</title><rect x="4.8109%" y="133" width="0.0554%" height="15" fill="rgb(210,16,53)" fg:x="36497" fg:w="420"/><text x="5.0609%" y="143.50"></text></g><g><title>1brc.exe`core::slice::impl$0::iter(ref$&lt;slice2$ (9,243 samples, 1.22%)</title><rect x="4.8663%" y="261" width="1.2184%" height="15" fill="rgb(235,124,12)" fg:x="36917" fg:w="9243"/><text x="5.1163%" y="271.50"></text></g><g><title>1brc.exe`core::slice::iter::Iter&lt;u8&gt;::new(ref$&lt;slice2$ (9,243 samples, 1.22%)</title><rect x="4.8663%" y="245" width="1.2184%" height="15" fill="rgb(224,169,11)" fg:x="36917" fg:w="9243"/><text x="5.1163%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::add (9,243 samples, 1.22%)</title><rect x="4.8663%" y="229" width="1.2184%" height="15" fill="rgb(250,166,2)" fg:x="36917" fg:w="9243"/><text x="5.1163%" y="239.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (10,213 samples, 1.35%)</title><rect x="6.0847%" y="261" width="1.3462%" height="15" fill="rgb(242,216,29)" fg:x="46160" fg:w="10213"/><text x="6.3347%" y="271.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (10,213 samples, 1.35%)</title><rect x="6.0847%" y="245" width="1.3462%" height="15" fill="rgb(230,116,27)" fg:x="46160" fg:w="10213"/><text x="6.3347%" y="255.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$1 (3,816 samples, 0.50%)</title><rect x="12.0095%" y="245" width="0.5030%" height="15" fill="rgb(228,99,48)" fg:x="91108" fg:w="3816"/><text x="12.2595%" y="255.50"></text></g><g><title>1brc.exe`core::slice::impl$0::rsplit_once(ref$&lt;slice2$ (71,557 samples, 9.43%)</title><rect x="4.8663%" y="277" width="9.4324%" height="15" fill="rgb(253,11,6)" fg:x="36917" fg:w="71557"/><text x="5.1163%" y="287.50">1brc.exe`core..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::rposition(core::slice::iter::Iter (52,101 samples, 6.87%)</title><rect x="7.4309%" y="261" width="6.8678%" height="15" fill="rgb(247,143,39)" fg:x="56373" fg:w="52101"/><text x="7.6809%" y="271.50">1brc.exe`..</text></g><g><title>1brc.exe`core::slice::iter::impl$182::next_back(core::slice::iter::Iter (13,550 samples, 1.79%)</title><rect x="12.5126%" y="245" width="1.7861%" height="15" fill="rgb(236,97,10)" fg:x="94924" fg:w="13550"/><text x="12.7626%" y="255.50">1..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (12,452 samples, 1.64%)</title><rect x="12.6573%" y="229" width="1.6414%" height="15" fill="rgb(233,208,19)" fg:x="96022" fg:w="12452"/><text x="12.9073%" y="239.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multitreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;u8&gt;,1brc::input_multitreaded::closure$0::closure_env$3&gt; &gt;*, tuple$ (41,080 samples, 5.42%)</title><rect x="16.5253%" y="229" width="5.4150%" height="15" fill="rgb(216,164,2)" fg:x="125366" fg:w="41080"/><text x="16.7753%" y="239.50">1brc.ex..</text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$2 (3,504 samples, 0.46%)</title><rect x="21.4785%" y="213" width="0.4619%" height="15" fill="rgb(220,129,5)" fg:x="162942" fg:w="3504"/><text x="21.7285%" y="223.50"></text></g><g><title>1brc.exe`core::num::impl$11::unchecked_add (2,759 samples, 0.36%)</title><rect x="21.9403%" y="229" width="0.3637%" height="15" fill="rgb(242,17,10)" fg:x="166446" fg:w="2759"/><text x="22.1903%" y="239.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u8&gt;,1brc::input_multitreaded::closure$0::closure_env$2&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (61,161 samples, 8.06%)</title><rect x="14.2987%" y="261" width="8.0620%" height="15" fill="rgb(242,107,0)" fg:x="108474" fg:w="61161"/><text x="14.5487%" y="271.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multitreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (61,161 samples, 8.06%)</title><rect x="14.2987%" y="245" width="8.0620%" height="15" fill="rgb(251,28,31)" fg:x="108474" fg:w="61161"/><text x="14.5487%" y="255.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (430 samples, 0.06%)</title><rect x="22.3040%" y="229" width="0.0567%" height="15" fill="rgb(233,223,10)" fg:x="169205" fg:w="430"/><text x="22.5540%" y="239.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (63,567 samples, 8.38%)</title><rect x="14.2987%" y="277" width="8.3792%" height="15" fill="rgb(215,21,27)" fg:x="108474" fg:w="63567"/><text x="14.5487%" y="287.50">1brc.exe`cor..</text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (2,406 samples, 0.32%)</title><rect x="22.3607%" y="261" width="0.3172%" height="15" fill="rgb(232,23,21)" fg:x="169635" fg:w="2406"/><text x="22.6107%" y="271.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (2,406 samples, 0.32%)</title><rect x="22.3607%" y="245" width="0.3172%" height="15" fill="rgb(244,5,23)" fg:x="169635" fg:w="2406"/><text x="22.6107%" y="255.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (2,406 samples, 0.32%)</title><rect x="22.3607%" y="229" width="0.3172%" height="15" fill="rgb(226,81,46)" fg:x="169635" fg:w="2406"/><text x="22.6107%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (2,406 samples, 0.32%)</title><rect x="22.3607%" y="213" width="0.3172%" height="15" fill="rgb(247,70,30)" fg:x="169635" fg:w="2406"/><text x="22.6107%" y="223.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (30,959 samples, 4.08%)</title><rect x="23.5674%" y="261" width="4.0809%" height="15" fill="rgb(212,68,19)" fg:x="178789" fg:w="30959"/><text x="23.8174%" y="271.50">1brc..</text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (30,959 samples, 4.08%)</title><rect x="23.5674%" y="245" width="4.0809%" height="15" fill="rgb(240,187,13)" fg:x="178789" fg:w="30959"/><text x="23.8174%" y="255.50">1brc..</text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (30,959 samples, 4.08%)</title><rect x="23.5674%" y="229" width="4.0809%" height="15" fill="rgb(223,113,26)" fg:x="178789" fg:w="30959"/><text x="23.8174%" y="239.50">1brc..</text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (30,959 samples, 4.08%)</title><rect x="23.5674%" y="213" width="4.0809%" height="15" fill="rgb(206,192,2)" fg:x="178789" fg:w="30959"/><text x="23.8174%" y="223.50">1brc..</text></g><g><title>1brc.exe`core::slice::iter::impl$16::next::closure$0(core::slice::iter::impl$16::next::closure_env$0 (804 samples, 0.11%)</title><rect x="35.1199%" y="245" width="0.1060%" height="15" fill="rgb(241,108,4)" fg:x="266430" fg:w="804"/><text x="35.3699%" y="255.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$0 (804 samples, 0.11%)</title><rect x="35.1199%" y="229" width="0.1060%" height="15" fill="rgb(247,173,49)" fg:x="266430" fg:w="804"/><text x="35.3699%" y="239.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$16::next(core::slice::iter::Split (113,582 samples, 14.97%)</title><rect x="22.6779%" y="277" width="14.9720%" height="15" fill="rgb(224,114,35)" fg:x="172041" fg:w="113582"/><text x="22.9279%" y="287.50">1brc.exe`core::slice::i..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::position(core::slice::iter::Iter&lt;u8&gt;*, core::slice::iter::impl$16::next::closure_env$0 (75,875 samples, 10.00%)</title><rect x="27.6483%" y="261" width="10.0016%" height="15" fill="rgb(245,159,27)" fg:x="209748" fg:w="75875"/><text x="27.8983%" y="271.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (18,389 samples, 2.42%)</title><rect x="35.2259%" y="245" width="2.4240%" height="15" fill="rgb(245,172,44)" fg:x="267234" fg:w="18389"/><text x="35.4759%" y="255.50">1b..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (9,693 samples, 1.28%)</title><rect x="36.3721%" y="229" width="1.2777%" height="15" fill="rgb(236,23,11)" fg:x="275930" fg:w="9693"/><text x="36.6221%" y="239.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;::expect(enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;, ref$ (679 samples, 0.09%)</title><rect x="37.6498%" y="277" width="0.0895%" height="15" fill="rgb(205,117,38)" fg:x="285623" fg:w="679"/><text x="37.8998%" y="287.50"></text></g><g><title>1brc.exe`core::num::impl$11::to_ne_bytes (2,689 samples, 0.35%)</title><rect x="41.4861%" y="149" width="0.3545%" height="15" fill="rgb(237,72,25)" fg:x="314726" fg:w="2689"/><text x="41.7361%" y="159.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_length_prefix (3,947 samples, 0.52%)</title><rect x="41.4861%" y="181" width="0.5203%" height="15" fill="rgb(244,70,9)" fg:x="314726" fg:w="3947"/><text x="41.7361%" y="191.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_usize (3,947 samples, 0.52%)</title><rect x="41.4861%" y="165" width="0.5203%" height="15" fill="rgb(217,125,39)" fg:x="314726" fg:w="3947"/><text x="41.7361%" y="175.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1,258 samples, 0.17%)</title><rect x="41.8406%" y="149" width="0.1658%" height="15" fill="rgb(235,36,10)" fg:x="317415" fg:w="1258"/><text x="42.0906%" y="159.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1,258 samples, 0.17%)</title><rect x="41.8406%" y="133" width="0.1658%" height="15" fill="rgb(251,123,47)" fg:x="317415" fg:w="1258"/><text x="42.0906%" y="143.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (5,956 samples, 0.79%)</title><rect x="47.2585%" y="101" width="0.7851%" height="15" fill="rgb(221,13,13)" fg:x="358517" fg:w="5956"/><text x="47.5085%" y="111.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (16,687 samples, 2.20%)</title><rect x="46.3025%" y="117" width="2.1996%" height="15" fill="rgb(238,131,9)" fg:x="351265" fg:w="16687"/><text x="46.5525%" y="127.50">1..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (3,479 samples, 0.46%)</title><rect x="48.0436%" y="101" width="0.4586%" height="15" fill="rgb(211,50,8)" fg:x="364473" fg:w="3479"/><text x="48.2936%" y="111.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (7,465 samples, 0.98%)</title><rect x="48.5022%" y="117" width="0.9840%" height="15" fill="rgb(245,182,24)" fg:x="367952" fg:w="7465"/><text x="48.7522%" y="127.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (61,244 samples, 8.07%)</title><rect x="41.4861%" y="213" width="8.0730%" height="15" fill="rgb(242,14,37)" fg:x="314726" fg:w="61244"/><text x="41.7361%" y="223.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (61,244 samples, 8.07%)</title><rect x="41.4861%" y="197" width="8.0730%" height="15" fill="rgb(246,228,12)" fg:x="314726" fg:w="61244"/><text x="41.7361%" y="207.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (57,297 samples, 7.55%)</title><rect x="42.0064%" y="181" width="7.5527%" height="15" fill="rgb(213,55,15)" fg:x="318673" fg:w="57297"/><text x="42.2564%" y="191.50">1brc.exe`c..</text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (57,297 samples, 7.55%)</title><rect x="42.0064%" y="165" width="7.5527%" height="15" fill="rgb(209,9,3)" fg:x="318673" fg:w="57297"/><text x="42.2564%" y="175.50">1brc.exe`s..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (57,297 samples, 7.55%)</title><rect x="42.0064%" y="149" width="7.5527%" height="15" fill="rgb(230,59,30)" fg:x="318673" fg:w="57297"/><text x="42.2564%" y="159.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (55,046 samples, 7.26%)</title><rect x="42.3031%" y="133" width="7.2560%" height="15" fill="rgb(209,121,21)" fg:x="320924" fg:w="55046"/><text x="42.5531%" y="143.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (553 samples, 0.07%)</title><rect x="49.4862%" y="117" width="0.0729%" height="15" fill="rgb(220,109,13)" fg:x="375417" fg:w="553"/><text x="49.7362%" y="127.50"></text></g><g><title>1brc.exe`std::hash::random::impl$1::build_hasher (15,089 samples, 1.99%)</title><rect x="49.5591%" y="213" width="1.9890%" height="15" fill="rgb(232,18,1)" fg:x="375970" fg:w="15089"/><text x="49.8091%" y="223.50">1..</text></g><g><title>1brc.exe`core::hash::sip::SipHasher13::new_with_keys (7,233 samples, 0.95%)</title><rect x="50.5946%" y="197" width="0.9534%" height="15" fill="rgb(215,41,42)" fg:x="383826" fg:w="7233"/><text x="50.8446%" y="207.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (7,233 samples, 0.95%)</title><rect x="50.5946%" y="181" width="0.9534%" height="15" fill="rgb(224,123,36)" fg:x="383826" fg:w="7233"/><text x="50.8446%" y="191.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (7,233 samples, 0.95%)</title><rect x="50.5946%" y="165" width="0.9534%" height="15" fill="rgb(240,125,3)" fg:x="383826" fg:w="7233"/><text x="50.8446%" y="175.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (4,224 samples, 0.56%)</title><rect x="58.7239%" y="133" width="0.5568%" height="15" fill="rgb(205,98,50)" fg:x="445497" fg:w="4224"/><text x="58.9739%" y="143.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (11,414 samples, 1.50%)</title><rect x="58.0467%" y="149" width="1.5046%" height="15" fill="rgb(205,185,37)" fg:x="440360" fg:w="11414"/><text x="58.2967%" y="159.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (2,053 samples, 0.27%)</title><rect x="59.2807%" y="133" width="0.2706%" height="15" fill="rgb(238,207,15)" fg:x="449721" fg:w="2053"/><text x="59.5307%" y="143.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (2,529 samples, 0.33%)</title><rect x="61.8577%" y="133" width="0.3334%" height="15" fill="rgb(213,199,42)" fg:x="469271" fg:w="2529"/><text x="62.1077%" y="143.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (20,058 samples, 2.64%)</title><rect x="59.5513%" y="149" width="2.6440%" height="15" fill="rgb(235,201,11)" fg:x="451774" fg:w="20058"/><text x="59.8013%" y="159.50">1b..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (59,479 samples, 7.84%)</title><rect x="54.3989%" y="165" width="7.8403%" height="15" fill="rgb(207,46,11)" fg:x="412686" fg:w="59479"/><text x="54.6489%" y="175.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (333 samples, 0.04%)</title><rect x="62.1953%" y="149" width="0.0439%" height="15" fill="rgb(241,35,35)" fg:x="471832" fg:w="333"/><text x="62.4453%" y="159.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (5,158 samples, 0.68%)</title><rect x="62.8416%" y="149" width="0.6799%" height="15" fill="rgb(243,32,47)" fg:x="476735" fg:w="5158"/><text x="63.0916%" y="159.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (14,687 samples, 1.94%)</title><rect x="62.2392%" y="165" width="1.9360%" height="15" fill="rgb(247,202,23)" fg:x="472165" fg:w="14687"/><text x="62.4892%" y="175.50">1..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (4,959 samples, 0.65%)</title><rect x="63.5215%" y="149" width="0.6537%" height="15" fill="rgb(219,102,11)" fg:x="481893" fg:w="4959"/><text x="63.7715%" y="159.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (24,590 samples, 3.24%)</title><rect x="65.3892%" y="149" width="3.2414%" height="15" fill="rgb(243,110,44)" fg:x="496062" fg:w="24590"/><text x="65.6392%" y="159.50">1br..</text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;slice2$&lt;u8&gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (234,072 samples, 30.85%)</title><rect x="39.3611%" y="229" width="30.8546%" height="15" fill="rgb(222,74,54)" fg:x="298605" fg:w="234072"/><text x="39.6111%" y="239.50">1brc.exe`core::hash::BuildHasher::hash_one&lt;std::ha..</text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (141,618 samples, 18.67%)</title><rect x="51.5481%" y="213" width="18.6676%" height="15" fill="rgb(216,99,12)" fg:x="391059" fg:w="141618"/><text x="51.7981%" y="223.50">1brc.exe`std::hash::random::i..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (141,618 samples, 18.67%)</title><rect x="51.5481%" y="197" width="18.6676%" height="15" fill="rgb(226,22,26)" fg:x="391059" fg:w="141618"/><text x="51.7981%" y="207.50">1brc.exe`core::hash::sip::imp..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (141,618 samples, 18.67%)</title><rect x="51.5481%" y="181" width="18.6676%" height="15" fill="rgb(217,163,10)" fg:x="391059" fg:w="141618"/><text x="51.7981%" y="191.50">1brc.exe`core::hash::sip::imp..</text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (45,825 samples, 6.04%)</title><rect x="64.1752%" y="165" width="6.0405%" height="15" fill="rgb(213,25,53)" fg:x="486852" fg:w="45825"/><text x="64.4252%" y="175.50">1brc.exe..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (12,025 samples, 1.59%)</title><rect x="68.6306%" y="149" width="1.5851%" height="15" fill="rgb(252,105,26)" fg:x="520652" fg:w="12025"/><text x="68.8806%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$&lt;slice2$ (82 samples, 0.01%)</title><rect x="70.2172%" y="213" width="0.0108%" height="15" fill="rgb(220,39,43)" fg:x="532689" fg:w="82"/><text x="70.4672%" y="223.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (81 samples, 0.01%)</title><rect x="70.2174%" y="197" width="0.0107%" height="15" fill="rgb(229,68,48)" fg:x="532690" fg:w="81"/><text x="70.4674%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::probe_seq (132 samples, 0.02%)</title><rect x="70.2367%" y="101" width="0.0174%" height="15" fill="rgb(252,8,32)" fg:x="532837" fg:w="132"/><text x="70.4867%" y="111.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (132 samples, 0.02%)</title><rect x="70.2367%" y="85" width="0.0174%" height="15" fill="rgb(223,20,43)" fg:x="532837" fg:w="132"/><text x="70.4867%" y="95.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_insert_slot (149 samples, 0.02%)</title><rect x="70.2346%" y="117" width="0.0196%" height="15" fill="rgb(229,81,49)" fg:x="532821" fg:w="149"/><text x="70.4846%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (151 samples, 0.02%)</title><rect x="70.2346%" y="133" width="0.0199%" height="15" fill="rgb(236,28,36)" fg:x="532821" fg:w="151"/><text x="70.4846%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::alloc::inner::do_alloc (102 samples, 0.01%)</title><rect x="70.2545%" y="85" width="0.0134%" height="15" fill="rgb(249,185,26)" fg:x="532972" fg:w="102"/><text x="70.5045%" y="95.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::allocate (102 samples, 0.01%)</title><rect x="70.2545%" y="69" width="0.0134%" height="15" fill="rgb(249,174,33)" fg:x="532972" fg:w="102"/><text x="70.5045%" y="79.50"></text></g><g><title>1brc.exe`alloc::alloc::Global::alloc_impl (102 samples, 0.01%)</title><rect x="70.2545%" y="53" width="0.0134%" height="15" fill="rgb(233,201,37)" fg:x="532972" fg:w="102"/><text x="70.5045%" y="63.50"></text></g><g><title>1brc.exe`alloc::alloc::alloc (102 samples, 0.01%)</title><rect x="70.2545%" y="37" width="0.0134%" height="15" fill="rgb(221,78,26)" fg:x="532972" fg:w="102"/><text x="70.5045%" y="47.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_resize (103 samples, 0.01%)</title><rect x="70.2545%" y="133" width="0.0136%" height="15" fill="rgb(250,127,30)" fg:x="532972" fg:w="103"/><text x="70.5045%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (103 samples, 0.01%)</title><rect x="70.2545%" y="117" width="0.0136%" height="15" fill="rgb(230,49,44)" fg:x="532972" fg:w="103"/><text x="70.5045%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::new_uninitialized (103 samples, 0.01%)</title><rect x="70.2545%" y="101" width="0.0136%" height="15" fill="rgb(229,67,23)" fg:x="532972" fg:w="103"/><text x="70.5045%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (309 samples, 0.04%)</title><rect x="70.2283%" y="197" width="0.0407%" height="15" fill="rgb(249,83,47)" fg:x="532773" fg:w="309"/><text x="70.4783%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (309 samples, 0.04%)</title><rect x="70.2283%" y="181" width="0.0407%" height="15" fill="rgb(215,43,3)" fg:x="532773" fg:w="309"/><text x="70.4783%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (309 samples, 0.04%)</title><rect x="70.2283%" y="165" width="0.0407%" height="15" fill="rgb(238,154,13)" fg:x="532773" fg:w="309"/><text x="70.4783%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (309 samples, 0.04%)</title><rect x="70.2283%" y="149" width="0.0407%" height="15" fill="rgb(219,56,2)" fg:x="532773" fg:w="309"/><text x="70.4783%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (331 samples, 0.04%)</title><rect x="70.2282%" y="213" width="0.0436%" height="15" fill="rgb(233,0,4)" fg:x="532772" fg:w="331"/><text x="70.4782%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;(ref$&lt;slice2$ (432 samples, 0.06%)</title><rect x="70.2157%" y="229" width="0.0569%" height="15" fill="rgb(235,30,7)" fg:x="532677" fg:w="432"/><text x="70.4657%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$&lt;slice2$ (3,543 samples, 0.47%)</title><rect x="70.2726%" y="229" width="0.4670%" height="15" fill="rgb(250,79,13)" fg:x="533109" fg:w="3543"/><text x="70.5226%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::bucket (3,780 samples, 0.50%)</title><rect x="70.7396%" y="197" width="0.4983%" height="15" fill="rgb(211,146,34)" fg:x="536652" fg:w="3780"/><text x="70.9896%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;ref$&lt;slice2$ (3,780 samples, 0.50%)</title><rect x="70.7396%" y="181" width="0.4983%" height="15" fill="rgb(228,22,38)" fg:x="536652" fg:w="3780"/><text x="70.9896%" y="191.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (3,780 samples, 0.50%)</title><rect x="70.7396%" y="165" width="0.4983%" height="15" fill="rgb(235,168,5)" fg:x="536652" fg:w="3780"/><text x="70.9896%" y="175.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (3,780 samples, 0.50%)</title><rect x="70.7396%" y="149" width="0.4983%" height="15" fill="rgb(221,155,16)" fg:x="536652" fg:w="3780"/><text x="70.9896%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::ProbeSeq::move_next (216 samples, 0.03%)</title><rect x="71.9220%" y="181" width="0.0285%" height="15" fill="rgb(215,215,53)" fg:x="545622" fg:w="216"/><text x="72.1720%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::impl$3::next (11,414 samples, 1.50%)</title><rect x="71.9505%" y="181" width="1.5046%" height="15" fill="rgb(223,4,10)" fg:x="545838" fg:w="11414"/><text x="72.2005%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (11,414 samples, 1.50%)</title><rect x="71.9505%" y="165" width="1.5046%" height="15" fill="rgb(234,103,6)" fg:x="545838" fg:w="11414"/><text x="72.2005%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros(core::num::nonzero::NonZero (83 samples, 0.01%)</title><rect x="73.4441%" y="149" width="0.0109%" height="15" fill="rgb(227,97,0)" fg:x="557169" fg:w="83"/><text x="73.6941%" y="159.50"></text></g><g><title>1brc.exe`core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros(core::num::nonzero::NonZero (83 samples, 0.01%)</title><rect x="73.4441%" y="133" width="0.0109%" height="15" fill="rgb(234,150,53)" fg:x="557169" fg:w="83"/><text x="73.6941%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (9,267 samples, 1.22%)</title><rect x="73.4550%" y="181" width="1.2215%" height="15" fill="rgb(228,201,54)" fg:x="557252" fg:w="9267"/><text x="73.7050%" y="191.50"></text></g><g><title>`0x7FFD7EDB1100 (115 samples, 0.02%)</title><rect x="80.0192%" y="85" width="0.0152%" height="15" fill="rgb(222,22,37)" fg:x="607050" fg:w="115"/><text x="80.2692%" y="95.50"></text></g><g><title>`0x7FFD7EDB1103 (1,706 samples, 0.22%)</title><rect x="80.0344%" y="85" width="0.2249%" height="15" fill="rgb(237,53,32)" fg:x="607165" fg:w="1706"/><text x="80.2844%" y="95.50"></text></g><g><title>`0x7FFD7EDB1107 (1,718 samples, 0.23%)</title><rect x="80.2593%" y="85" width="0.2265%" height="15" fill="rgb(233,25,53)" fg:x="608871" fg:w="1718"/><text x="80.5093%" y="95.50"></text></g><g><title>`0x7FFD7EDB1112 (1,675 samples, 0.22%)</title><rect x="80.4938%" y="85" width="0.2208%" height="15" fill="rgb(210,40,34)" fg:x="610650" fg:w="1675"/><text x="80.7438%" y="95.50"></text></g><g><title>`0x7FFD7EDB1115 (12,325 samples, 1.62%)</title><rect x="80.7146%" y="85" width="1.6246%" height="15" fill="rgb(241,220,44)" fg:x="612325" fg:w="12325"/><text x="80.9646%" y="95.50"></text></g><g><title>`0x7FFD7EDB111A (249 samples, 0.03%)</title><rect x="82.3397%" y="85" width="0.0328%" height="15" fill="rgb(235,28,35)" fg:x="624654" fg:w="249"/><text x="82.5897%" y="95.50"></text></g><g><title>`0x7FFD7EDB111D (304 samples, 0.04%)</title><rect x="82.3726%" y="85" width="0.0401%" height="15" fill="rgb(210,56,17)" fg:x="624903" fg:w="304"/><text x="82.6226%" y="95.50"></text></g><g><title>`0x7FFD7EDB1120 (780 samples, 0.10%)</title><rect x="82.4126%" y="85" width="0.1028%" height="15" fill="rgb(224,130,29)" fg:x="625207" fg:w="780"/><text x="82.6626%" y="95.50"></text></g><g><title>`0x7FFD7EDB1125 (2,734 samples, 0.36%)</title><rect x="82.5156%" y="85" width="0.3604%" height="15" fill="rgb(235,212,8)" fg:x="625988" fg:w="2734"/><text x="82.7656%" y="95.50"></text></g><g><title>`0x7FFD7EDB1129 (508 samples, 0.07%)</title><rect x="82.8760%" y="85" width="0.0670%" height="15" fill="rgb(223,33,50)" fg:x="628722" fg:w="508"/><text x="83.1260%" y="95.50"></text></g><g><title>`0x7FFD7EDB112B (502 samples, 0.07%)</title><rect x="82.9429%" y="85" width="0.0662%" height="15" fill="rgb(219,149,13)" fg:x="629230" fg:w="502"/><text x="83.1929%" y="95.50"></text></g><g><title>`0x7FFD7EDB112E (798 samples, 0.11%)</title><rect x="83.0091%" y="85" width="0.1052%" height="15" fill="rgb(250,156,29)" fg:x="629732" fg:w="798"/><text x="83.2591%" y="95.50"></text></g><g><title>`0x7FFD7EDB1130 (2,239 samples, 0.30%)</title><rect x="83.1143%" y="85" width="0.2951%" height="15" fill="rgb(216,193,19)" fg:x="630530" fg:w="2239"/><text x="83.3643%" y="95.50"></text></g><g><title>`0x7FFD7EDB1132 (5,619 samples, 0.74%)</title><rect x="83.4094%" y="85" width="0.7407%" height="15" fill="rgb(216,135,14)" fg:x="632769" fg:w="5619"/><text x="83.6594%" y="95.50"></text></g><g><title>`0x7FFD7EDB1135 (21,494 samples, 2.83%)</title><rect x="84.1501%" y="85" width="2.8333%" height="15" fill="rgb(241,47,5)" fg:x="638388" fg:w="21494"/><text x="84.4001%" y="95.50">`0..</text></g><g><title>`0x7FFD7EDB1137 (87 samples, 0.01%)</title><rect x="86.9834%" y="85" width="0.0115%" height="15" fill="rgb(233,42,35)" fg:x="659882" fg:w="87"/><text x="87.2334%" y="95.50"></text></g><g><title>`0x7FFD7EDB113A (849 samples, 0.11%)</title><rect x="86.9948%" y="85" width="0.1119%" height="15" fill="rgb(231,13,6)" fg:x="659969" fg:w="849"/><text x="87.2448%" y="95.50"></text></g><g><title>`0x7FFD7EDB113D (412 samples, 0.05%)</title><rect x="87.1068%" y="85" width="0.0543%" height="15" fill="rgb(207,181,40)" fg:x="660818" fg:w="412"/><text x="87.3568%" y="95.50"></text></g><g><title>`0x7FFD7EDB113F (555 samples, 0.07%)</title><rect x="87.1611%" y="85" width="0.0732%" height="15" fill="rgb(254,173,49)" fg:x="661230" fg:w="555"/><text x="87.4111%" y="95.50"></text></g><g><title>`0x7FFD7EDB1142 (1,069 samples, 0.14%)</title><rect x="87.2342%" y="85" width="0.1409%" height="15" fill="rgb(221,1,38)" fg:x="661785" fg:w="1069"/><text x="87.4842%" y="95.50"></text></g><g><title>`0x7FFD7EDB114A (335 samples, 0.04%)</title><rect x="87.3834%" y="85" width="0.0442%" height="15" fill="rgb(206,124,46)" fg:x="662917" fg:w="335"/><text x="87.6334%" y="95.50"></text></g><g><title>`0x7FFD7EDB114E (265 samples, 0.03%)</title><rect x="87.4276%" y="85" width="0.0349%" height="15" fill="rgb(249,21,11)" fg:x="663252" fg:w="265"/><text x="87.6776%" y="95.50"></text></g><g><title>`0x7FFD7EDB1187 (345 samples, 0.05%)</title><rect x="87.4625%" y="85" width="0.0455%" height="15" fill="rgb(222,201,40)" fg:x="663517" fg:w="345"/><text x="87.7125%" y="95.50"></text></g><g><title>`0x7FFD7EDB118A (84 samples, 0.01%)</title><rect x="87.5080%" y="85" width="0.0111%" height="15" fill="rgb(235,61,29)" fg:x="663862" fg:w="84"/><text x="87.7580%" y="95.50"></text></g><g><title>`0x7FFD7EDB118E (105 samples, 0.01%)</title><rect x="87.5191%" y="85" width="0.0138%" height="15" fill="rgb(219,207,3)" fg:x="663946" fg:w="105"/><text x="87.7691%" y="95.50"></text></g><g><title>`0x7FFD7EDB1190 (359 samples, 0.05%)</title><rect x="87.5329%" y="85" width="0.0473%" height="15" fill="rgb(222,56,46)" fg:x="664051" fg:w="359"/><text x="87.7829%" y="95.50"></text></g><g><title>`0x7FFD7EDB1193 (998 samples, 0.13%)</title><rect x="87.5802%" y="85" width="0.1316%" height="15" fill="rgb(239,76,54)" fg:x="664410" fg:w="998"/><text x="87.8302%" y="95.50"></text></g><g><title>`0x7FFD7EDB1197 (1,418 samples, 0.19%)</title><rect x="87.7118%" y="85" width="0.1869%" height="15" fill="rgb(231,124,27)" fg:x="665408" fg:w="1418"/><text x="87.9618%" y="95.50"></text></g><g><title>`0x7FFD7EDB11A2 (225 samples, 0.03%)</title><rect x="87.9027%" y="85" width="0.0297%" height="15" fill="rgb(249,195,6)" fg:x="666856" fg:w="225"/><text x="88.1527%" y="95.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (100,621 samples, 13.26%)</title><rect x="74.6766%" y="165" width="13.2635%" height="15" fill="rgb(237,174,47)" fg:x="566519" fg:w="100621"/><text x="74.9266%" y="175.50">1brc.exe`hashbrown::..</text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (100,621 samples, 13.26%)</title><rect x="74.6766%" y="149" width="13.2635%" height="15" fill="rgb(206,201,31)" fg:x="566519" fg:w="100621"/><text x="74.9266%" y="159.50">1brc.exe`hashbrown::..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (100,518 samples, 13.25%)</title><rect x="74.6902%" y="133" width="13.2499%" height="15" fill="rgb(231,57,52)" fg:x="566622" fg:w="100518"/><text x="74.9402%" y="143.50">1brc.exe`core::cmp::..</text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (100,518 samples, 13.25%)</title><rect x="74.6902%" y="117" width="13.2499%" height="15" fill="rgb(248,177,22)" fg:x="566622" fg:w="100518"/><text x="74.9402%" y="127.50">1brc.exe`core::slice..</text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (100,518 samples, 13.25%)</title><rect x="74.6902%" y="101" width="13.2499%" height="15" fill="rgb(215,211,37)" fg:x="566622" fg:w="100518"/><text x="74.9402%" y="111.50">1brc.exe`core::slice..</text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (103,410 samples, 13.63%)</title><rect x="74.6766%" y="181" width="13.6312%" height="15" fill="rgb(241,128,51)" fg:x="566519" fg:w="103410"/><text x="74.9266%" y="191.50">1brc.exe`hashbrown::r..</text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ref (2,789 samples, 0.37%)</title><rect x="87.9401%" y="165" width="0.3676%" height="15" fill="rgb(227,165,31)" fg:x="667140" fg:w="2789"/><text x="88.1901%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ptr (2,789 samples, 0.37%)</title><rect x="87.9401%" y="149" width="0.3676%" height="15" fill="rgb(228,167,24)" fg:x="667140" fg:w="2789"/><text x="88.1901%" y="159.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (2,789 samples, 0.37%)</title><rect x="87.9401%" y="133" width="0.3676%" height="15" fill="rgb(228,143,12)" fg:x="667140" fg:w="2789"/><text x="88.1901%" y="143.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (2,789 samples, 0.37%)</title><rect x="87.9401%" y="117" width="0.3676%" height="15" fill="rgb(249,149,8)" fg:x="667140" fg:w="2789"/><text x="88.1901%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::load (1,447 samples, 0.19%)</title><rect x="88.3077%" y="181" width="0.1907%" height="15" fill="rgb(243,35,44)" fg:x="669929" fg:w="1447"/><text x="88.5577%" y="191.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (1,447 samples, 0.19%)</title><rect x="88.3077%" y="165" width="0.1907%" height="15" fill="rgb(246,89,9)" fg:x="669929" fg:w="1447"/><text x="88.5577%" y="175.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (1,447 samples, 0.19%)</title><rect x="88.3077%" y="149" width="0.1907%" height="15" fill="rgb(233,213,13)" fg:x="669929" fg:w="1447"/><text x="88.5577%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (5,771 samples, 0.76%)</title><rect x="88.4985%" y="181" width="0.7607%" height="15" fill="rgb(233,141,41)" fg:x="671376" fg:w="5771"/><text x="88.7485%" y="191.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (5,771 samples, 0.76%)</title><rect x="88.4985%" y="165" width="0.7607%" height="15" fill="rgb(239,167,4)" fg:x="671376" fg:w="5771"/><text x="88.7485%" y="175.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt;::get_mut(ref$&lt;slice2$ (391,972 samples, 51.67%)</title><rect x="37.7396%" y="277" width="51.6684%" height="15" fill="rgb(209,217,16)" fg:x="286304" fg:w="391972"/><text x="37.9896%" y="287.50">1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,s..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(ref$&lt;slice2$ (391,972 samples, 51.67%)</title><rect x="37.7396%" y="261" width="51.6684%" height="15" fill="rgb(219,88,35)" fg:x="286304" fg:w="391972"/><text x="37.9896%" y="271.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::ran..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(ref$&lt;slice2$ (391,972 samples, 51.67%)</title><rect x="37.7396%" y="245" width="51.6684%" height="15" fill="rgb(220,193,23)" fg:x="286304" fg:w="391972"/><text x="37.9896%" y="255.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::ran..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (141,624 samples, 18.67%)</title><rect x="70.7396%" y="229" width="18.6684%" height="15" fill="rgb(230,90,52)" fg:x="536652" fg:w="141624"/><text x="70.9896%" y="239.50">1brc.exe`hashbrown::raw::RawT..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (141,624 samples, 18.67%)</title><rect x="70.7396%" y="213" width="18.6684%" height="15" fill="rgb(252,106,19)" fg:x="536652" fg:w="141624"/><text x="70.9896%" y="223.50">1brc.exe`hashbrown::raw::RawT..</text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (137,844 samples, 18.17%)</title><rect x="71.2379%" y="197" width="18.1701%" height="15" fill="rgb(206,74,20)" fg:x="540432" fg:w="137844"/><text x="71.4879%" y="207.50">1brc.exe`hashbrown::raw::Raw..</text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_empty (1,129 samples, 0.15%)</title><rect x="89.2592%" y="181" width="0.1488%" height="15" fill="rgb(230,138,44)" fg:x="677147" fg:w="1129"/><text x="89.5092%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (1,068 samples, 0.14%)</title><rect x="89.2672%" y="165" width="0.1408%" height="15" fill="rgb(235,182,43)" fg:x="677208" fg:w="1068"/><text x="89.5172%" y="175.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1,068 samples, 0.14%)</title><rect x="89.2672%" y="149" width="0.1408%" height="15" fill="rgb(242,16,51)" fg:x="677208" fg:w="1068"/><text x="89.5172%" y="159.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt;::len (105 samples, 0.01%)</title><rect x="89.4080%" y="277" width="0.0138%" height="15" fill="rgb(248,9,4)" fg:x="678276" fg:w="105"/><text x="89.6580%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (105 samples, 0.01%)</title><rect x="89.4080%" y="261" width="0.0138%" height="15" fill="rgb(210,31,22)" fg:x="678276" fg:w="105"/><text x="89.6580%" y="271.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (105 samples, 0.01%)</title><rect x="89.4080%" y="245" width="0.0138%" height="15" fill="rgb(239,54,39)" fg:x="678276" fg:w="105"/><text x="89.6580%" y="255.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::try_allocate_in (105 samples, 0.01%)</title><rect x="89.4080%" y="229" width="0.0138%" height="15" fill="rgb(230,99,41)" fg:x="678276" fg:w="105"/><text x="89.6580%" y="239.50"></text></g><g><title>`0x7FFDA1A7B44D (89 samples, 0.01%)</title><rect x="89.4101%" y="213" width="0.0117%" height="15" fill="rgb(253,106,12)" fg:x="678292" fg:w="89"/><text x="89.6601%" y="223.50"></text></g><g><title>1brc.exe`std::io::default_read_exact&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (78,112 samples, 10.30%)</title><rect x="89.4300%" y="277" width="10.2965%" height="15" fill="rgb(213,46,41)" fg:x="678443" fg:w="78112"/><text x="89.6800%" y="287.50">1brc.exe`std::i..</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (78,112 samples, 10.30%)</title><rect x="89.4300%" y="261" width="10.2965%" height="15" fill="rgb(215,133,35)" fg:x="678443" fg:w="78112"/><text x="89.6800%" y="271.50">1brc.exe`std::i..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read (78,112 samples, 10.30%)</title><rect x="89.4300%" y="245" width="10.2965%" height="15" fill="rgb(213,28,5)" fg:x="678443" fg:w="78112"/><text x="89.6800%" y="255.50">1brc.exe`std::s..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (78,112 samples, 10.30%)</title><rect x="89.4300%" y="229" width="10.2965%" height="15" fill="rgb(215,77,49)" fg:x="678443" fg:w="78112"/><text x="89.6800%" y="239.50">1brc.exe`std::s..</text></g><g><title>`0x7FFDA1AED624 (78,107 samples, 10.30%)</title><rect x="89.4307%" y="213" width="10.2958%" height="15" fill="rgb(248,100,22)" fg:x="678448" fg:w="78107"/><text x="89.6807%" y="223.50">`0x7FFDA1AED624</text></g><g><title>`0x7FFD9F541A09 (1,325 samples, 0.17%)</title><rect x="99.7339%" y="213" width="0.1747%" height="15" fill="rgb(208,67,9)" fg:x="756611" fg:w="1325"/><text x="99.9839%" y="223.50"></text></g><g><title>`0x7FFDA1AEE004 (1,325 samples, 0.17%)</title><rect x="99.7339%" y="197" width="0.1747%" height="15" fill="rgb(219,133,21)" fg:x="756611" fg:w="1325"/><text x="99.9839%" y="207.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (1,346 samples, 0.18%)</title><rect x="99.7323%" y="261" width="0.1774%" height="15" fill="rgb(246,46,29)" fg:x="756599" fg:w="1346"/><text x="99.9823%" y="271.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (1,346 samples, 0.18%)</title><rect x="99.7323%" y="245" width="0.1774%" height="15" fill="rgb(246,185,52)" fg:x="756599" fg:w="1346"/><text x="99.9823%" y="255.50"></text></g><g><title>`0x7FFD9F541476 (1,346 samples, 0.18%)</title><rect x="99.7323%" y="229" width="0.1774%" height="15" fill="rgb(252,136,11)" fg:x="756599" fg:w="1346"/><text x="99.9823%" y="239.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (1,394 samples, 0.18%)</title><rect x="99.7265%" y="277" width="0.1838%" height="15" fill="rgb(219,138,53)" fg:x="756555" fg:w="1394"/><text x="99.9765%" y="287.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0 (756,774 samples, 99.76%)</title><rect x="0.1575%" y="293" width="99.7553%" height="15" fill="rgb(211,51,23)" fg:x="1195" fg:w="756774"/><text x="0.4075%" y="303.50">1brc.exe`1brc::input_multitreaded::closure$0</text></g><g><title>1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (756,781 samples, 99.76%)</title><rect x="0.1574%" y="357" width="99.7563%" height="15" fill="rgb(247,221,28)" fg:x="1194" fg:w="756781"/><text x="0.4074%" y="367.50">1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::..</text></g><g><title>1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (756,781 samples, 99.76%)</title><rect x="0.1574%" y="341" width="99.7563%" height="15" fill="rgb(251,222,45)" fg:x="1194" fg:w="756781"/><text x="0.4074%" y="351.50">1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closu..</text></g><g><title>1brc.exe`std::panicking::try::do_call (756,781 samples, 99.76%)</title><rect x="0.1574%" y="325" width="99.7563%" height="15" fill="rgb(217,162,53)" fg:x="1194" fg:w="756781"/><text x="0.4074%" y="335.50">1brc.exe`std::panicking::try::do_call</text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (756,781 samples, 99.76%)</title><rect x="0.1574%" y="309" width="99.7563%" height="15" fill="rgb(229,93,14)" fg:x="1194" fg:w="756781"/><text x="0.4074%" y="319.50">1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationSta..</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (756,795 samples, 99.76%)</title><rect x="0.1567%" y="453" width="99.7581%" height="15" fill="rgb(209,67,49)" fg:x="1189" fg:w="756795"/><text x="0.4067%" y="463.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`alloc::boxed::impl$8::drop (756,795 samples, 99.76%)</title><rect x="0.1567%" y="437" width="99.7581%" height="15" fill="rgb(213,87,29)" fg:x="1189" fg:w="756795"/><text x="0.4067%" y="447.50">1brc.exe`alloc::boxed::impl$8::drop</text></g><g><title>1brc.exe`core::alloc::layout::Layout::for_value_raw (756,795 samples, 99.76%)</title><rect x="0.1567%" y="421" width="99.7581%" height="15" fill="rgb(205,151,52)" fg:x="1189" fg:w="756795"/><text x="0.4067%" y="431.50">1brc.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>1brc.exe`core::mem::size_of_val_raw (756,795 samples, 99.76%)</title><rect x="0.1567%" y="405" width="99.7581%" height="15" fill="rgb(253,215,39)" fg:x="1189" fg:w="756795"/><text x="0.4067%" y="415.50">1brc.exe`core::mem::size_of_val_raw</text></g><g><title>1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (756,795 samples, 99.76%)</title><rect x="0.1567%" y="389" width="99.7581%" height="15" fill="rgb(221,220,41)" fg:x="1189" fg:w="756795"/><text x="0.4067%" y="399.50">1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;all..</text></g><g><title>1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (756,793 samples, 99.76%)</title><rect x="0.1570%" y="373" width="99.7579%" height="15" fill="rgb(218,133,21)" fg:x="1191" fg:w="756793"/><text x="0.4070%" y="383.50">1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;..</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (756,847 samples, 99.76%)</title><rect x="0.1566%" y="469" width="99.7650%" height="15" fill="rgb(221,193,43)" fg:x="1188" fg:w="756847"/><text x="0.4066%" y="479.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (756,852 samples, 99.77%)</title><rect x="0.1566%" y="485" width="99.7656%" height="15" fill="rgb(240,128,52)" fg:x="1188" fg:w="756852"/><text x="0.4066%" y="495.50">1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>`0x7FFDA0747374 (758,015 samples, 99.92%)</title><rect x="0.0043%" y="501" width="99.9189%" height="15" fill="rgb(253,114,12)" fg:x="33" fg:w="758015"/><text x="0.2543%" y="511.50">`0x7FFDA0747374</text></g><g><title>`0x7FFDA1A9CC91 (758,144 samples, 99.94%)</title><rect x="0.0042%" y="517" width="99.9359%" height="15" fill="rgb(215,223,47)" fg:x="32" fg:w="758144"/><text x="0.2542%" y="527.50">`0x7FFDA1A9CC91</text></g><g><title>`0x7FFDA074737D (128 samples, 0.02%)</title><rect x="99.9233%" y="501" width="0.0169%" height="15" fill="rgb(248,225,23)" fg:x="758048" fg:w="128"/><text x="100.1733%" y="511.50"></text></g><g><title>`0x7FFDA1A9EC6E (126 samples, 0.02%)</title><rect x="99.9235%" y="485" width="0.0166%" height="15" fill="rgb(250,108,0)" fg:x="758050" fg:w="126"/><text x="100.1735%" y="495.50"></text></g><g><title>`0x7FFDA1AA4CDF (85 samples, 0.01%)</title><rect x="99.9536%" y="437" width="0.0112%" height="15" fill="rgb(228,208,7)" fg:x="758278" fg:w="85"/><text x="100.2036%" y="447.50"></text></g><g><title>`0x7FFDA1AA4B2D (88 samples, 0.01%)</title><rect x="99.9533%" y="453" width="0.0116%" height="15" fill="rgb(244,45,10)" fg:x="758276" fg:w="88"/><text x="100.2033%" y="463.50"></text></g><g><title>`0x7FFDA1A677A7 (112 samples, 0.01%)</title><rect x="99.9533%" y="469" width="0.0148%" height="15" fill="rgb(207,125,25)" fg:x="758276" fg:w="112"/><text x="100.2033%" y="479.50"></text></g><g><title>`0x7FFD9F569EB1 (107 samples, 0.01%)</title><rect x="99.9747%" y="373" width="0.0141%" height="15" fill="rgb(210,195,18)" fg:x="758438" fg:w="107"/><text x="100.2247%" y="383.50"></text></g><g><title>`0x7FFDA1AED644 (106 samples, 0.01%)</title><rect x="99.9748%" y="357" width="0.0140%" height="15" fill="rgb(249,80,12)" fg:x="758439" fg:w="106"/><text x="100.2248%" y="367.50"></text></g><g><title>`0x7FFD9F569968 (124 samples, 0.02%)</title><rect x="99.9730%" y="405" width="0.0163%" height="15" fill="rgb(221,65,9)" fg:x="758425" fg:w="124"/><text x="100.2230%" y="415.50"></text></g><g><title>`0x7FFD9F569B80 (120 samples, 0.02%)</title><rect x="99.9735%" y="389" width="0.0158%" height="15" fill="rgb(235,49,36)" fg:x="758429" fg:w="120"/><text x="100.2235%" y="399.50"></text></g><g><title>`0x7FFD9F568E0D (131 samples, 0.02%)</title><rect x="99.9725%" y="437" width="0.0173%" height="15" fill="rgb(225,32,20)" fg:x="758421" fg:w="131"/><text x="100.2225%" y="447.50"></text></g><g><title>`0x7FFD9F569074 (130 samples, 0.02%)</title><rect x="99.9726%" y="421" width="0.0171%" height="15" fill="rgb(215,141,46)" fg:x="758422" fg:w="130"/><text x="100.2226%" y="431.50"></text></g><g><title>`0x7FFDA1A69A1D (173 samples, 0.02%)</title><rect x="99.9719%" y="453" width="0.0228%" height="15" fill="rgb(250,160,47)" fg:x="758417" fg:w="173"/><text x="100.2219%" y="463.50"></text></g><g><title>`0x7FFDA1A6789F (174 samples, 0.02%)</title><rect x="99.9719%" y="469" width="0.0229%" height="15" fill="rgb(216,222,40)" fg:x="758417" fg:w="174"/><text x="100.2219%" y="479.50"></text></g><g><title>`0x7FFDA1AC60A4 (346 samples, 0.05%)</title><rect x="99.9529%" y="485" width="0.0456%" height="15" fill="rgb(234,217,39)" fg:x="758273" fg:w="346"/><text x="100.2029%" y="495.50"></text></g><g><title>`0x7FFDA1AC5C83 (372 samples, 0.05%)</title><rect x="99.9500%" y="501" width="0.0490%" height="15" fill="rgb(207,178,40)" fg:x="758251" fg:w="372"/><text x="100.2000%" y="511.50"></text></g><g><title>`0x7FFDA1AC5C2E (374 samples, 0.05%)</title><rect x="99.9500%" y="517" width="0.0493%" height="15" fill="rgb(221,136,13)" fg:x="758251" fg:w="374"/><text x="100.2000%" y="527.50"></text></g><g><title>all (758,630 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="758630"/><text x="0.2500%" y="543.50"></text></g></svg></svg>