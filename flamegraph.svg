<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="8207"><g><title>`0x7FFDA1A9CC70 (1 samples, 0.01%)</title><rect x="0.0000%" y="741" width="0.0122%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$1 (1 samples, 0.01%)</title><rect x="0.0122%" y="597" width="0.0122%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2622%" y="607.50"></text></g><g><title>1brc.exe`std::rt::init (1 samples, 0.01%)</title><rect x="0.0122%" y="581" width="0.0122%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2622%" y="591.50"></text></g><g><title>1brc.exe`std::thread::Thread::new_main (1 samples, 0.01%)</title><rect x="0.0122%" y="565" width="0.0122%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2622%" y="575.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread::Thread::set_name (1 samples, 0.01%)</title><rect x="0.0122%" y="549" width="0.0122%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2622%" y="559.50"></text></g><g><title>1brc.exe`core::ffi::c_str::CStr::to_str (1 samples, 0.01%)</title><rect x="0.0122%" y="533" width="0.0122%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2622%" y="543.50"></text></g><g><title>1brc.exe`1brc::flatten_and_sort_ref(std::collections::hash::map::HashMap (1 samples, 0.01%)</title><rect x="0.0244%" y="517" width="0.0122%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2744%" y="527.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;::keys (1 samples, 0.01%)</title><rect x="0.0244%" y="501" width="0.0122%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2744%" y="511.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;::iter (1 samples, 0.01%)</title><rect x="0.0244%" y="485" width="0.0122%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2744%" y="495.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::iter (1 samples, 0.01%)</title><rect x="0.0244%" y="469" width="0.0122%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2744%" y="479.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::iter (1 samples, 0.01%)</title><rect x="0.0244%" y="453" width="0.0122%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.2744%" y="463.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::iter (1 samples, 0.01%)</title><rect x="0.0244%" y="437" width="0.0122%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2744%" y="447.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::data_end (1 samples, 0.01%)</title><rect x="0.0244%" y="421" width="0.0122%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2744%" y="431.50"></text></g><g><title>1brc.exe`std::io::stdio::_print (1 samples, 0.01%)</title><rect x="0.0244%" y="405" width="0.0122%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2744%" y="415.50"></text></g><g><title>1brc.exe`std::io::stdio::print_to (1 samples, 0.01%)</title><rect x="0.0244%" y="389" width="0.0122%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2744%" y="399.50"></text></g><g><title>1brc.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.01%)</title><rect x="0.0244%" y="373" width="0.0122%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2744%" y="383.50"></text></g><g><title>1brc.exe`std::io::Write::write_fmt (1 samples, 0.01%)</title><rect x="0.0244%" y="357" width="0.0122%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2744%" y="367.50"></text></g><g><title>1brc.exe`core::fmt::write (1 samples, 0.01%)</title><rect x="0.0244%" y="341" width="0.0122%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2744%" y="351.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (1 samples, 0.01%)</title><rect x="0.0244%" y="325" width="0.0122%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2744%" y="335.50"></text></g><g><title>1brc.exe`core::fmt::float::float_to_decimal_common_exact&lt;f64&gt; (1 samples, 0.01%)</title><rect x="0.0244%" y="309" width="0.0122%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.2744%" y="319.50"></text></g><g><title>1brc.exe`core::fmt::Formatter::pad_formatted_parts (1 samples, 0.01%)</title><rect x="0.0244%" y="293" width="0.0122%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.2744%" y="303.50"></text></g><g><title>1brc.exe`core::fmt::Formatter::write_formatted_parts (1 samples, 0.01%)</title><rect x="0.0244%" y="277" width="0.0122%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.2744%" y="287.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (1 samples, 0.01%)</title><rect x="0.0244%" y="261" width="0.0122%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.2744%" y="271.50"></text></g><g><title>1brc.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.01%)</title><rect x="0.0244%" y="245" width="0.0122%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.2744%" y="255.50"></text></g><g><title>1brc.exe`std::io::stdio::impl$19::write_all (1 samples, 0.01%)</title><rect x="0.0244%" y="229" width="0.0122%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.2744%" y="239.50"></text></g><g><title>1brc.exe`core::slice::memchr::memrchr (1 samples, 0.01%)</title><rect x="0.0244%" y="213" width="0.0122%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.2744%" y="223.50"></text></g><g><title>1brc.exe`core::f64::impl$0::from_bits (1 samples, 0.01%)</title><rect x="4.9836%" y="501" width="0.0122%" height="15" fill="rgb(225,111,53)" fg:x="409" fg:w="1"/><text x="5.2336%" y="511.50"></text></g><g><title>1brc.exe`core::f64::impl$0::from_bits::rt_u64_to_f64 (1 samples, 0.01%)</title><rect x="4.9836%" y="485" width="0.0122%" height="15" fill="rgb(238,160,17)" fg:x="409" fg:w="1"/><text x="5.2336%" y="495.50"></text></g><g><title>1brc.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (1 samples, 0.01%)</title><rect x="4.9957%" y="485" width="0.0122%" height="15" fill="rgb(214,148,48)" fg:x="410" fg:w="1"/><text x="5.2457%" y="495.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::alloc::impl$0::dealloc (1 samples, 0.01%)</title><rect x="4.9957%" y="469" width="0.0122%" height="15" fill="rgb(232,36,49)" fg:x="410" fg:w="1"/><text x="5.2457%" y="479.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(std::io::buffered::bufreader::BufReader (2 samples, 0.02%)</title><rect x="4.9957%" y="501" width="0.0244%" height="15" fill="rgb(209,103,24)" fg:x="410" fg:w="2"/><text x="5.2457%" y="511.50"></text></g><g><title>`0x7FFDA1A747B1 (1 samples, 0.01%)</title><rect x="5.0079%" y="485" width="0.0122%" height="15" fill="rgb(229,88,8)" fg:x="411" fg:w="1"/><text x="5.2579%" y="495.50"></text></g><g><title>`0x7FFDA1A75B74 (1 samples, 0.01%)</title><rect x="5.0079%" y="469" width="0.0122%" height="15" fill="rgb(213,181,19)" fg:x="411" fg:w="1"/><text x="5.2579%" y="479.50"></text></g><g><title>`0x7FFDA1A76F37 (1 samples, 0.01%)</title><rect x="5.0079%" y="453" width="0.0122%" height="15" fill="rgb(254,191,54)" fg:x="411" fg:w="1"/><text x="5.2579%" y="463.50"></text></g><g><title>`0x7FFDA1A59B1A (1 samples, 0.01%)</title><rect x="5.0079%" y="437" width="0.0122%" height="15" fill="rgb(241,83,37)" fg:x="411" fg:w="1"/><text x="5.2579%" y="447.50"></text></g><g><title>`0x7FFDA1AED924 (1 samples, 0.01%)</title><rect x="5.0079%" y="421" width="0.0122%" height="15" fill="rgb(233,36,39)" fg:x="411" fg:w="1"/><text x="5.2579%" y="431.50"></text></g><g><title>1brc.exe`core::num::impl$12::repeat_u8 (25 samples, 0.30%)</title><rect x="11.1246%" y="453" width="0.3046%" height="15" fill="rgb(226,3,54)" fg:x="913" fg:w="25"/><text x="11.3746%" y="463.50"></text></g><g><title>1brc.exe`core::slice::impl$0::align_to (99 samples, 1.21%)</title><rect x="11.4293%" y="453" width="1.2063%" height="15" fill="rgb(245,192,40)" fg:x="938" fg:w="99"/><text x="11.6793%" y="463.50"></text></g><g><title>1brc.exe`core::ptr::align_offset (2 samples, 0.02%)</title><rect x="12.6112%" y="437" width="0.0244%" height="15" fill="rgb(238,167,29)" fg:x="1035" fg:w="2"/><text x="12.8612%" y="447.50"></text></g><g><title>1brc.exe`core::slice::index::impl$5::index (5 samples, 0.06%)</title><rect x="12.6356%" y="437" width="0.0609%" height="15" fill="rgb(232,182,51)" fg:x="1037" fg:w="5"/><text x="12.8856%" y="447.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::index (5 samples, 0.06%)</title><rect x="12.6356%" y="421" width="0.0609%" height="15" fill="rgb(231,60,39)" fg:x="1037" fg:w="5"/><text x="12.8856%" y="431.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index (12 samples, 0.15%)</title><rect x="12.6356%" y="453" width="0.1462%" height="15" fill="rgb(208,69,12)" fg:x="1037" fg:w="12"/><text x="12.8856%" y="463.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::index (7 samples, 0.09%)</title><rect x="12.6965%" y="437" width="0.0853%" height="15" fill="rgb(235,93,37)" fg:x="1042" fg:w="7"/><text x="12.9465%" y="447.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$182::next_back (191 samples, 2.33%)</title><rect x="13.4397%" y="437" width="2.3273%" height="15" fill="rgb(213,116,39)" fg:x="1103" fg:w="191"/><text x="13.6897%" y="447.50">1..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq (109 samples, 1.33%)</title><rect x="14.4389%" y="421" width="1.3281%" height="15" fill="rgb(222,207,29)" fg:x="1185" fg:w="109"/><text x="14.6889%" y="431.50"></text></g><g><title>1brc.exe`core::slice::memchr::memrchr::closure$0 (87 samples, 1.06%)</title><rect x="15.7670%" y="437" width="1.0601%" height="15" fill="rgb(206,96,30)" fg:x="1294" fg:w="87"/><text x="16.0170%" y="447.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$181::rposition (346 samples, 4.22%)</title><rect x="12.7818%" y="453" width="4.2159%" height="15" fill="rgb(218,138,4)" fg:x="1049" fg:w="346"/><text x="13.0318%" y="463.50">1brc...</text></g><g><title>1brc.exe`core::slice::memchr::memrchr::closure$1 (14 samples, 0.17%)</title><rect x="16.8271%" y="437" width="0.1706%" height="15" fill="rgb(250,191,14)" fg:x="1381" fg:w="14"/><text x="17.0771%" y="447.50"></text></g><g><title>1brc.exe`core::str::impl$0::rfind(ref$ (987 samples, 12.03%)</title><rect x="5.0201%" y="501" width="12.0263%" height="15" fill="rgb(239,60,40)" fg:x="412" fg:w="987"/><text x="5.2701%" y="511.50">1brc.exe`core::str..</text></g><g><title>1brc.exe`core::str::pattern::impl$2::next_match_back (987 samples, 12.03%)</title><rect x="5.0201%" y="485" width="12.0263%" height="15" fill="rgb(206,27,48)" fg:x="412" fg:w="987"/><text x="5.2701%" y="495.50">1brc.exe`core::str..</text></g><g><title>1brc.exe`core::slice::memchr::memrchr (912 samples, 11.11%)</title><rect x="5.9340%" y="469" width="11.1125%" height="15" fill="rgb(225,35,8)" fg:x="487" fg:w="912"/><text x="6.1840%" y="479.50">1brc.exe`core::s..</text></g><g><title>1brc.exe`core::slice::memchr::contains_zero_byte (4 samples, 0.05%)</title><rect x="16.9977%" y="453" width="0.0487%" height="15" fill="rgb(250,213,24)" fg:x="1395" fg:w="4"/><text x="17.2477%" y="463.50"></text></g><g><title>1brc.exe`core::num::impl$11::wrapping_sub (1 samples, 0.01%)</title><rect x="17.0342%" y="437" width="0.0122%" height="15" fill="rgb(247,123,22)" fg:x="1398" fg:w="1"/><text x="17.2842%" y="447.50"></text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (92 samples, 1.12%)</title><rect x="17.1195%" y="421" width="1.1210%" height="15" fill="rgb(231,138,38)" fg:x="1405" fg:w="92"/><text x="17.3695%" y="431.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (92 samples, 1.12%)</title><rect x="17.1195%" y="405" width="1.1210%" height="15" fill="rgb(231,145,46)" fg:x="1405" fg:w="92"/><text x="17.3695%" y="415.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (92 samples, 1.12%)</title><rect x="17.1195%" y="389" width="1.1210%" height="15" fill="rgb(251,118,11)" fg:x="1405" fg:w="92"/><text x="17.3695%" y="399.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (43 samples, 0.52%)</title><rect x="18.2405%" y="421" width="0.5239%" height="15" fill="rgb(217,147,25)" fg:x="1497" fg:w="43"/><text x="18.4905%" y="431.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::get(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (43 samples, 0.52%)</title><rect x="18.2405%" y="405" width="0.5239%" height="15" fill="rgb(247,81,37)" fg:x="1497" fg:w="43"/><text x="18.4905%" y="415.50"></text></g><g><title>1brc.exe`core::num::impl$12::repeat_u8 (11 samples, 0.13%)</title><rect x="24.4669%" y="405" width="0.1340%" height="15" fill="rgb(209,12,38)" fg:x="2008" fg:w="11"/><text x="24.7169%" y="415.50"></text></g><g><title>1brc.exe`core::slice::memchr::contains_zero_byte (34 samples, 0.41%)</title><rect x="24.6010%" y="405" width="0.4143%" height="15" fill="rgb(227,1,9)" fg:x="2019" fg:w="34"/><text x="24.8510%" y="415.50"></text></g><g><title>1brc.exe`core::num::impl$11::wrapping_sub (5 samples, 0.06%)</title><rect x="24.9543%" y="389" width="0.0609%" height="15" fill="rgb(248,47,43)" fg:x="2048" fg:w="5"/><text x="25.2043%" y="399.50"></text></g><g><title>1brc.exe`core::str::iter::impl$45::next(core::str::iter::SplitInclusive (1,090 samples, 13.28%)</title><rect x="17.0464%" y="469" width="13.2813%" height="15" fill="rgb(221,10,30)" fg:x="1399" fg:w="1090"/><text x="17.2964%" y="479.50">1brc.exe`core::str::..</text></g><g><title>1brc.exe`core::str::iter::SplitInternal&lt;char&gt;::next_inclusive (1,090 samples, 13.28%)</title><rect x="17.0464%" y="453" width="13.2813%" height="15" fill="rgb(210,229,1)" fg:x="1399" fg:w="1090"/><text x="17.2964%" y="463.50">1brc.exe`core::str::..</text></g><g><title>1brc.exe`core::str::pattern::impl$1::next_match (1,089 samples, 13.27%)</title><rect x="17.0586%" y="437" width="13.2692%" height="15" fill="rgb(222,148,37)" fg:x="1400" fg:w="1089"/><text x="17.3086%" y="447.50">1brc.exe`core::str::..</text></g><g><title>1brc.exe`core::slice::memchr::memchr_aligned (949 samples, 11.56%)</title><rect x="18.7645%" y="421" width="11.5633%" height="15" fill="rgb(234,67,33)" fg:x="1540" fg:w="949"/><text x="19.0145%" y="431.50">1brc.exe`core::sl..</text></g><g><title>1brc.exe`core::slice::memchr::memchr_naive (436 samples, 5.31%)</title><rect x="25.0152%" y="405" width="5.3125%" height="15" fill="rgb(247,98,35)" fg:x="2053" fg:w="436"/><text x="25.2652%" y="415.50">1brc.ex..</text></g><g><title>1brc.exe`core::str::iter::impl$30::next (1,262 samples, 15.38%)</title><rect x="17.0464%" y="501" width="15.3771%" height="15" fill="rgb(247,138,52)" fg:x="1399" fg:w="1262"/><text x="17.2964%" y="511.50">1brc.exe`core::str::iter..</text></g><g><title>1brc.exe`core::iter::adapters::map::impl$2::next(core::iter::adapters::map::Map&lt;core::str::iter::SplitInclusive (1,262 samples, 15.38%)</title><rect x="17.0464%" y="485" width="15.3771%" height="15" fill="rgb(213,79,30)" fg:x="1399" fg:w="1262"/><text x="17.2964%" y="495.50">1brc.exe`core::iter::ada..</text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;ref$&lt;str$&gt; &gt; &gt;::map(enum2$&lt;core::option::Option&lt;ref$ (172 samples, 2.10%)</title><rect x="30.3278%" y="469" width="2.0958%" height="15" fill="rgb(246,177,23)" fg:x="2489" fg:w="172"/><text x="30.5778%" y="479.50">1..</text></g><g><title>1brc.exe`core::ops::function::impls::impl$4::call_once(core::str::LinesMap*, ref$ (172 samples, 2.10%)</title><rect x="30.3278%" y="453" width="2.0958%" height="15" fill="rgb(230,62,27)" fg:x="2489" fg:w="172"/><text x="30.5778%" y="463.50">1..</text></g><g><title>1brc.exe`core::str::impl$6::call_mut(core::str::LinesMap*, ref$ (172 samples, 2.10%)</title><rect x="30.3278%" y="437" width="2.0958%" height="15" fill="rgb(216,154,8)" fg:x="2489" fg:w="172"/><text x="30.5778%" y="447.50">1..</text></g><g><title>1brc.exe`core::str::impl$5::call(core::str::LinesMap*, ref$ (172 samples, 2.10%)</title><rect x="30.3278%" y="421" width="2.0958%" height="15" fill="rgb(244,35,45)" fg:x="2489" fg:w="172"/><text x="30.5778%" y="431.50">1..</text></g><g><title>1brc.exe`core::str::impl$0::strip_suffix(ref$ (109 samples, 1.33%)</title><rect x="31.0954%" y="405" width="1.3281%" height="15" fill="rgb(251,115,12)" fg:x="2552" fg:w="109"/><text x="31.3454%" y="415.50"></text></g><g><title>1brc.exe`core::str::pattern::impl$4::strip_suffix_of(char32_t, ref$ (109 samples, 1.33%)</title><rect x="31.0954%" y="389" width="1.3281%" height="15" fill="rgb(240,54,50)" fg:x="2552" fg:w="109"/><text x="31.3454%" y="399.50"></text></g><g><title>1brc.exe`core::str::pattern::impl$31::strip_suffix_of(ref$&lt;str$&gt;, ref$ (109 samples, 1.33%)</title><rect x="31.0954%" y="373" width="1.3281%" height="15" fill="rgb(233,84,52)" fg:x="2552" fg:w="109"/><text x="31.3454%" y="383.50"></text></g><g><title>1brc.exe`core::str::pattern::impl$31::is_suffix_of(ref$&lt;str$&gt;, ref$ (25 samples, 0.30%)</title><rect x="32.1189%" y="357" width="0.3046%" height="15" fill="rgb(207,117,47)" fg:x="2636" fg:w="25"/><text x="32.3689%" y="367.50"></text></g><g><title>1brc.exe`core::slice::impl$0::ends_with(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (25 samples, 0.30%)</title><rect x="32.1189%" y="341" width="0.3046%" height="15" fill="rgb(249,43,39)" fg:x="2636" fg:w="25"/><text x="32.3689%" y="351.50"></text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (3 samples, 0.04%)</title><rect x="32.3870%" y="325" width="0.0366%" height="15" fill="rgb(209,38,44)" fg:x="2658" fg:w="3"/><text x="32.6370%" y="335.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (3 samples, 0.04%)</title><rect x="32.3870%" y="309" width="0.0366%" height="15" fill="rgb(236,212,23)" fg:x="2658" fg:w="3"/><text x="32.6370%" y="319.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (3 samples, 0.04%)</title><rect x="32.3870%" y="293" width="0.0366%" height="15" fill="rgb(242,79,21)" fg:x="2658" fg:w="3"/><text x="32.6370%" y="303.50"></text></g><g><title>1brc.exe`core::num::impl$6::is_utf8_char_boundary (33 samples, 0.40%)</title><rect x="32.4723%" y="437" width="0.4021%" height="15" fill="rgb(211,96,35)" fg:x="2665" fg:w="33"/><text x="32.7223%" y="447.50"></text></g><g><title>1brc.exe`core::str::traits::impl$4::index(ref$&lt;str$&gt;, core::ops::range::RangeFrom (65 samples, 0.79%)</title><rect x="32.4235%" y="501" width="0.7920%" height="15" fill="rgb(253,215,40)" fg:x="2661" fg:w="65"/><text x="32.6735%" y="511.50"></text></g><g><title>1brc.exe`core::str::traits::impl$10::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$ (65 samples, 0.79%)</title><rect x="32.4235%" y="485" width="0.7920%" height="15" fill="rgb(211,81,21)" fg:x="2661" fg:w="65"/><text x="32.6735%" y="495.50"></text></g><g><title>1brc.exe`core::str::traits::impl$10::get(core::ops::range::RangeFrom&lt;usize&gt;, ref$ (65 samples, 0.79%)</title><rect x="32.4235%" y="469" width="0.7920%" height="15" fill="rgb(208,190,38)" fg:x="2661" fg:w="65"/><text x="32.6735%" y="479.50"></text></g><g><title>1brc.exe`core::str::impl$0::is_char_boundary(ref$ (65 samples, 0.79%)</title><rect x="32.4235%" y="453" width="0.7920%" height="15" fill="rgb(235,213,38)" fg:x="2661" fg:w="65"/><text x="32.6735%" y="463.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get(ref$&lt;slice2$ (28 samples, 0.34%)</title><rect x="32.8744%" y="437" width="0.3412%" height="15" fill="rgb(237,122,38)" fg:x="2698" fg:w="28"/><text x="33.1244%" y="447.50"></text></g><g><title>1brc.exe`core::slice::index::impl$2::get(unsigned long long, ref$&lt;slice2$ (28 samples, 0.34%)</title><rect x="32.8744%" y="421" width="0.3412%" height="15" fill="rgb(244,218,35)" fg:x="2698" fg:w="28"/><text x="33.1244%" y="431.50"></text></g><g><title>1brc.exe`core::sync::atomic::AtomicU64::fetch_add (219 samples, 2.67%)</title><rect x="33.2155%" y="501" width="2.6685%" height="15" fill="rgb(240,68,47)" fg:x="2726" fg:w="219"/><text x="33.4655%" y="511.50">1b..</text></g><g><title>1brc.exe`core::sync::atomic::atomic_add (219 samples, 2.67%)</title><rect x="33.2155%" y="485" width="2.6685%" height="15" fill="rgb(210,16,53)" fg:x="2726" fg:w="219"/><text x="33.4655%" y="495.50">1b..</text></g><g><title>1brc.exe`core::sync::atomic::AtomicU64::store (29 samples, 0.35%)</title><rect x="35.8840%" y="501" width="0.3534%" height="15" fill="rgb(235,124,12)" fg:x="2945" fg:w="29"/><text x="36.1340%" y="511.50"></text></g><g><title>1brc.exe`core::sync::atomic::atomic_store (29 samples, 0.35%)</title><rect x="35.8840%" y="485" width="0.3534%" height="15" fill="rgb(224,169,11)" fg:x="2945" fg:w="29"/><text x="36.1340%" y="495.50"></text></g><g><title>1brc.exe`core::num::dec2flt::float::impl$1::from_u64 (102 samples, 1.24%)</title><rect x="45.9364%" y="437" width="1.2428%" height="15" fill="rgb(250,166,2)" fg:x="3770" fg:w="102"/><text x="46.1864%" y="447.50"></text></g><g><title>1brc.exe`core::num::dec2flt::number::Number::try_fast_path (328 samples, 4.00%)</title><rect x="43.9747%" y="453" width="3.9966%" height="15" fill="rgb(242,216,29)" fg:x="3609" fg:w="328"/><text x="44.2247%" y="463.50">1brc..</text></g><g><title>1brc.exe`core::num::dec2flt::number::Number::is_fast_path (65 samples, 0.79%)</title><rect x="47.1792%" y="437" width="0.7920%" height="15" fill="rgb(230,116,27)" fg:x="3872" fg:w="65"/><text x="47.4292%" y="447.50"></text></g><g><title>1brc.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (44 samples, 0.54%)</title><rect x="56.3543%" y="389" width="0.5361%" height="15" fill="rgb(228,99,48)" fg:x="4625" fg:w="44"/><text x="56.6043%" y="399.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_mul (24 samples, 0.29%)</title><rect x="56.5980%" y="373" width="0.2924%" height="15" fill="rgb(253,11,6)" fg:x="4645" fg:w="24"/><text x="56.8480%" y="383.50"></text></g><g><title>1brc.exe`core::num::dec2flt::parse::try_parse_digits (323 samples, 3.94%)</title><rect x="53.4787%" y="421" width="3.9357%" height="15" fill="rgb(247,143,39)" fg:x="4389" fg:w="323"/><text x="53.7287%" y="431.50">1brc..</text></g><g><title>1brc.exe`core::num::dec2flt::common::impl$0::parse_digits (307 samples, 3.74%)</title><rect x="53.6737%" y="405" width="3.7407%" height="15" fill="rgb(236,97,10)" fg:x="4405" fg:w="307"/><text x="53.9237%" y="415.50">1brc..</text></g><g><title>1brc.exe`core::num::impl$6::wrapping_sub (43 samples, 0.52%)</title><rect x="56.8905%" y="389" width="0.5239%" height="15" fill="rgb(233,208,19)" fg:x="4669" fg:w="43"/><text x="57.1405%" y="399.50"></text></g><g><title>1brc.exe`core::num::dec2flt::parse::parse_number (829 samples, 10.10%)</title><rect x="47.9712%" y="453" width="10.1011%" height="15" fill="rgb(216,164,2)" fg:x="3937" fg:w="829"/><text x="48.2212%" y="463.50">1brc.exe`core::..</text></g><g><title>1brc.exe`core::num::dec2flt::parse::parse_partial_number (499 samples, 6.08%)</title><rect x="51.9922%" y="437" width="6.0802%" height="15" fill="rgb(220,129,5)" fg:x="4267" fg:w="499"/><text x="52.2422%" y="447.50">1brc.exe..</text></g><g><title>1brc.exe`core::slice::impl$0::split_first (54 samples, 0.66%)</title><rect x="57.4144%" y="421" width="0.6580%" height="15" fill="rgb(242,17,10)" fg:x="4712" fg:w="54"/><text x="57.6644%" y="431.50"></text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;, ref$ (1,793 samples, 21.85%)</title><rect x="36.2374%" y="501" width="21.8472%" height="15" fill="rgb(242,107,0)" fg:x="2974" fg:w="1793"/><text x="36.4874%" y="511.50">1brc.exe`enum2$&lt;core::result::Resul..</text></g><g><title>1brc.exe`core::num::dec2flt::impl$3::from_str (1,785 samples, 21.75%)</title><rect x="36.3348%" y="485" width="21.7497%" height="15" fill="rgb(251,28,31)" fg:x="2982" fg:w="1785"/><text x="36.5848%" y="495.50">1brc.exe`core::num::dec2flt::impl$..</text></g><g><title>1brc.exe`core::num::dec2flt::dec2flt (1,669 samples, 20.34%)</title><rect x="37.7483%" y="469" width="20.3363%" height="15" fill="rgb(233,223,10)" fg:x="3098" fg:w="1669"/><text x="37.9983%" y="479.50">1brc.exe`core::num::dec2flt::dec..</text></g><g><title>1brc.exe`core::slice::impl$0::first (1 samples, 0.01%)</title><rect x="58.0724%" y="453" width="0.0122%" height="15" fill="rgb(215,21,27)" fg:x="4766" fg:w="1"/><text x="58.3224%" y="463.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (1 samples, 0.01%)</title><rect x="58.5476%" y="421" width="0.0122%" height="15" fill="rgb(232,23,21)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="431.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (1 samples, 0.01%)</title><rect x="58.5476%" y="405" width="0.0122%" height="15" fill="rgb(244,5,23)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="415.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash (1 samples, 0.01%)</title><rect x="58.5476%" y="389" width="0.0122%" height="15" fill="rgb(226,81,46)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="399.50"></text></g><g><title>1brc.exe`alloc::string::impl$23::hash (1 samples, 0.01%)</title><rect x="58.5476%" y="373" width="0.0122%" height="15" fill="rgb(247,70,30)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="383.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$2::hash(ref$ (1 samples, 0.01%)</title><rect x="58.5476%" y="357" width="0.0122%" height="15" fill="rgb(212,68,19)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="367.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (1 samples, 0.01%)</title><rect x="58.5476%" y="341" width="0.0122%" height="15" fill="rgb(240,187,13)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="351.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (1 samples, 0.01%)</title><rect x="58.5476%" y="325" width="0.0122%" height="15" fill="rgb(223,113,26)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="335.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (1 samples, 0.01%)</title><rect x="58.5476%" y="309" width="0.0122%" height="15" fill="rgb(206,192,2)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="319.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (1 samples, 0.01%)</title><rect x="58.5476%" y="293" width="0.0122%" height="15" fill="rgb(241,108,4)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="303.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="58.5476%" y="277" width="0.0122%" height="15" fill="rgb(247,173,49)" fg:x="4805" fg:w="1"/><text x="58.7976%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt; (2 samples, 0.02%)</title><rect x="58.5476%" y="453" width="0.0244%" height="15" fill="rgb(224,114,35)" fg:x="4805" fg:w="2"/><text x="58.7976%" y="463.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,1brc::StationStats&gt;, hashbrown::map::make_hasher::closure_env$0 (2 samples, 0.02%)</title><rect x="58.5476%" y="437" width="0.0244%" height="15" fill="rgb(245,159,27)" fg:x="4805" fg:w="2"/><text x="58.7976%" y="447.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (1 samples, 0.01%)</title><rect x="58.5598%" y="421" width="0.0122%" height="15" fill="rgb(245,172,44)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="431.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (1 samples, 0.01%)</title><rect x="58.5598%" y="405" width="0.0122%" height="15" fill="rgb(236,23,11)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="415.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (1 samples, 0.01%)</title><rect x="58.5598%" y="389" width="0.0122%" height="15" fill="rgb(205,117,38)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="399.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.01%)</title><rect x="58.5598%" y="373" width="0.0122%" height="15" fill="rgb(237,72,25)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="383.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.01%)</title><rect x="58.5598%" y="357" width="0.0122%" height="15" fill="rgb(244,70,9)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.01%)</title><rect x="58.5598%" y="341" width="0.0122%" height="15" fill="rgb(217,125,39)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="351.50"></text></g><g><title>1brc.exe`hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="58.5598%" y="325" width="0.0122%" height="15" fill="rgb(235,36,10)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="335.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::allocate (1 samples, 0.01%)</title><rect x="58.5598%" y="309" width="0.0122%" height="15" fill="rgb(251,123,47)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="319.50"></text></g><g><title>1brc.exe`alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="58.5598%" y="293" width="0.0122%" height="15" fill="rgb(221,13,13)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="303.50"></text></g><g><title>1brc.exe`alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="58.5598%" y="277" width="0.0122%" height="15" fill="rgb(238,131,9)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="287.50"></text></g><g><title>`0x7FFDA1A7B44D (1 samples, 0.01%)</title><rect x="58.5598%" y="261" width="0.0122%" height="15" fill="rgb(211,50,8)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="271.50"></text></g><g><title>`0x7FFDA1A7DBFA (1 samples, 0.01%)</title><rect x="58.5598%" y="245" width="0.0122%" height="15" fill="rgb(245,182,24)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="255.50"></text></g><g><title>`0x7FFDA1A5E37B (1 samples, 0.01%)</title><rect x="58.5598%" y="229" width="0.0122%" height="15" fill="rgb(242,14,37)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="239.50"></text></g><g><title>`0x7FFDA1A5E7DE (1 samples, 0.01%)</title><rect x="58.5598%" y="213" width="0.0122%" height="15" fill="rgb(246,228,12)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="223.50"></text></g><g><title>`0x7FFDA1A5E92D (1 samples, 0.01%)</title><rect x="58.5598%" y="197" width="0.0122%" height="15" fill="rgb(213,55,15)" fg:x="4806" fg:w="1"/><text x="58.8098%" y="207.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (46 samples, 0.56%)</title><rect x="64.1891%" y="293" width="0.5605%" height="15" fill="rgb(209,9,3)" fg:x="5268" fg:w="46"/><text x="64.4391%" y="303.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (82 samples, 1.00%)</title><rect x="64.0673%" y="309" width="0.9991%" height="15" fill="rgb(230,59,30)" fg:x="5258" fg:w="82"/><text x="64.3173%" y="319.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (26 samples, 0.32%)</title><rect x="64.7496%" y="293" width="0.3168%" height="15" fill="rgb(209,121,21)" fg:x="5314" fg:w="26"/><text x="64.9996%" y="303.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (105 samples, 1.28%)</title><rect x="65.0664%" y="309" width="1.2794%" height="15" fill="rgb(220,109,13)" fg:x="5340" fg:w="105"/><text x="65.3164%" y="319.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (38 samples, 0.46%)</title><rect x="65.8828%" y="293" width="0.4630%" height="15" fill="rgb(232,18,1)" fg:x="5407" fg:w="38"/><text x="66.1328%" y="303.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$ (435 samples, 5.30%)</title><rect x="61.0576%" y="421" width="5.3004%" height="15" fill="rgb(215,41,42)" fg:x="5011" fg:w="435"/><text x="61.3076%" y="431.50">1brc.e..</text></g><g><title>1brc.exe`core::hash::impls::impl$2::hash(ref$ (435 samples, 5.30%)</title><rect x="61.0576%" y="405" width="5.3004%" height="15" fill="rgb(224,123,36)" fg:x="5011" fg:w="435"/><text x="61.3076%" y="415.50">1brc.e..</text></g><g><title>1brc.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (435 samples, 5.30%)</title><rect x="61.0576%" y="389" width="5.3004%" height="15" fill="rgb(240,125,3)" fg:x="5011" fg:w="435"/><text x="61.3076%" y="399.50">1brc.e..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (435 samples, 5.30%)</title><rect x="61.0576%" y="373" width="5.3004%" height="15" fill="rgb(205,98,50)" fg:x="5011" fg:w="435"/><text x="61.3076%" y="383.50">1brc.e..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (435 samples, 5.30%)</title><rect x="61.0576%" y="357" width="5.3004%" height="15" fill="rgb(205,185,37)" fg:x="5011" fg:w="435"/><text x="61.3076%" y="367.50">1brc.e..</text></g><g><title>1brc.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (435 samples, 5.30%)</title><rect x="61.0576%" y="341" width="5.3004%" height="15" fill="rgb(238,207,15)" fg:x="5011" fg:w="435"/><text x="61.3076%" y="351.50">1brc.e..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (413 samples, 5.03%)</title><rect x="61.3257%" y="325" width="5.0323%" height="15" fill="rgb(213,199,42)" fg:x="5033" fg:w="413"/><text x="61.5757%" y="335.50">1brc.e..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="66.3458%" y="309" width="0.0122%" height="15" fill="rgb(235,201,11)" fg:x="5445" fg:w="1"/><text x="66.5958%" y="319.50"></text></g><g><title>1brc.exe`std::hash::random::impl$1::build_hasher (67 samples, 0.82%)</title><rect x="66.3580%" y="421" width="0.8164%" height="15" fill="rgb(207,46,11)" fg:x="5446" fg:w="67"/><text x="66.6080%" y="431.50"></text></g><g><title>1brc.exe`core::hash::sip::SipHasher13::new_with_keys (32 samples, 0.39%)</title><rect x="66.7845%" y="405" width="0.3899%" height="15" fill="rgb(241,35,35)" fg:x="5481" fg:w="32"/><text x="67.0345%" y="415.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (32 samples, 0.39%)</title><rect x="66.7845%" y="389" width="0.3899%" height="15" fill="rgb(243,32,47)" fg:x="5481" fg:w="32"/><text x="67.0345%" y="399.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (32 samples, 0.39%)</title><rect x="66.7845%" y="373" width="0.3899%" height="15" fill="rgb(247,202,23)" fg:x="5481" fg:w="32"/><text x="67.0345%" y="383.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (8 samples, 0.10%)</title><rect x="72.2919%" y="341" width="0.0975%" height="15" fill="rgb(219,102,11)" fg:x="5933" fg:w="8"/><text x="72.5419%" y="351.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (24 samples, 0.29%)</title><rect x="72.2188%" y="357" width="0.2924%" height="15" fill="rgb(243,110,44)" fg:x="5927" fg:w="24"/><text x="72.4688%" y="367.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (10 samples, 0.12%)</title><rect x="72.3894%" y="341" width="0.1218%" height="15" fill="rgb(222,74,54)" fg:x="5941" fg:w="10"/><text x="72.6394%" y="351.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (322 samples, 3.92%)</title><rect x="69.9037%" y="373" width="3.9235%" height="15" fill="rgb(216,99,12)" fg:x="5737" fg:w="322"/><text x="70.1537%" y="383.50">1brc..</text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (108 samples, 1.32%)</title><rect x="72.5113%" y="357" width="1.3159%" height="15" fill="rgb(226,22,26)" fg:x="5951" fg:w="108"/><text x="72.7613%" y="367.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (58 samples, 0.71%)</title><rect x="74.2293%" y="357" width="0.7067%" height="15" fill="rgb(217,163,10)" fg:x="6092" fg:w="58"/><text x="74.4793%" y="367.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (134 samples, 1.63%)</title><rect x="73.8272%" y="373" width="1.6328%" height="15" fill="rgb(213,25,53)" fg:x="6059" fg:w="134"/><text x="74.0772%" y="383.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (43 samples, 0.52%)</title><rect x="74.9360%" y="357" width="0.5239%" height="15" fill="rgb(252,105,26)" fg:x="6150" fg:w="43"/><text x="75.1860%" y="367.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (250 samples, 3.05%)</title><rect x="76.1179%" y="357" width="3.0462%" height="15" fill="rgb(220,39,43)" fg:x="6247" fg:w="250"/><text x="76.3679%" y="367.50">1br..</text></g><g><title>1brc.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$ (1,801 samples, 21.94%)</title><rect x="58.5720%" y="453" width="21.9447%" height="15" fill="rgb(229,68,48)" fg:x="4807" fg:w="1801"/><text x="58.8220%" y="463.50">1brc.exe`hashbrown::map::make_hash(..</text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;str$&gt; &gt;(std::hash::random::RandomState*, ref$ (1,615 samples, 19.68%)</title><rect x="60.8383%" y="437" width="19.6783%" height="15" fill="rgb(252,8,32)" fg:x="4993" fg:w="1615"/><text x="61.0883%" y="447.50">1brc.exe`core::hash::BuildHashe..</text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (1,095 samples, 13.34%)</title><rect x="67.1744%" y="421" width="13.3423%" height="15" fill="rgb(223,20,43)" fg:x="5513" fg:w="1095"/><text x="67.4244%" y="431.50">1brc.exe`std::hash::..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (1,095 samples, 13.34%)</title><rect x="67.1744%" y="405" width="13.3423%" height="15" fill="rgb(229,81,49)" fg:x="5513" fg:w="1095"/><text x="67.4244%" y="415.50">1brc.exe`core::hash:..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1,095 samples, 13.34%)</title><rect x="67.1744%" y="389" width="13.3423%" height="15" fill="rgb(236,28,36)" fg:x="5513" fg:w="1095"/><text x="67.4244%" y="399.50">1brc.exe`core::hash:..</text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (415 samples, 5.06%)</title><rect x="75.4600%" y="373" width="5.0567%" height="15" fill="rgb(249,185,26)" fg:x="6193" fg:w="415"/><text x="75.7100%" y="383.50">1brc.e..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (111 samples, 1.35%)</title><rect x="79.1641%" y="357" width="1.3525%" height="15" fill="rgb(249,174,33)" fg:x="6497" fg:w="111"/><text x="79.4141%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::bucket (26 samples, 0.32%)</title><rect x="80.5166%" y="421" width="0.3168%" height="15" fill="rgb(233,201,37)" fg:x="6608" fg:w="26"/><text x="80.7666%" y="431.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$ (26 samples, 0.32%)</title><rect x="80.5166%" y="405" width="0.3168%" height="15" fill="rgb(221,78,26)" fg:x="6608" fg:w="26"/><text x="80.7666%" y="415.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$ (26 samples, 0.32%)</title><rect x="80.5166%" y="389" width="0.3168%" height="15" fill="rgb(250,127,30)" fg:x="6608" fg:w="26"/><text x="80.7666%" y="399.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$ (26 samples, 0.32%)</title><rect x="80.5166%" y="373" width="0.3168%" height="15" fill="rgb(230,49,44)" fg:x="6608" fg:w="26"/><text x="80.7666%" y="383.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::impl$3::next (112 samples, 1.36%)</title><rect x="81.5036%" y="405" width="1.3647%" height="15" fill="rgb(229,67,23)" fg:x="6689" fg:w="112"/><text x="81.7536%" y="415.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (112 samples, 1.36%)</title><rect x="81.5036%" y="389" width="1.3647%" height="15" fill="rgb(249,83,47)" fg:x="6689" fg:w="112"/><text x="81.7536%" y="399.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros(core::num::nonzero::NonZero (1 samples, 0.01%)</title><rect x="82.8561%" y="373" width="0.0122%" height="15" fill="rgb(215,43,3)" fg:x="6800" fg:w="1"/><text x="83.1061%" y="383.50"></text></g><g><title>1brc.exe`core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros(core::num::nonzero::NonZero (1 samples, 0.01%)</title><rect x="82.8561%" y="357" width="0.0122%" height="15" fill="rgb(238,154,13)" fg:x="6800" fg:w="1"/><text x="83.1061%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (147 samples, 1.79%)</title><rect x="82.8683%" y="405" width="1.7912%" height="15" fill="rgb(219,56,2)" fg:x="6801" fg:w="147"/><text x="83.1183%" y="415.50">1..</text></g><g><title>`0x7FFD7EDB1100 (3 samples, 0.04%)</title><rect x="89.6064%" y="277" width="0.0366%" height="15" fill="rgb(233,0,4)" fg:x="7354" fg:w="3"/><text x="89.8564%" y="287.50"></text></g><g><title>`0x7FFD7EDB1107 (29 samples, 0.35%)</title><rect x="89.6430%" y="277" width="0.3534%" height="15" fill="rgb(235,30,7)" fg:x="7357" fg:w="29"/><text x="89.8930%" y="287.50"></text></g><g><title>`0x7FFD7EDB1112 (12 samples, 0.15%)</title><rect x="89.9963%" y="277" width="0.1462%" height="15" fill="rgb(250,79,13)" fg:x="7386" fg:w="12"/><text x="90.2463%" y="287.50"></text></g><g><title>`0x7FFD7EDB1115 (110 samples, 1.34%)</title><rect x="90.1426%" y="277" width="1.3403%" height="15" fill="rgb(211,146,34)" fg:x="7398" fg:w="110"/><text x="90.3926%" y="287.50"></text></g><g><title>`0x7FFD7EDB111D (1 samples, 0.01%)</title><rect x="91.4829%" y="277" width="0.0122%" height="15" fill="rgb(228,22,38)" fg:x="7508" fg:w="1"/><text x="91.7329%" y="287.50"></text></g><g><title>`0x7FFD7EDB1120 (1 samples, 0.01%)</title><rect x="91.4951%" y="277" width="0.0122%" height="15" fill="rgb(235,168,5)" fg:x="7509" fg:w="1"/><text x="91.7451%" y="287.50"></text></g><g><title>`0x7FFD7EDB1125 (15 samples, 0.18%)</title><rect x="91.5072%" y="277" width="0.1828%" height="15" fill="rgb(221,155,16)" fg:x="7510" fg:w="15"/><text x="91.7572%" y="287.50"></text></g><g><title>`0x7FFD7EDB1129 (1 samples, 0.01%)</title><rect x="91.6900%" y="277" width="0.0122%" height="15" fill="rgb(215,215,53)" fg:x="7525" fg:w="1"/><text x="91.9400%" y="287.50"></text></g><g><title>`0x7FFD7EDB112E (6 samples, 0.07%)</title><rect x="91.7022%" y="277" width="0.0731%" height="15" fill="rgb(223,4,10)" fg:x="7526" fg:w="6"/><text x="91.9522%" y="287.50"></text></g><g><title>`0x7FFD7EDB1130 (9 samples, 0.11%)</title><rect x="91.7753%" y="277" width="0.1097%" height="15" fill="rgb(234,103,6)" fg:x="7532" fg:w="9"/><text x="92.0253%" y="287.50"></text></g><g><title>`0x7FFD7EDB1132 (26 samples, 0.32%)</title><rect x="91.8850%" y="277" width="0.3168%" height="15" fill="rgb(227,97,0)" fg:x="7541" fg:w="26"/><text x="92.1350%" y="287.50"></text></g><g><title>`0x7FFD7EDB1135 (169 samples, 2.06%)</title><rect x="92.2018%" y="277" width="2.0592%" height="15" fill="rgb(234,150,53)" fg:x="7567" fg:w="169"/><text x="92.4518%" y="287.50">`..</text></g><g><title>`0x7FFD7EDB113A (1 samples, 0.01%)</title><rect x="94.2610%" y="277" width="0.0122%" height="15" fill="rgb(228,201,54)" fg:x="7736" fg:w="1"/><text x="94.5110%" y="287.50"></text></g><g><title>`0x7FFD7EDB113D (1 samples, 0.01%)</title><rect x="94.2732%" y="277" width="0.0122%" height="15" fill="rgb(222,22,37)" fg:x="7737" fg:w="1"/><text x="94.5232%" y="287.50"></text></g><g><title>`0x7FFD7EDB113F (2 samples, 0.02%)</title><rect x="94.2854%" y="277" width="0.0244%" height="15" fill="rgb(237,53,32)" fg:x="7738" fg:w="2"/><text x="94.5354%" y="287.50"></text></g><g><title>`0x7FFD7EDB1142 (5 samples, 0.06%)</title><rect x="94.3097%" y="277" width="0.0609%" height="15" fill="rgb(233,25,53)" fg:x="7740" fg:w="5"/><text x="94.5597%" y="287.50"></text></g><g><title>`0x7FFD7EDB114E (2 samples, 0.02%)</title><rect x="94.3707%" y="277" width="0.0244%" height="15" fill="rgb(210,40,34)" fg:x="7745" fg:w="2"/><text x="94.6207%" y="287.50"></text></g><g><title>`0x7FFD7EDB1187 (1 samples, 0.01%)</title><rect x="94.3950%" y="277" width="0.0122%" height="15" fill="rgb(241,220,44)" fg:x="7747" fg:w="1"/><text x="94.6450%" y="287.50"></text></g><g><title>`0x7FFD7EDB118A (1 samples, 0.01%)</title><rect x="94.4072%" y="277" width="0.0122%" height="15" fill="rgb(235,28,35)" fg:x="7748" fg:w="1"/><text x="94.6572%" y="287.50"></text></g><g><title>`0x7FFD7EDB1190 (2 samples, 0.02%)</title><rect x="94.4194%" y="277" width="0.0244%" height="15" fill="rgb(210,56,17)" fg:x="7749" fg:w="2"/><text x="94.6694%" y="287.50"></text></g><g><title>`0x7FFD7EDB1193 (3 samples, 0.04%)</title><rect x="94.4438%" y="277" width="0.0366%" height="15" fill="rgb(224,130,29)" fg:x="7751" fg:w="3"/><text x="94.6938%" y="287.50"></text></g><g><title>`0x7FFD7EDB1197 (9 samples, 0.11%)</title><rect x="94.4803%" y="277" width="0.1097%" height="15" fill="rgb(235,212,8)" fg:x="7754" fg:w="9"/><text x="94.7303%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;str$,alloc::string::String,1brc::StationStats&gt;*, tuple$ (816 samples, 9.94%)</title><rect x="84.6594%" y="389" width="9.9427%" height="15" fill="rgb(223,33,50)" fg:x="6948" fg:w="816"/><text x="84.9094%" y="399.50">1brc.exe`hashb..</text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$ (816 samples, 9.94%)</title><rect x="84.6594%" y="373" width="9.9427%" height="15" fill="rgb(219,149,13)" fg:x="6948" fg:w="816"/><text x="84.9094%" y="383.50">1brc.exe`hashb..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;str$&gt;*, ref$ (778 samples, 9.48%)</title><rect x="85.1225%" y="357" width="9.4797%" height="15" fill="rgb(250,156,29)" fg:x="6986" fg:w="778"/><text x="85.3725%" y="367.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (778 samples, 9.48%)</title><rect x="85.1225%" y="341" width="9.4797%" height="15" fill="rgb(216,193,19)" fg:x="6986" fg:w="778"/><text x="85.3725%" y="351.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (778 samples, 9.48%)</title><rect x="85.1225%" y="325" width="9.4797%" height="15" fill="rgb(216,135,14)" fg:x="6986" fg:w="778"/><text x="85.3725%" y="335.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (778 samples, 9.48%)</title><rect x="85.1225%" y="309" width="9.4797%" height="15" fill="rgb(241,47,5)" fg:x="6986" fg:w="778"/><text x="85.3725%" y="319.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (778 samples, 9.48%)</title><rect x="85.1225%" y="293" width="9.4797%" height="15" fill="rgb(233,42,35)" fg:x="6986" fg:w="778"/><text x="85.3725%" y="303.50">1brc.exe`core:..</text></g><g><title>`0x7FFD7EDB11A2 (1 samples, 0.01%)</title><rect x="94.5900%" y="277" width="0.0122%" height="15" fill="rgb(231,13,6)" fg:x="7763" fg:w="1"/><text x="94.8400%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt; &gt;::as_ptr (14 samples, 0.17%)</title><rect x="94.6022%" y="373" width="0.1706%" height="15" fill="rgb(207,181,40)" fg:x="7764" fg:w="14"/><text x="94.8522%" y="383.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$ (14 samples, 0.17%)</title><rect x="94.6022%" y="357" width="0.1706%" height="15" fill="rgb(254,173,49)" fg:x="7764" fg:w="14"/><text x="94.8522%" y="367.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$ (14 samples, 0.17%)</title><rect x="94.6022%" y="341" width="0.1706%" height="15" fill="rgb(221,1,38)" fg:x="7764" fg:w="14"/><text x="94.8522%" y="351.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0 (844 samples, 10.28%)</title><rect x="84.6594%" y="405" width="10.2839%" height="15" fill="rgb(206,124,46)" fg:x="6948" fg:w="844"/><text x="84.9094%" y="415.50">1brc.exe`hashbr..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::bucket (28 samples, 0.34%)</title><rect x="94.6022%" y="389" width="0.3412%" height="15" fill="rgb(249,21,11)" fg:x="7764" fg:w="28"/><text x="94.8522%" y="399.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$ (14 samples, 0.17%)</title><rect x="94.7728%" y="373" width="0.1706%" height="15" fill="rgb(222,201,40)" fg:x="7778" fg:w="14"/><text x="95.0228%" y="383.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$ (14 samples, 0.17%)</title><rect x="94.7728%" y="357" width="0.1706%" height="15" fill="rgb(235,61,29)" fg:x="7778" fg:w="14"/><text x="95.0228%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (48 samples, 0.58%)</title><rect x="94.9433%" y="405" width="0.5849%" height="15" fill="rgb(219,207,3)" fg:x="7792" fg:w="48"/><text x="95.1933%" y="415.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (48 samples, 0.58%)</title><rect x="94.9433%" y="389" width="0.5849%" height="15" fill="rgb(222,56,46)" fg:x="7792" fg:w="48"/><text x="95.1933%" y="399.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;::get(ref$ (3,085 samples, 37.59%)</title><rect x="58.0846%" y="501" width="37.5899%" height="15" fill="rgb(239,76,54)" fg:x="4767" fg:w="3085"/><text x="58.3346%" y="511.50">1brc.exe`std::collections::hash::map::HashMap&lt;alloc::string::..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get(ref$ (3,085 samples, 37.59%)</title><rect x="58.0846%" y="485" width="37.5899%" height="15" fill="rgb(231,124,27)" fg:x="4767" fg:w="3085"/><text x="58.3346%" y="495.50">1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(ref$ (3,085 samples, 37.59%)</title><rect x="58.0846%" y="469" width="37.5899%" height="15" fill="rgb(249,195,6)" fg:x="4767" fg:w="3085"/><text x="58.3346%" y="479.50">1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (1,244 samples, 15.16%)</title><rect x="80.5166%" y="453" width="15.1578%" height="15" fill="rgb(237,174,47)" fg:x="6608" fg:w="1244"/><text x="80.7666%" y="463.50">1brc.exe`hashbrown::raw..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (1,244 samples, 15.16%)</title><rect x="80.5166%" y="437" width="15.1578%" height="15" fill="rgb(206,201,31)" fg:x="6608" fg:w="1244"/><text x="80.7666%" y="447.50">1brc.exe`hashbrown::raw..</text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1,218 samples, 14.84%)</title><rect x="80.8334%" y="421" width="14.8410%" height="15" fill="rgb(231,57,52)" fg:x="6634" fg:w="1218"/><text x="81.0834%" y="431.50">1brc.exe`hashbrown::raw..</text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_empty (12 samples, 0.15%)</title><rect x="95.5282%" y="405" width="0.1462%" height="15" fill="rgb(248,177,22)" fg:x="7840" fg:w="12"/><text x="95.7782%" y="415.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (12 samples, 0.15%)</title><rect x="95.5282%" y="389" width="0.1462%" height="15" fill="rgb(215,211,37)" fg:x="7840" fg:w="12"/><text x="95.7782%" y="399.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.15%)</title><rect x="95.5282%" y="373" width="0.1462%" height="15" fill="rgb(241,128,51)" fg:x="7840" fg:w="12"/><text x="95.7782%" y="383.50"></text></g><g><title>1brc.exe`core::num::impl$11::wrapping_sub (1 samples, 0.01%)</title><rect x="97.7458%" y="405" width="0.0122%" height="15" fill="rgb(227,165,31)" fg:x="8022" fg:w="1"/><text x="97.9958%" y="415.50"></text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;ref$&lt;str$&gt;,core::str::error::Utf8Error&gt; &gt;::is_err (181 samples, 2.21%)</title><rect x="95.6744%" y="469" width="2.2054%" height="15" fill="rgb(228,167,24)" fg:x="7852" fg:w="181"/><text x="95.9244%" y="479.50">1..</text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;ref$&lt;str$&gt;,core::str::error::Utf8Error&gt; &gt;::is_ok (181 samples, 2.21%)</title><rect x="95.6744%" y="453" width="2.2054%" height="15" fill="rgb(228,143,12)" fg:x="7852" fg:w="181"/><text x="95.9244%" y="463.50">1..</text></g><g><title>1brc.exe`core::str::converts::from_utf8 (181 samples, 2.21%)</title><rect x="95.6744%" y="437" width="2.2054%" height="15" fill="rgb(249,149,8)" fg:x="7852" fg:w="181"/><text x="95.9244%" y="447.50">1..</text></g><g><title>1brc.exe`core::str::validations::run_utf8_validation (181 samples, 2.21%)</title><rect x="95.6744%" y="421" width="2.2054%" height="15" fill="rgb(243,35,44)" fg:x="7852" fg:w="181"/><text x="95.9244%" y="431.50">1..</text></g><g><title>1brc.exe`core::str::validations::utf8_char_width (10 samples, 0.12%)</title><rect x="97.7580%" y="405" width="0.1218%" height="15" fill="rgb(246,89,9)" fg:x="8023" fg:w="10"/><text x="98.0080%" y="415.50"></text></g><g><title>1brc.exe`1brc::input(std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;, std::io::buffered::bufreader::BufReader (8,134 samples, 99.11%)</title><rect x="0.0366%" y="517" width="99.1105%" height="15" fill="rgb(233,213,13)" fg:x="3" fg:w="8134"/><text x="0.2866%" y="527.50">1brc.exe`1brc::input(std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;, std::io::buffered::bufreader::Buf..</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read_to_string&lt;std::fs::File&gt;(std::io::buffered::bufreader::BufReader (285 samples, 3.47%)</title><rect x="95.6744%" y="501" width="3.4726%" height="15" fill="rgb(233,141,41)" fg:x="7852" fg:w="285"/><text x="95.9244%" y="511.50">1br..</text></g><g><title>1brc.exe`std::io::append_to_string&lt;std::io::buffered::bufreader::impl$4::read_to_string::closure_env$0&lt;std::fs::File&gt; &gt;(alloc::string::String*, std::io::buffered::bufreader::impl$4::read_to_string::closure_env$0 (285 samples, 3.47%)</title><rect x="95.6744%" y="485" width="3.4726%" height="15" fill="rgb(239,167,4)" fg:x="7852" fg:w="285"/><text x="95.9244%" y="495.50">1br..</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read_to_end&lt;std::fs::File&gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, alloc::vec::Vec (104 samples, 1.27%)</title><rect x="97.8799%" y="469" width="1.2672%" height="15" fill="rgb(209,217,16)" fg:x="8033" fg:w="104"/><text x="98.1299%" y="479.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (104 samples, 1.27%)</title><rect x="97.8799%" y="453" width="1.2672%" height="15" fill="rgb(219,88,35)" fg:x="8033" fg:w="104"/><text x="98.1299%" y="463.50"></text></g><g><title>1brc.exe`std::fs::impl$8::read_to_end (104 samples, 1.27%)</title><rect x="97.8799%" y="437" width="1.2672%" height="15" fill="rgb(220,193,23)" fg:x="8033" fg:w="104"/><text x="98.1299%" y="447.50"></text></g><g><title>1brc.exe`std::io::default_read_to_end&lt;ref$&lt;std::fs::File&gt; &gt; (104 samples, 1.27%)</title><rect x="97.8799%" y="421" width="1.2672%" height="15" fill="rgb(230,90,52)" fg:x="8033" fg:w="104"/><text x="98.1299%" y="431.50"></text></g><g><title>1brc.exe`std::fs::impl$5::read_buf (103 samples, 1.26%)</title><rect x="97.8920%" y="405" width="1.2550%" height="15" fill="rgb(252,106,19)" fg:x="8034" fg:w="103"/><text x="98.1420%" y="415.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::read_buf (103 samples, 1.26%)</title><rect x="97.8920%" y="389" width="1.2550%" height="15" fill="rgb(206,74,20)" fg:x="8034" fg:w="103"/><text x="98.1420%" y="399.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read_buf (103 samples, 1.26%)</title><rect x="97.8920%" y="373" width="1.2550%" height="15" fill="rgb(230,138,44)" fg:x="8034" fg:w="103"/><text x="98.1420%" y="383.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (103 samples, 1.26%)</title><rect x="97.8920%" y="357" width="1.2550%" height="15" fill="rgb(235,182,43)" fg:x="8034" fg:w="103"/><text x="98.1420%" y="367.50"></text></g><g><title>`0x7FFDA1AED624 (103 samples, 1.26%)</title><rect x="97.8920%" y="341" width="1.2550%" height="15" fill="rgb(242,16,51)" fg:x="8034" fg:w="103"/><text x="98.1420%" y="351.50"></text></g><g><title>1brc.exe`core::fmt::Formatter::write_formatted_parts (1 samples, 0.01%)</title><rect x="99.1471%" y="437" width="0.0122%" height="15" fill="rgb(248,9,4)" fg:x="8137" fg:w="1"/><text x="99.3971%" y="447.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (1 samples, 0.01%)</title><rect x="99.1471%" y="421" width="0.0122%" height="15" fill="rgb(210,31,22)" fg:x="8137" fg:w="1"/><text x="99.3971%" y="431.50"></text></g><g><title>1brc.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt; &gt;(std::io::Write::write_fmt::Adapter&lt;std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt; &gt;*, ref$ (1 samples, 0.01%)</title><rect x="99.1471%" y="405" width="0.0122%" height="15" fill="rgb(239,54,39)" fg:x="8137" fg:w="1"/><text x="99.3971%" y="415.50"></text></g><g><title>1brc.exe`core::num::flt2dec::strategy::dragon::format_exact (1 samples, 0.01%)</title><rect x="99.1593%" y="421" width="0.0122%" height="15" fill="rgb(230,99,41)" fg:x="8138" fg:w="1"/><text x="99.4093%" y="431.50"></text></g><g><title>1brc.exe`core::num::bignum::impl$8::clone (1 samples, 0.01%)</title><rect x="99.1593%" y="405" width="0.0122%" height="15" fill="rgb(253,106,12)" fg:x="8138" fg:w="1"/><text x="99.4093%" y="415.50"></text></g><g><title>1brc.exe`core::num::flt2dec::strategy::dragon::mul_pow10 (1 samples, 0.01%)</title><rect x="99.1593%" y="389" width="0.0122%" height="15" fill="rgb(213,46,41)" fg:x="8138" fg:w="1"/><text x="99.4093%" y="399.50"></text></g><g><title>1brc.exe`core::num::bignum::Big32x40::mul_small (1 samples, 0.01%)</title><rect x="99.1593%" y="373" width="0.0122%" height="15" fill="rgb(215,133,35)" fg:x="8138" fg:w="1"/><text x="99.4093%" y="383.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$189::next (1 samples, 0.01%)</title><rect x="99.1593%" y="357" width="0.0122%" height="15" fill="rgb(213,28,5)" fg:x="8138" fg:w="1"/><text x="99.4093%" y="367.50"></text></g><g><title>1brc.exe`std::io::Write::write_fmt(std::io::buffered::bufwriter::BufWriter (3 samples, 0.04%)</title><rect x="99.1471%" y="501" width="0.0366%" height="15" fill="rgb(215,77,49)" fg:x="8137" fg:w="3"/><text x="99.3971%" y="511.50"></text></g><g><title>1brc.exe`core::fmt::write (3 samples, 0.04%)</title><rect x="99.1471%" y="485" width="0.0366%" height="15" fill="rgb(248,100,22)" fg:x="8137" fg:w="3"/><text x="99.3971%" y="495.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (3 samples, 0.04%)</title><rect x="99.1471%" y="469" width="0.0366%" height="15" fill="rgb(208,67,9)" fg:x="8137" fg:w="3"/><text x="99.3971%" y="479.50"></text></g><g><title>1brc.exe`core::fmt::float::float_to_decimal_common_exact&lt;f64&gt; (3 samples, 0.04%)</title><rect x="99.1471%" y="453" width="0.0366%" height="15" fill="rgb(219,133,21)" fg:x="8137" fg:w="3"/><text x="99.3971%" y="463.50"></text></g><g><title>1brc.exe`core::num::flt2dec::to_exact_fixed_str (2 samples, 0.02%)</title><rect x="99.1593%" y="437" width="0.0244%" height="15" fill="rgb(246,46,29)" fg:x="8138" fg:w="2"/><text x="99.4093%" y="447.50"></text></g><g><title>1brc.exe`core::ops::function::FnMut::call_mut (1 samples, 0.01%)</title><rect x="99.1714%" y="421" width="0.0122%" height="15" fill="rgb(246,185,52)" fg:x="8139" fg:w="1"/><text x="99.4214%" y="431.50"></text></g><g><title>1brc.exe`core::num::flt2dec::strategy::grisu::format_exact (1 samples, 0.01%)</title><rect x="99.1714%" y="405" width="0.0122%" height="15" fill="rgb(252,136,11)" fg:x="8139" fg:w="1"/><text x="99.4214%" y="415.50"></text></g><g><title>1brc.exe`core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.01%)</title><rect x="99.1714%" y="389" width="0.0122%" height="15" fill="rgb(219,138,53)" fg:x="8139" fg:w="1"/><text x="99.4214%" y="399.50"></text></g><g><title>1brc.exe`core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (1 samples, 0.01%)</title><rect x="99.1714%" y="373" width="0.0122%" height="15" fill="rgb(211,51,23)" fg:x="8139" fg:w="1"/><text x="99.4214%" y="383.50"></text></g><g><title>1brc.exe`1brc::output_ref(std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;*, alloc::vec::Vec&lt;ref$&lt;alloc::string::String&gt;,alloc::alloc::Global&gt;, std::io::buffered::bufwriter::BufWriter (4 samples, 0.05%)</title><rect x="99.1471%" y="517" width="0.0487%" height="15" fill="rgb(247,221,28)" fg:x="8137" fg:w="4"/><text x="99.3971%" y="527.50"></text></g><g><title>1brc.exe`std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt;::write_cold&lt;std::fs::File&gt;(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="99.1836%" y="501" width="0.0122%" height="15" fill="rgb(251,222,45)" fg:x="8140" fg:w="1"/><text x="99.4336%" y="511.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 0.01%)</title><rect x="99.1836%" y="485" width="0.0122%" height="15" fill="rgb(217,162,53)" fg:x="8140" fg:w="1"/><text x="99.4336%" y="495.50"></text></g><g><title>1brc.exe`std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt;::flush_buf&lt;std::fs::File&gt; (1 samples, 0.01%)</title><rect x="99.1836%" y="469" width="0.0122%" height="15" fill="rgb(229,93,14)" fg:x="8140" fg:w="1"/><text x="99.4336%" y="479.50"></text></g><g><title>1brc.exe`std::fs::impl$9::write (1 samples, 0.01%)</title><rect x="99.1836%" y="453" width="0.0122%" height="15" fill="rgb(209,67,49)" fg:x="8140" fg:w="1"/><text x="99.4336%" y="463.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_write (1 samples, 0.01%)</title><rect x="99.1836%" y="437" width="0.0122%" height="15" fill="rgb(213,87,29)" fg:x="8140" fg:w="1"/><text x="99.4336%" y="447.50"></text></g><g><title>`0x7FFDA1AED664 (1 samples, 0.01%)</title><rect x="99.1836%" y="421" width="0.0122%" height="15" fill="rgb(205,151,52)" fg:x="8140" fg:w="1"/><text x="99.4336%" y="431.50"></text></g><g><title>1brc.exe`alloc::str::impl$4::to_owned(ref$ (1 samples, 0.01%)</title><rect x="99.1958%" y="517" width="0.0122%" height="15" fill="rgb(253,215,39)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="527.50"></text></g><g><title>1brc.exe`alloc::slice::impl$9::to_owned(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="99.1958%" y="501" width="0.0122%" height="15" fill="rgb(221,220,41)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="511.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="99.1958%" y="485" width="0.0122%" height="15" fill="rgb(218,133,21)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="495.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="99.1958%" y="469" width="0.0122%" height="15" fill="rgb(221,193,43)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="479.50"></text></g><g><title>1brc.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="99.1958%" y="453" width="0.0122%" height="15" fill="rgb(240,128,52)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="463.50"></text></g><g><title>1brc.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (1 samples, 0.01%)</title><rect x="99.1958%" y="437" width="0.0122%" height="15" fill="rgb(253,114,12)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="447.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="99.1958%" y="421" width="0.0122%" height="15" fill="rgb(215,223,47)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="431.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="99.1958%" y="405" width="0.0122%" height="15" fill="rgb(248,225,23)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="415.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (1 samples, 0.01%)</title><rect x="99.1958%" y="389" width="0.0122%" height="15" fill="rgb(250,108,0)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="399.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::allocate (1 samples, 0.01%)</title><rect x="99.1958%" y="373" width="0.0122%" height="15" fill="rgb(228,208,7)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="383.50"></text></g><g><title>1brc.exe`alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="99.1958%" y="357" width="0.0122%" height="15" fill="rgb(244,45,10)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="367.50"></text></g><g><title>1brc.exe`alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="99.1958%" y="341" width="0.0122%" height="15" fill="rgb(207,125,25)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="351.50"></text></g><g><title>1brc.exe`core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="99.1958%" y="325" width="0.0122%" height="15" fill="rgb(210,195,18)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="335.50"></text></g><g><title>1brc.exe`std::io::stdio::_print (1 samples, 0.01%)</title><rect x="99.1958%" y="309" width="0.0122%" height="15" fill="rgb(249,80,12)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="319.50"></text></g><g><title>1brc.exe`std::io::stdio::print_to (1 samples, 0.01%)</title><rect x="99.1958%" y="293" width="0.0122%" height="15" fill="rgb(221,65,9)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="303.50"></text></g><g><title>1brc.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.01%)</title><rect x="99.1958%" y="277" width="0.0122%" height="15" fill="rgb(235,49,36)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="287.50"></text></g><g><title>1brc.exe`std::io::Write::write_fmt (1 samples, 0.01%)</title><rect x="99.1958%" y="261" width="0.0122%" height="15" fill="rgb(225,32,20)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="271.50"></text></g><g><title>1brc.exe`core::fmt::write (1 samples, 0.01%)</title><rect x="99.1958%" y="245" width="0.0122%" height="15" fill="rgb(215,141,46)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="255.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (1 samples, 0.01%)</title><rect x="99.1958%" y="229" width="0.0122%" height="15" fill="rgb(250,160,47)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="239.50"></text></g><g><title>1brc.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.01%)</title><rect x="99.1958%" y="213" width="0.0122%" height="15" fill="rgb(216,222,40)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="223.50"></text></g><g><title>1brc.exe`std::io::stdio::impl$19::write_all (1 samples, 0.01%)</title><rect x="99.1958%" y="197" width="0.0122%" height="15" fill="rgb(234,217,39)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="207.50"></text></g><g><title>1brc.exe`std::sync::reentrant_lock::impl$10::deref (1 samples, 0.01%)</title><rect x="99.1958%" y="181" width="0.0122%" height="15" fill="rgb(207,178,40)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="191.50"></text></g><g><title>1brc.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.01%)</title><rect x="99.1958%" y="165" width="0.0122%" height="15" fill="rgb(221,136,13)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="175.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (1 samples, 0.01%)</title><rect x="99.1958%" y="149" width="0.0122%" height="15" fill="rgb(249,199,10)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="159.50"></text></g><g><title>1brc.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 0.01%)</title><rect x="99.1958%" y="133" width="0.0122%" height="15" fill="rgb(249,222,13)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="143.50"></text></g><g><title>1brc.exe`std::io::stdio::impl$1::write (1 samples, 0.01%)</title><rect x="99.1958%" y="117" width="0.0122%" height="15" fill="rgb(244,185,38)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="127.50"></text></g><g><title>1brc.exe`std::io::stdio::handle_ebadf (1 samples, 0.01%)</title><rect x="99.1958%" y="101" width="0.0122%" height="15" fill="rgb(236,202,9)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="111.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::stdio::write (1 samples, 0.01%)</title><rect x="99.1958%" y="85" width="0.0122%" height="15" fill="rgb(250,229,37)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="95.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::stdio::is_console (1 samples, 0.01%)</title><rect x="99.1958%" y="69" width="0.0122%" height="15" fill="rgb(206,174,23)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="79.50"></text></g><g><title>`0x7FFD9F5780F0 (1 samples, 0.01%)</title><rect x="99.1958%" y="53" width="0.0122%" height="15" fill="rgb(211,33,43)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="63.50"></text></g><g><title>`0x7FFDA1AED644 (1 samples, 0.01%)</title><rect x="99.1958%" y="37" width="0.0122%" height="15" fill="rgb(245,58,50)" fg:x="8141" fg:w="1"/><text x="99.4458%" y="47.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (3 samples, 0.04%)</title><rect x="99.2080%" y="485" width="0.0366%" height="15" fill="rgb(244,68,36)" fg:x="8142" fg:w="3"/><text x="99.4580%" y="495.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (3 samples, 0.04%)</title><rect x="99.2080%" y="469" width="0.0366%" height="15" fill="rgb(232,229,15)" fg:x="8142" fg:w="3"/><text x="99.4580%" y="479.50"></text></g><g><title>`0x7FFD9F541476 (3 samples, 0.04%)</title><rect x="99.2080%" y="453" width="0.0366%" height="15" fill="rgb(254,30,23)" fg:x="8142" fg:w="3"/><text x="99.4580%" y="463.50"></text></g><g><title>`0x7FFD9F541A09 (3 samples, 0.04%)</title><rect x="99.2080%" y="437" width="0.0366%" height="15" fill="rgb(235,160,14)" fg:x="8142" fg:w="3"/><text x="99.4580%" y="447.50"></text></g><g><title>`0x7FFDA1AEE004 (3 samples, 0.04%)</title><rect x="99.2080%" y="421" width="0.0366%" height="15" fill="rgb(212,155,44)" fg:x="8142" fg:w="3"/><text x="99.4580%" y="431.50"></text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;std::fs::File,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::fs::File,std::io::error::Error&gt; &gt;, ref$ (4 samples, 0.05%)</title><rect x="99.2080%" y="517" width="0.0487%" height="15" fill="rgb(226,2,50)" fg:x="8142" fg:w="4"/><text x="99.4580%" y="527.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (4 samples, 0.05%)</title><rect x="99.2080%" y="501" width="0.0487%" height="15" fill="rgb(234,177,6)" fg:x="8142" fg:w="4"/><text x="99.4580%" y="511.50"></text></g><g><title>`0x7FFD9F58C2C0 (1 samples, 0.01%)</title><rect x="99.2445%" y="485" width="0.0122%" height="15" fill="rgb(217,24,9)" fg:x="8145" fg:w="1"/><text x="99.4945%" y="495.50"></text></g><g><title>`0x7FFDA1AEDA44 (1 samples, 0.01%)</title><rect x="99.2445%" y="469" width="0.0122%" height="15" fill="rgb(220,13,46)" fg:x="8145" fg:w="1"/><text x="99.4945%" y="479.50"></text></g><g><title>1brc.exe`std::io::stdio::_print (1 samples, 0.01%)</title><rect x="99.2567%" y="517" width="0.0122%" height="15" fill="rgb(239,221,27)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="527.50"></text></g><g><title>1brc.exe`std::io::stdio::print_to (1 samples, 0.01%)</title><rect x="99.2567%" y="501" width="0.0122%" height="15" fill="rgb(222,198,25)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="511.50"></text></g><g><title>1brc.exe`std::io::stdio::stdout (1 samples, 0.01%)</title><rect x="99.2567%" y="485" width="0.0122%" height="15" fill="rgb(211,99,13)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="495.50"></text></g><g><title>1brc.exe`std::sync::once_lock::OnceLock::get_or_init (1 samples, 0.01%)</title><rect x="99.2567%" y="469" width="0.0122%" height="15" fill="rgb(232,111,31)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="479.50"></text></g><g><title>1brc.exe`std::sync::once_lock::OnceLock::get_or_try_init (1 samples, 0.01%)</title><rect x="99.2567%" y="453" width="0.0122%" height="15" fill="rgb(245,82,37)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="463.50"></text></g><g><title>1brc.exe`std::sync::once_lock::OnceLock::initialize&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::sync::once_lock::impl$0::get_or_init::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::io::stdio::stdout::closure_env$0&gt;,never$&gt; (1 samples, 0.01%)</title><rect x="99.2567%" y="437" width="0.0122%" height="15" fill="rgb(227,149,46)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="447.50"></text></g><g><title>1brc.exe`std::sys::sync::once::queue::Once::call (1 samples, 0.01%)</title><rect x="99.2567%" y="421" width="0.0122%" height="15" fill="rgb(218,36,50)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="431.50"></text></g><g><title>1brc.exe`core::cell::Cell::get (1 samples, 0.01%)</title><rect x="99.2567%" y="405" width="0.0122%" height="15" fill="rgb(226,80,48)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="415.50"></text></g><g><title>1brc.exe`core::ops::function::FnOnce::call_once&lt;std::sync::once::impl$2::call_once_force::closure_env$0&lt;std::sync::once_lock::impl$0::initialize::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::sync::once_lock::impl$0::get_or_init::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::io::stdio::stdout::closure_env$0&gt;,never$&gt; &gt;,tuple$&lt;ref$&lt;std::sync::once::OnceState&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="99.2567%" y="389" width="0.0122%" height="15" fill="rgb(238,224,15)" fg:x="8146" fg:w="1"/><text x="99.5067%" y="399.50"></text></g><g><title>1brc.exe`invoke_main() (8,148 samples, 99.28%)</title><rect x="0.0122%" y="693" width="99.2811%" height="15" fill="rgb(241,136,10)" fg:x="1" fg:w="8148"/><text x="0.2622%" y="703.50">1brc.exe`invoke_main()</text></g><g><title>1brc.exe`main (8,148 samples, 99.28%)</title><rect x="0.0122%" y="677" width="99.2811%" height="15" fill="rgb(208,32,45)" fg:x="1" fg:w="8148"/><text x="0.2622%" y="687.50">1brc.exe`main</text></g><g><title>1brc.exe`std::rt::lang_start_internal (8,148 samples, 99.28%)</title><rect x="0.0122%" y="661" width="99.2811%" height="15" fill="rgb(207,135,9)" fg:x="1" fg:w="8148"/><text x="0.2622%" y="671.50">1brc.exe`std::rt::lang_start_internal</text></g><g><title>1brc.exe`std::panic::catch_unwind (8,148 samples, 99.28%)</title><rect x="0.0122%" y="645" width="99.2811%" height="15" fill="rgb(206,86,44)" fg:x="1" fg:w="8148"/><text x="0.2622%" y="655.50">1brc.exe`std::panic::catch_unwind</text></g><g><title>1brc.exe`std::panicking::try (8,148 samples, 99.28%)</title><rect x="0.0122%" y="629" width="99.2811%" height="15" fill="rgb(245,177,15)" fg:x="1" fg:w="8148"/><text x="0.2622%" y="639.50">1brc.exe`std::panicking::try</text></g><g><title>1brc.exe`std::panicking::try::do_call (8,148 samples, 99.28%)</title><rect x="0.0122%" y="613" width="99.2811%" height="15" fill="rgb(206,64,50)" fg:x="1" fg:w="8148"/><text x="0.2622%" y="623.50">1brc.exe`std::panicking::try::do_call</text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$2 (8,147 samples, 99.27%)</title><rect x="0.0244%" y="597" width="99.2689%" height="15" fill="rgb(234,36,40)" fg:x="2" fg:w="8147"/><text x="0.2744%" y="607.50">1brc.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>1brc.exe`std::panic::catch_unwind (8,147 samples, 99.27%)</title><rect x="0.0244%" y="581" width="99.2689%" height="15" fill="rgb(213,64,8)" fg:x="2" fg:w="8147"/><text x="0.2744%" y="591.50">1brc.exe`std::panic::catch_unwind</text></g><g><title>1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (8,147 samples, 99.27%)</title><rect x="0.0244%" y="565" width="99.2689%" height="15" fill="rgb(210,75,36)" fg:x="2" fg:w="8147"/><text x="0.2744%" y="575.50">1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (8,147 samples, 99.27%)</title><rect x="0.0244%" y="549" width="99.2689%" height="15" fill="rgb(229,88,21)" fg:x="2" fg:w="8147"/><text x="0.2744%" y="559.50">1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>1brc.exe`1brc::main (8,147 samples, 99.27%)</title><rect x="0.0244%" y="533" width="99.2689%" height="15" fill="rgb(252,204,47)" fg:x="2" fg:w="8147"/><text x="0.2744%" y="543.50">1brc.exe`1brc::main</text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (2 samples, 0.02%)</title><rect x="99.2689%" y="517" width="0.0244%" height="15" fill="rgb(208,77,27)" fg:x="8147" fg:w="2"/><text x="99.5189%" y="527.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (2 samples, 0.02%)</title><rect x="99.2689%" y="501" width="0.0244%" height="15" fill="rgb(221,76,26)" fg:x="8147" fg:w="2"/><text x="99.5189%" y="511.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (2 samples, 0.02%)</title><rect x="99.2689%" y="485" width="0.0244%" height="15" fill="rgb(225,139,18)" fg:x="8147" fg:w="2"/><text x="99.5189%" y="495.50"></text></g><g><title>`0x7FFD9F541476 (2 samples, 0.02%)</title><rect x="99.2689%" y="469" width="0.0244%" height="15" fill="rgb(230,137,11)" fg:x="8147" fg:w="2"/><text x="99.5189%" y="479.50"></text></g><g><title>`0x7FFD9F541A09 (2 samples, 0.02%)</title><rect x="99.2689%" y="453" width="0.0244%" height="15" fill="rgb(212,28,1)" fg:x="8147" fg:w="2"/><text x="99.5189%" y="463.50"></text></g><g><title>`0x7FFDA1AEE004 (2 samples, 0.02%)</title><rect x="99.2689%" y="437" width="0.0244%" height="15" fill="rgb(248,164,17)" fg:x="8147" fg:w="2"/><text x="99.5189%" y="447.50"></text></g><g><title>`0x7FFDA1AB0F12 (3 samples, 0.04%)</title><rect x="99.2933%" y="549" width="0.0366%" height="15" fill="rgb(222,171,42)" fg:x="8149" fg:w="3"/><text x="99.5433%" y="559.50"></text></g><g><title>`0x7FFDA1AB0707 (3 samples, 0.04%)</title><rect x="99.2933%" y="533" width="0.0366%" height="15" fill="rgb(243,84,45)" fg:x="8149" fg:w="3"/><text x="99.5433%" y="543.50"></text></g><g><title>`0x7FFDA1AB087B (3 samples, 0.04%)</title><rect x="99.2933%" y="517" width="0.0366%" height="15" fill="rgb(252,49,23)" fg:x="8149" fg:w="3"/><text x="99.5433%" y="527.50"></text></g><g><title>`0x7FFDA1AEDD04 (3 samples, 0.04%)</title><rect x="99.2933%" y="501" width="0.0366%" height="15" fill="rgb(215,19,7)" fg:x="8149" fg:w="3"/><text x="99.5433%" y="511.50"></text></g><g><title>`0x7FFDA1AB11FE (1 samples, 0.01%)</title><rect x="99.3298%" y="533" width="0.0122%" height="15" fill="rgb(238,81,41)" fg:x="8152" fg:w="1"/><text x="99.5798%" y="543.50"></text></g><g><title>`0x7FFDA1AEDEA4 (1 samples, 0.01%)</title><rect x="99.3298%" y="517" width="0.0122%" height="15" fill="rgb(210,199,37)" fg:x="8152" fg:w="1"/><text x="99.5798%" y="527.50"></text></g><g><title>`0x7FFDA1A64BCF (1 samples, 0.01%)</title><rect x="99.3420%" y="517" width="0.0122%" height="15" fill="rgb(244,192,49)" fg:x="8153" fg:w="1"/><text x="99.5920%" y="527.50"></text></g><g><title>`0x7FFDA1A5FA99 (1 samples, 0.01%)</title><rect x="99.3420%" y="501" width="0.0122%" height="15" fill="rgb(226,211,11)" fg:x="8153" fg:w="1"/><text x="99.5920%" y="511.50"></text></g><g><title>`0x7FFDA1A606A3 (1 samples, 0.01%)</title><rect x="99.3420%" y="485" width="0.0122%" height="15" fill="rgb(236,162,54)" fg:x="8153" fg:w="1"/><text x="99.5920%" y="495.50"></text></g><g><title>`0x7FFDA1A64AAA (1 samples, 0.01%)</title><rect x="99.3542%" y="453" width="0.0122%" height="15" fill="rgb(220,229,9)" fg:x="8154" fg:w="1"/><text x="99.6042%" y="463.50"></text></g><g><title>`0x7FFDA1A64D42 (1 samples, 0.01%)</title><rect x="99.3542%" y="437" width="0.0122%" height="15" fill="rgb(250,87,22)" fg:x="8154" fg:w="1"/><text x="99.6042%" y="447.50"></text></g><g><title>`0x7FFDA1AEDA64 (1 samples, 0.01%)</title><rect x="99.3542%" y="421" width="0.0122%" height="15" fill="rgb(239,43,17)" fg:x="8154" fg:w="1"/><text x="99.6042%" y="431.50"></text></g><g><title>`0x7FFDA1A64BCF (1 samples, 0.01%)</title><rect x="99.3664%" y="453" width="0.0122%" height="15" fill="rgb(231,177,25)" fg:x="8155" fg:w="1"/><text x="99.6164%" y="463.50"></text></g><g><title>`0x7FFDA1A5FA99 (1 samples, 0.01%)</title><rect x="99.3664%" y="437" width="0.0122%" height="15" fill="rgb(219,179,1)" fg:x="8155" fg:w="1"/><text x="99.6164%" y="447.50"></text></g><g><title>`0x7FFDA1A606E7 (1 samples, 0.01%)</title><rect x="99.3664%" y="421" width="0.0122%" height="15" fill="rgb(238,219,53)" fg:x="8155" fg:w="1"/><text x="99.6164%" y="431.50"></text></g><g><title>`0x7FFDA1A67B29 (3 samples, 0.04%)</title><rect x="99.3542%" y="501" width="0.0366%" height="15" fill="rgb(232,167,36)" fg:x="8154" fg:w="3"/><text x="99.6042%" y="511.50"></text></g><g><title>`0x7FFDA1A688A8 (3 samples, 0.04%)</title><rect x="99.3542%" y="485" width="0.0366%" height="15" fill="rgb(244,19,51)" fg:x="8154" fg:w="3"/><text x="99.6042%" y="495.50"></text></g><g><title>`0x7FFDA1A64479 (3 samples, 0.04%)</title><rect x="99.3542%" y="469" width="0.0366%" height="15" fill="rgb(224,6,22)" fg:x="8154" fg:w="3"/><text x="99.6042%" y="479.50"></text></g><g><title>`0x7FFDA1A64C14 (1 samples, 0.01%)</title><rect x="99.3786%" y="453" width="0.0122%" height="15" fill="rgb(224,145,5)" fg:x="8156" fg:w="1"/><text x="99.6286%" y="463.50"></text></g><g><title>`0x7FFDA1A679C4 (1 samples, 0.01%)</title><rect x="99.3786%" y="437" width="0.0122%" height="15" fill="rgb(234,130,49)" fg:x="8156" fg:w="1"/><text x="99.6286%" y="447.50"></text></g><g><title>`0x7FFDA1A64EDA (1 samples, 0.01%)</title><rect x="99.3786%" y="421" width="0.0122%" height="15" fill="rgb(254,6,2)" fg:x="8156" fg:w="1"/><text x="99.6286%" y="431.50"></text></g><g><title>`0x7FFDA07454D4 (1 samples, 0.01%)</title><rect x="99.3786%" y="405" width="0.0122%" height="15" fill="rgb(208,96,46)" fg:x="8156" fg:w="1"/><text x="99.6286%" y="415.50"></text></g><g><title>`0x7FFDA1AA5499 (1 samples, 0.01%)</title><rect x="99.3786%" y="389" width="0.0122%" height="15" fill="rgb(239,3,39)" fg:x="8156" fg:w="1"/><text x="99.6286%" y="399.50"></text></g><g><title>`0x7FFDA1AA5908 (1 samples, 0.01%)</title><rect x="99.3786%" y="373" width="0.0122%" height="15" fill="rgb(233,210,1)" fg:x="8156" fg:w="1"/><text x="99.6286%" y="383.50"></text></g><g><title>`0x7FFDA1A826B7 (1 samples, 0.01%)</title><rect x="99.3908%" y="485" width="0.0122%" height="15" fill="rgb(244,137,37)" fg:x="8157" fg:w="1"/><text x="99.6408%" y="495.50"></text></g><g><title>`0x7FFDA1AB1253 (6 samples, 0.07%)</title><rect x="99.3420%" y="533" width="0.0731%" height="15" fill="rgb(240,136,2)" fg:x="8153" fg:w="6"/><text x="99.5920%" y="543.50"></text></g><g><title>`0x7FFDA1A64C14 (5 samples, 0.06%)</title><rect x="99.3542%" y="517" width="0.0609%" height="15" fill="rgb(239,18,37)" fg:x="8154" fg:w="5"/><text x="99.6042%" y="527.50"></text></g><g><title>`0x7FFDA1A67BC4 (2 samples, 0.02%)</title><rect x="99.3908%" y="501" width="0.0244%" height="15" fill="rgb(218,185,22)" fg:x="8157" fg:w="2"/><text x="99.6408%" y="511.50"></text></g><g><title>`0x7FFDA1A826C6 (1 samples, 0.01%)</title><rect x="99.4029%" y="485" width="0.0122%" height="15" fill="rgb(225,218,4)" fg:x="8158" fg:w="1"/><text x="99.6529%" y="495.50"></text></g><g><title>`0x7FFDA1A6FB53 (11 samples, 0.13%)</title><rect x="99.2933%" y="581" width="0.1340%" height="15" fill="rgb(230,182,32)" fg:x="8149" fg:w="11"/><text x="99.5433%" y="591.50"></text></g><g><title>`0x7FFDA1AB021F (11 samples, 0.13%)</title><rect x="99.2933%" y="565" width="0.1340%" height="15" fill="rgb(242,56,43)" fg:x="8149" fg:w="11"/><text x="99.5433%" y="575.50"></text></g><g><title>`0x7FFDA1AB0F80 (8 samples, 0.10%)</title><rect x="99.3298%" y="549" width="0.0975%" height="15" fill="rgb(233,99,24)" fg:x="8152" fg:w="8"/><text x="99.5798%" y="559.50"></text></g><g><title>`0x7FFDA1AB1271 (1 samples, 0.01%)</title><rect x="99.4151%" y="533" width="0.0122%" height="15" fill="rgb(234,209,42)" fg:x="8159" fg:w="1"/><text x="99.6651%" y="543.50"></text></g><g><title>`0x7FFDA1AED744 (1 samples, 0.01%)</title><rect x="99.4151%" y="517" width="0.0122%" height="15" fill="rgb(227,7,12)" fg:x="8159" fg:w="1"/><text x="99.6651%" y="527.50"></text></g><g><title>`0x7FFDA01B78B0 (1 samples, 0.01%)</title><rect x="99.4273%" y="485" width="0.0122%" height="15" fill="rgb(245,203,43)" fg:x="8160" fg:w="1"/><text x="99.6773%" y="495.50"></text></g><g><title>`0x7FFDA01CA261 (1 samples, 0.01%)</title><rect x="99.4273%" y="469" width="0.0122%" height="15" fill="rgb(238,205,33)" fg:x="8160" fg:w="1"/><text x="99.6773%" y="479.50"></text></g><g><title>`0x7FFD9F9705A2 (13 samples, 0.16%)</title><rect x="99.2933%" y="677" width="0.1584%" height="15" fill="rgb(231,56,7)" fg:x="8149" fg:w="13"/><text x="99.5433%" y="687.50"></text></g><g><title>`0x7FFD9F9719C7 (13 samples, 0.16%)</title><rect x="99.2933%" y="661" width="0.1584%" height="15" fill="rgb(244,186,29)" fg:x="8149" fg:w="13"/><text x="99.5433%" y="671.50"></text></g><g><title>`0x7FFD9F96C050 (13 samples, 0.16%)</title><rect x="99.2933%" y="645" width="0.1584%" height="15" fill="rgb(234,111,31)" fg:x="8149" fg:w="13"/><text x="99.5433%" y="655.50"></text></g><g><title>`0x7FFD9F542612 (13 samples, 0.16%)</title><rect x="99.2933%" y="629" width="0.1584%" height="15" fill="rgb(241,149,10)" fg:x="8149" fg:w="13"/><text x="99.5433%" y="639.50"></text></g><g><title>`0x7FFDA1A66AF4 (13 samples, 0.16%)</title><rect x="99.2933%" y="613" width="0.1584%" height="15" fill="rgb(249,206,44)" fg:x="8149" fg:w="13"/><text x="99.5433%" y="623.50"></text></g><g><title>`0x7FFDA1A673E4 (13 samples, 0.16%)</title><rect x="99.2933%" y="597" width="0.1584%" height="15" fill="rgb(251,153,30)" fg:x="8149" fg:w="13"/><text x="99.5433%" y="607.50"></text></g><g><title>`0x7FFDA1A6FBAE (2 samples, 0.02%)</title><rect x="99.4273%" y="581" width="0.0244%" height="15" fill="rgb(239,152,38)" fg:x="8160" fg:w="2"/><text x="99.6773%" y="591.50"></text></g><g><title>`0x7FFDA1A8D947 (2 samples, 0.02%)</title><rect x="99.4273%" y="565" width="0.0244%" height="15" fill="rgb(249,139,47)" fg:x="8160" fg:w="2"/><text x="99.6773%" y="575.50"></text></g><g><title>`0x7FFDA1ABD120 (2 samples, 0.02%)</title><rect x="99.4273%" y="549" width="0.0244%" height="15" fill="rgb(244,64,35)" fg:x="8160" fg:w="2"/><text x="99.6773%" y="559.50"></text></g><g><title>`0x7FFDA1ABD09A (2 samples, 0.02%)</title><rect x="99.4273%" y="533" width="0.0244%" height="15" fill="rgb(216,46,15)" fg:x="8160" fg:w="2"/><text x="99.6773%" y="543.50"></text></g><g><title>`0x7FFDA1ABD307 (2 samples, 0.02%)</title><rect x="99.4273%" y="517" width="0.0244%" height="15" fill="rgb(250,74,19)" fg:x="8160" fg:w="2"/><text x="99.6773%" y="527.50"></text></g><g><title>`0x7FFDA1A69A1D (2 samples, 0.02%)</title><rect x="99.4273%" y="501" width="0.0244%" height="15" fill="rgb(249,42,33)" fg:x="8160" fg:w="2"/><text x="99.6773%" y="511.50"></text></g><g><title>`0x7FFDA01B78EF (1 samples, 0.01%)</title><rect x="99.4395%" y="485" width="0.0122%" height="15" fill="rgb(242,149,17)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="495.50"></text></g><g><title>`0x7FFDA01D0AAE (1 samples, 0.01%)</title><rect x="99.4395%" y="469" width="0.0122%" height="15" fill="rgb(244,29,21)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="479.50"></text></g><g><title>`0x7FFDA01D0C20 (1 samples, 0.01%)</title><rect x="99.4395%" y="453" width="0.0122%" height="15" fill="rgb(220,130,37)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="463.50"></text></g><g><title>`0x7FFDA01C9F44 (1 samples, 0.01%)</title><rect x="99.4395%" y="437" width="0.0122%" height="15" fill="rgb(211,67,2)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="447.50"></text></g><g><title>`0x7FFDA01C9D40 (1 samples, 0.01%)</title><rect x="99.4395%" y="421" width="0.0122%" height="15" fill="rgb(235,68,52)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="431.50"></text></g><g><title>`0x7FFDA1A7B44D (1 samples, 0.01%)</title><rect x="99.4395%" y="405" width="0.0122%" height="15" fill="rgb(246,142,3)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="415.50"></text></g><g><title>`0x7FFDA1A7D37A (1 samples, 0.01%)</title><rect x="99.4395%" y="389" width="0.0122%" height="15" fill="rgb(241,25,7)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="399.50"></text></g><g><title>`0x7FFDA1A94D2F (1 samples, 0.01%)</title><rect x="99.4395%" y="373" width="0.0122%" height="15" fill="rgb(242,119,39)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="383.50"></text></g><g><title>`0x7FFDA1A94B80 (1 samples, 0.01%)</title><rect x="99.4395%" y="357" width="0.0122%" height="15" fill="rgb(241,98,45)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="367.50"></text></g><g><title>`0x7FFDA1A94810 (1 samples, 0.01%)</title><rect x="99.4395%" y="341" width="0.0122%" height="15" fill="rgb(254,28,30)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="351.50"></text></g><g><title>`0x7FFDA1A94739 (1 samples, 0.01%)</title><rect x="99.4395%" y="325" width="0.0122%" height="15" fill="rgb(241,142,54)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="335.50"></text></g><g><title>`0x7FFDA1A938C0 (1 samples, 0.01%)</title><rect x="99.4395%" y="309" width="0.0122%" height="15" fill="rgb(222,85,15)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="319.50"></text></g><g><title>`0x7FFDA1ACD651 (1 samples, 0.01%)</title><rect x="99.4395%" y="293" width="0.0122%" height="15" fill="rgb(210,85,47)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="303.50"></text></g><g><title>`0x7FFDA1AED844 (1 samples, 0.01%)</title><rect x="99.4395%" y="277" width="0.0122%" height="15" fill="rgb(224,206,25)" fg:x="8161" fg:w="1"/><text x="99.6895%" y="287.50"></text></g><g><title>`0x7FFDA1AAEF34 (1 samples, 0.01%)</title><rect x="99.4517%" y="645" width="0.0122%" height="15" fill="rgb(243,201,19)" fg:x="8162" fg:w="1"/><text x="99.7017%" y="655.50"></text></g><g><title>`0x7FFDA1AEDAE4 (1 samples, 0.01%)</title><rect x="99.4517%" y="629" width="0.0122%" height="15" fill="rgb(236,59,4)" fg:x="8162" fg:w="1"/><text x="99.7017%" y="639.50"></text></g><g><title>1brc.exe`__scrt_common_main_seh() (8,163 samples, 99.46%)</title><rect x="0.0122%" y="709" width="99.4639%" height="15" fill="rgb(254,179,45)" fg:x="1" fg:w="8163"/><text x="0.2622%" y="719.50">1brc.exe`__scrt_common_main_seh()</text></g><g><title>`0x7FFD9F97045F (15 samples, 0.18%)</title><rect x="99.2933%" y="693" width="0.1828%" height="15" fill="rgb(226,14,10)" fg:x="8149" fg:w="15"/><text x="99.5433%" y="703.50"></text></g><g><title>`0x7FFD9F9705BC (2 samples, 0.02%)</title><rect x="99.4517%" y="677" width="0.0244%" height="15" fill="rgb(244,27,41)" fg:x="8162" fg:w="2"/><text x="99.7017%" y="687.50"></text></g><g><title>`0x7FFDA074E3EB (2 samples, 0.02%)</title><rect x="99.4517%" y="661" width="0.0244%" height="15" fill="rgb(235,35,32)" fg:x="8162" fg:w="2"/><text x="99.7017%" y="671.50"></text></g><g><title>`0x7FFDA1AAEF8D (1 samples, 0.01%)</title><rect x="99.4639%" y="645" width="0.0122%" height="15" fill="rgb(218,68,31)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="655.50"></text></g><g><title>`0x7FFDA1AAF1DA (1 samples, 0.01%)</title><rect x="99.4639%" y="629" width="0.0122%" height="15" fill="rgb(207,120,37)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="639.50"></text></g><g><title>`0x7FFDA1A69A1D (1 samples, 0.01%)</title><rect x="99.4639%" y="613" width="0.0122%" height="15" fill="rgb(227,98,0)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="623.50"></text></g><g><title>`0x7FFD9F568ED0 (1 samples, 0.01%)</title><rect x="99.4639%" y="597" width="0.0122%" height="15" fill="rgb(207,7,3)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="607.50"></text></g><g><title>`0x7FFD9F5AE057 (1 samples, 0.01%)</title><rect x="99.4639%" y="581" width="0.0122%" height="15" fill="rgb(206,98,19)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="591.50"></text></g><g><title>`0x7FFD9F5C3FE4 (1 samples, 0.01%)</title><rect x="99.4639%" y="565" width="0.0122%" height="15" fill="rgb(217,5,26)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="575.50"></text></g><g><title>`0x7FFD9F5AF806 (1 samples, 0.01%)</title><rect x="99.4639%" y="549" width="0.0122%" height="15" fill="rgb(235,190,38)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="559.50"></text></g><g><title>`0x7FFD9F5BF714 (1 samples, 0.01%)</title><rect x="99.4639%" y="533" width="0.0122%" height="15" fill="rgb(247,86,24)" fg:x="8163" fg:w="1"/><text x="99.7139%" y="543.50"></text></g><g><title>`0x7FFDA1A826B3 (1 samples, 0.01%)</title><rect x="99.4761%" y="645" width="0.0122%" height="15" fill="rgb(205,101,16)" fg:x="8164" fg:w="1"/><text x="99.7261%" y="655.50"></text></g><g><title>`0x7FFDA1A826B7 (1 samples, 0.01%)</title><rect x="99.4882%" y="645" width="0.0122%" height="15" fill="rgb(246,168,33)" fg:x="8165" fg:w="1"/><text x="99.7382%" y="655.50"></text></g><g><title>`0x7FFDA1A826C6 (2 samples, 0.02%)</title><rect x="99.5004%" y="645" width="0.0244%" height="15" fill="rgb(231,114,1)" fg:x="8166" fg:w="2"/><text x="99.7504%" y="655.50"></text></g><g><title>`0x7FFDA1A82714 (1 samples, 0.01%)</title><rect x="99.5248%" y="645" width="0.0122%" height="15" fill="rgb(207,184,53)" fg:x="8168" fg:w="1"/><text x="99.7748%" y="655.50"></text></g><g><title>`0x7FFDA1A827DA (1 samples, 0.01%)</title><rect x="99.5370%" y="645" width="0.0122%" height="15" fill="rgb(224,95,51)" fg:x="8169" fg:w="1"/><text x="99.7870%" y="655.50"></text></g><g><title>`0x7FFDA1A83336 (1 samples, 0.01%)</title><rect x="99.5370%" y="629" width="0.0122%" height="15" fill="rgb(212,188,45)" fg:x="8169" fg:w="1"/><text x="99.7870%" y="639.50"></text></g><g><title>`0x7FFDA1AE1A32 (1 samples, 0.01%)</title><rect x="99.5370%" y="613" width="0.0122%" height="15" fill="rgb(223,154,38)" fg:x="8169" fg:w="1"/><text x="99.7870%" y="623.50"></text></g><g><title>`0x7FFDA1AB0138 (7 samples, 0.09%)</title><rect x="99.4761%" y="661" width="0.0853%" height="15" fill="rgb(251,22,52)" fg:x="8164" fg:w="7"/><text x="99.7261%" y="671.50"></text></g><g><title>`0x7FFDA1A8288A (1 samples, 0.01%)</title><rect x="99.5492%" y="645" width="0.0122%" height="15" fill="rgb(229,209,22)" fg:x="8170" fg:w="1"/><text x="99.7992%" y="655.50"></text></g><g><title>`0x7FFDA1AA4518 (1 samples, 0.01%)</title><rect x="99.5492%" y="629" width="0.0122%" height="15" fill="rgb(234,138,34)" fg:x="8170" fg:w="1"/><text x="99.7992%" y="639.50"></text></g><g><title>`0x7FFDA1AEDF64 (1 samples, 0.01%)</title><rect x="99.5492%" y="613" width="0.0122%" height="15" fill="rgb(212,95,11)" fg:x="8170" fg:w="1"/><text x="99.7992%" y="623.50"></text></g><g><title>`0x7FFDA1AB0BE6 (2 samples, 0.02%)</title><rect x="99.5614%" y="645" width="0.0244%" height="15" fill="rgb(240,179,47)" fg:x="8171" fg:w="2"/><text x="99.8114%" y="655.50"></text></g><g><title>`0x7FFDA1AB0526 (2 samples, 0.02%)</title><rect x="99.5614%" y="629" width="0.0244%" height="15" fill="rgb(240,163,11)" fg:x="8171" fg:w="2"/><text x="99.8114%" y="639.50"></text></g><g><title>`0x7FFDA1AB0707 (2 samples, 0.02%)</title><rect x="99.5614%" y="613" width="0.0244%" height="15" fill="rgb(236,37,12)" fg:x="8171" fg:w="2"/><text x="99.8114%" y="623.50"></text></g><g><title>`0x7FFDA1AB087B (2 samples, 0.02%)</title><rect x="99.5614%" y="597" width="0.0244%" height="15" fill="rgb(232,164,16)" fg:x="8171" fg:w="2"/><text x="99.8114%" y="607.50"></text></g><g><title>`0x7FFDA1AEDD04 (2 samples, 0.02%)</title><rect x="99.5614%" y="581" width="0.0244%" height="15" fill="rgb(244,205,15)" fg:x="8171" fg:w="2"/><text x="99.8114%" y="591.50"></text></g><g><title>`0x7FFDA1AB119C (1 samples, 0.01%)</title><rect x="99.5857%" y="629" width="0.0122%" height="15" fill="rgb(223,117,47)" fg:x="8173" fg:w="1"/><text x="99.8357%" y="639.50"></text></g><g><title>`0x7FFDA1AEDBC4 (1 samples, 0.01%)</title><rect x="99.5857%" y="613" width="0.0122%" height="15" fill="rgb(244,107,35)" fg:x="8173" fg:w="1"/><text x="99.8357%" y="623.50"></text></g><g><title>`0x7FFDA1A64AAA (1 samples, 0.01%)</title><rect x="99.5979%" y="613" width="0.0122%" height="15" fill="rgb(205,140,8)" fg:x="8174" fg:w="1"/><text x="99.8479%" y="623.50"></text></g><g><title>`0x7FFDA1A64D42 (1 samples, 0.01%)</title><rect x="99.5979%" y="597" width="0.0122%" height="15" fill="rgb(228,84,46)" fg:x="8174" fg:w="1"/><text x="99.8479%" y="607.50"></text></g><g><title>`0x7FFDA1AEDA64 (1 samples, 0.01%)</title><rect x="99.5979%" y="581" width="0.0122%" height="15" fill="rgb(254,188,9)" fg:x="8174" fg:w="1"/><text x="99.8479%" y="591.50"></text></g><g><title>`0x7FFDA1A9CC91 (8,175 samples, 99.61%)</title><rect x="0.0122%" y="741" width="99.6101%" height="15" fill="rgb(206,112,54)" fg:x="1" fg:w="8175"/><text x="0.2622%" y="751.50">`0x7FFDA1A9CC91</text></g><g><title>`0x7FFDA0747374 (8,175 samples, 99.61%)</title><rect x="0.0122%" y="725" width="99.6101%" height="15" fill="rgb(216,84,49)" fg:x="1" fg:w="8175"/><text x="0.2622%" y="735.50">`0x7FFDA0747374</text></g><g><title>`0x7FFDA1A9D79A (12 samples, 0.15%)</title><rect x="99.4761%" y="709" width="0.1462%" height="15" fill="rgb(214,194,35)" fg:x="8164" fg:w="12"/><text x="99.7261%" y="719.50"></text></g><g><title>`0x7FFDA1AB3730 (12 samples, 0.15%)</title><rect x="99.4761%" y="693" width="0.1462%" height="15" fill="rgb(249,28,3)" fg:x="8164" fg:w="12"/><text x="99.7261%" y="703.50"></text></g><g><title>`0x7FFDA1AB00E3 (12 samples, 0.15%)</title><rect x="99.4761%" y="677" width="0.1462%" height="15" fill="rgb(222,56,52)" fg:x="8164" fg:w="12"/><text x="99.7261%" y="687.50"></text></g><g><title>`0x7FFDA1AB0170 (5 samples, 0.06%)</title><rect x="99.5614%" y="661" width="0.0609%" height="15" fill="rgb(245,217,50)" fg:x="8171" fg:w="5"/><text x="99.8114%" y="671.50"></text></g><g><title>`0x7FFDA1AB0CB0 (3 samples, 0.04%)</title><rect x="99.5857%" y="645" width="0.0366%" height="15" fill="rgb(213,201,24)" fg:x="8173" fg:w="3"/><text x="99.8357%" y="655.50"></text></g><g><title>`0x7FFDA1AB1253 (2 samples, 0.02%)</title><rect x="99.5979%" y="629" width="0.0244%" height="15" fill="rgb(248,116,28)" fg:x="8174" fg:w="2"/><text x="99.8479%" y="639.50"></text></g><g><title>`0x7FFDA1A64C14 (1 samples, 0.01%)</title><rect x="99.6101%" y="613" width="0.0122%" height="15" fill="rgb(219,72,43)" fg:x="8175" fg:w="1"/><text x="99.8601%" y="623.50"></text></g><g><title>`0x7FFDA1A67BA2 (1 samples, 0.01%)</title><rect x="99.6101%" y="597" width="0.0122%" height="15" fill="rgb(209,138,14)" fg:x="8175" fg:w="1"/><text x="99.8601%" y="607.50"></text></g><g><title>`0x7FFDA1A5F49F (1 samples, 0.01%)</title><rect x="99.6101%" y="581" width="0.0122%" height="15" fill="rgb(222,18,33)" fg:x="8175" fg:w="1"/><text x="99.8601%" y="591.50"></text></g><g><title>`0x7FFDA1A62A66 (1 samples, 0.01%)</title><rect x="99.6101%" y="565" width="0.0122%" height="15" fill="rgb(213,199,7)" fg:x="8175" fg:w="1"/><text x="99.8601%" y="575.50"></text></g><g><title>`0x7FFDA1A62BD9 (1 samples, 0.01%)</title><rect x="99.6101%" y="549" width="0.0122%" height="15" fill="rgb(250,110,10)" fg:x="8175" fg:w="1"/><text x="99.8601%" y="559.50"></text></g><g><title>`0x7FFDA1AF0374 (1 samples, 0.01%)</title><rect x="99.6101%" y="533" width="0.0122%" height="15" fill="rgb(248,123,6)" fg:x="8175" fg:w="1"/><text x="99.8601%" y="543.50"></text></g><g><title>`0x7FFDA1AC5C20 (2 samples, 0.02%)</title><rect x="99.6223%" y="741" width="0.0244%" height="15" fill="rgb(206,91,31)" fg:x="8176" fg:w="2"/><text x="99.8723%" y="751.50"></text></g><g><title>`0x7FFDA1AC5C52 (1 samples, 0.01%)</title><rect x="99.6466%" y="725" width="0.0122%" height="15" fill="rgb(211,154,13)" fg:x="8178" fg:w="1"/><text x="99.8966%" y="735.50"></text></g><g><title>`0x7FFDA1B22156 (1 samples, 0.01%)</title><rect x="99.6588%" y="693" width="0.0122%" height="15" fill="rgb(225,148,7)" fg:x="8179" fg:w="1"/><text x="99.9088%" y="703.50"></text></g><g><title>`0x7FFDA1A62296 (1 samples, 0.01%)</title><rect x="99.6588%" y="677" width="0.0122%" height="15" fill="rgb(220,160,43)" fg:x="8179" fg:w="1"/><text x="99.9088%" y="687.50"></text></g><g><title>`0x7FFDA1A6355D (1 samples, 0.01%)</title><rect x="99.6588%" y="661" width="0.0122%" height="15" fill="rgb(213,52,39)" fg:x="8179" fg:w="1"/><text x="99.9088%" y="671.50"></text></g><g><title>`0x7FFDA1B25A9A (1 samples, 0.01%)</title><rect x="99.6588%" y="645" width="0.0122%" height="15" fill="rgb(243,137,7)" fg:x="8179" fg:w="1"/><text x="99.9088%" y="655.50"></text></g><g><title>`0x7FFDA1A5F2C4 (1 samples, 0.01%)</title><rect x="99.6588%" y="629" width="0.0122%" height="15" fill="rgb(230,79,13)" fg:x="8179" fg:w="1"/><text x="99.9088%" y="639.50"></text></g><g><title>`0x7FFDA1B225BF (1 samples, 0.01%)</title><rect x="99.6710%" y="693" width="0.0122%" height="15" fill="rgb(247,105,23)" fg:x="8180" fg:w="1"/><text x="99.9210%" y="703.50"></text></g><g><title>`0x7FFDA1AA534F (1 samples, 0.01%)</title><rect x="99.6710%" y="677" width="0.0122%" height="15" fill="rgb(223,179,41)" fg:x="8180" fg:w="1"/><text x="99.9210%" y="687.50"></text></g><g><title>`0x7FFDA1B228F8 (1 samples, 0.01%)</title><rect x="99.6832%" y="693" width="0.0122%" height="15" fill="rgb(218,9,34)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="703.50"></text></g><g><title>`0x7FFDA1A92EA0 (1 samples, 0.01%)</title><rect x="99.6832%" y="677" width="0.0122%" height="15" fill="rgb(222,106,8)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="687.50"></text></g><g><title>`0x7FFDA1A930E5 (1 samples, 0.01%)</title><rect x="99.6832%" y="661" width="0.0122%" height="15" fill="rgb(211,220,0)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="671.50"></text></g><g><title>`0x7FFDA1A92F43 (1 samples, 0.01%)</title><rect x="99.6832%" y="645" width="0.0122%" height="15" fill="rgb(229,52,16)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="655.50"></text></g><g><title>`0x7FFDA1A938C0 (1 samples, 0.01%)</title><rect x="99.6832%" y="629" width="0.0122%" height="15" fill="rgb(212,155,18)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="639.50"></text></g><g><title>`0x7FFDA1ACE42E (1 samples, 0.01%)</title><rect x="99.6832%" y="613" width="0.0122%" height="15" fill="rgb(242,21,14)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="623.50"></text></g><g><title>`0x7FFDA1A5E02C (1 samples, 0.01%)</title><rect x="99.6832%" y="597" width="0.0122%" height="15" fill="rgb(222,19,48)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="607.50"></text></g><g><title>`0x7FFDA1A609A3 (1 samples, 0.01%)</title><rect x="99.6832%" y="581" width="0.0122%" height="15" fill="rgb(232,45,27)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="591.50"></text></g><g><title>`0x7FFDA1A622CD (1 samples, 0.01%)</title><rect x="99.6832%" y="565" width="0.0122%" height="15" fill="rgb(249,103,42)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="575.50"></text></g><g><title>`0x7FFDA1A62634 (1 samples, 0.01%)</title><rect x="99.6832%" y="549" width="0.0122%" height="15" fill="rgb(246,81,33)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="559.50"></text></g><g><title>`0x7FFDA1A6388C (1 samples, 0.01%)</title><rect x="99.6832%" y="533" width="0.0122%" height="15" fill="rgb(252,33,42)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="543.50"></text></g><g><title>`0x7FFDA1AB30E8 (1 samples, 0.01%)</title><rect x="99.6832%" y="517" width="0.0122%" height="15" fill="rgb(209,212,41)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="527.50"></text></g><g><title>`0x7FFDA1A71781 (1 samples, 0.01%)</title><rect x="99.6832%" y="501" width="0.0122%" height="15" fill="rgb(207,154,6)" fg:x="8181" fg:w="1"/><text x="99.9332%" y="511.50"></text></g><g><title>`0x7FFDA1B2339C (1 samples, 0.01%)</title><rect x="99.6954%" y="693" width="0.0122%" height="15" fill="rgb(223,64,47)" fg:x="8182" fg:w="1"/><text x="99.9454%" y="703.50"></text></g><g><title>`0x7FFDA1A5FA99 (1 samples, 0.01%)</title><rect x="99.6954%" y="677" width="0.0122%" height="15" fill="rgb(211,161,38)" fg:x="8182" fg:w="1"/><text x="99.9454%" y="687.50"></text></g><g><title>`0x7FFDA1A606A3 (1 samples, 0.01%)</title><rect x="99.6954%" y="661" width="0.0122%" height="15" fill="rgb(219,138,40)" fg:x="8182" fg:w="1"/><text x="99.9454%" y="671.50"></text></g><g><title>`0x7FFDA1B233CC (1 samples, 0.01%)</title><rect x="99.7076%" y="693" width="0.0122%" height="15" fill="rgb(241,228,46)" fg:x="8183" fg:w="1"/><text x="99.9576%" y="703.50"></text></g><g><title>`0x7FFDA1AAFCD2 (1 samples, 0.01%)</title><rect x="99.7076%" y="677" width="0.0122%" height="15" fill="rgb(223,209,38)" fg:x="8183" fg:w="1"/><text x="99.9576%" y="687.50"></text></g><g><title>`0x7FFDA1AAFDA8 (1 samples, 0.01%)</title><rect x="99.7076%" y="661" width="0.0122%" height="15" fill="rgb(236,164,45)" fg:x="8183" fg:w="1"/><text x="99.9576%" y="671.50"></text></g><g><title>`0x7FFDA1AEDBC4 (1 samples, 0.01%)</title><rect x="99.7076%" y="645" width="0.0122%" height="15" fill="rgb(231,15,5)" fg:x="8183" fg:w="1"/><text x="99.9576%" y="655.50"></text></g><g><title>`0x7FFDA1A64AAA (1 samples, 0.01%)</title><rect x="99.7198%" y="597" width="0.0122%" height="15" fill="rgb(252,35,15)" fg:x="8184" fg:w="1"/><text x="99.9698%" y="607.50"></text></g><g><title>`0x7FFDA1A64D42 (1 samples, 0.01%)</title><rect x="99.7198%" y="581" width="0.0122%" height="15" fill="rgb(248,181,18)" fg:x="8184" fg:w="1"/><text x="99.9698%" y="591.50"></text></g><g><title>`0x7FFDA1AEDA64 (1 samples, 0.01%)</title><rect x="99.7198%" y="565" width="0.0122%" height="15" fill="rgb(233,39,42)" fg:x="8184" fg:w="1"/><text x="99.9698%" y="575.50"></text></g><g><title>`0x7FFDA1A685AE (1 samples, 0.01%)</title><rect x="99.7319%" y="565" width="0.0122%" height="15" fill="rgb(238,110,33)" fg:x="8185" fg:w="1"/><text x="99.9819%" y="575.50"></text></g><g><title>`0x7FFDA1A67B29 (2 samples, 0.02%)</title><rect x="99.7319%" y="581" width="0.0244%" height="15" fill="rgb(233,195,10)" fg:x="8185" fg:w="2"/><text x="99.9819%" y="591.50"></text></g><g><title>`0x7FFDA1A688A8 (1 samples, 0.01%)</title><rect x="99.7441%" y="565" width="0.0122%" height="15" fill="rgb(254,105,3)" fg:x="8186" fg:w="1"/><text x="99.9941%" y="575.50"></text></g><g><title>`0x7FFDA1A64479 (1 samples, 0.01%)</title><rect x="99.7441%" y="549" width="0.0122%" height="15" fill="rgb(221,225,9)" fg:x="8186" fg:w="1"/><text x="99.9941%" y="559.50"></text></g><g><title>`0x7FFDA1A64AAA (1 samples, 0.01%)</title><rect x="99.7441%" y="533" width="0.0122%" height="15" fill="rgb(224,227,45)" fg:x="8186" fg:w="1"/><text x="99.9941%" y="543.50"></text></g><g><title>`0x7FFDA1A64D42 (1 samples, 0.01%)</title><rect x="99.7441%" y="517" width="0.0122%" height="15" fill="rgb(229,198,43)" fg:x="8186" fg:w="1"/><text x="99.9941%" y="527.50"></text></g><g><title>`0x7FFDA1AEDA64 (1 samples, 0.01%)</title><rect x="99.7441%" y="501" width="0.0122%" height="15" fill="rgb(206,209,35)" fg:x="8186" fg:w="1"/><text x="99.9941%" y="511.50"></text></g><g><title>`0x7FFDA1A826C6 (1 samples, 0.01%)</title><rect x="99.7563%" y="565" width="0.0122%" height="15" fill="rgb(245,195,53)" fg:x="8187" fg:w="1"/><text x="100.0063%" y="575.50"></text></g><g><title>`0x7FFDA1A6FB31 (5 samples, 0.06%)</title><rect x="99.7198%" y="645" width="0.0609%" height="15" fill="rgb(240,92,26)" fg:x="8184" fg:w="5"/><text x="99.9698%" y="655.50"></text></g><g><title>`0x7FFDA1ABC2FD (5 samples, 0.06%)</title><rect x="99.7198%" y="629" width="0.0609%" height="15" fill="rgb(207,40,23)" fg:x="8184" fg:w="5"/><text x="99.9698%" y="639.50"></text></g><g><title>`0x7FFDA1A64479 (5 samples, 0.06%)</title><rect x="99.7198%" y="613" width="0.0609%" height="15" fill="rgb(223,111,35)" fg:x="8184" fg:w="5"/><text x="99.9698%" y="623.50"></text></g><g><title>`0x7FFDA1A64C14 (4 samples, 0.05%)</title><rect x="99.7319%" y="597" width="0.0487%" height="15" fill="rgb(229,147,28)" fg:x="8185" fg:w="4"/><text x="99.9819%" y="607.50"></text></g><g><title>`0x7FFDA1A67BC4 (2 samples, 0.02%)</title><rect x="99.7563%" y="581" width="0.0244%" height="15" fill="rgb(211,29,28)" fg:x="8187" fg:w="2"/><text x="100.0063%" y="591.50"></text></g><g><title>`0x7FFDA1A826F1 (1 samples, 0.01%)</title><rect x="99.7685%" y="565" width="0.0122%" height="15" fill="rgb(228,72,33)" fg:x="8188" fg:w="1"/><text x="100.0185%" y="575.50"></text></g><g><title>`0x7FFD9F569187 (1 samples, 0.01%)</title><rect x="99.7807%" y="533" width="0.0122%" height="15" fill="rgb(205,214,31)" fg:x="8189" fg:w="1"/><text x="100.0307%" y="543.50"></text></g><g><title>`0x7FFD9F56A9D6 (1 samples, 0.01%)</title><rect x="99.7807%" y="517" width="0.0122%" height="15" fill="rgb(224,111,15)" fg:x="8189" fg:w="1"/><text x="100.0307%" y="527.50"></text></g><g><title>`0x7FFDA1A58EF2 (1 samples, 0.01%)</title><rect x="99.7807%" y="501" width="0.0122%" height="15" fill="rgb(253,21,26)" fg:x="8189" fg:w="1"/><text x="100.0307%" y="511.50"></text></g><g><title>`0x7FFDA1A59235 (1 samples, 0.01%)</title><rect x="99.7807%" y="485" width="0.0122%" height="15" fill="rgb(245,139,43)" fg:x="8189" fg:w="1"/><text x="100.0307%" y="495.50"></text></g><g><title>`0x7FFDA1AEE954 (1 samples, 0.01%)</title><rect x="99.7807%" y="469" width="0.0122%" height="15" fill="rgb(252,170,7)" fg:x="8189" fg:w="1"/><text x="100.0307%" y="479.50"></text></g><g><title>`0x7FFD9F568E0D (2 samples, 0.02%)</title><rect x="99.7807%" y="549" width="0.0244%" height="15" fill="rgb(231,118,14)" fg:x="8189" fg:w="2"/><text x="100.0307%" y="559.50"></text></g><g><title>`0x7FFD9F5693E2 (1 samples, 0.01%)</title><rect x="99.7929%" y="533" width="0.0122%" height="15" fill="rgb(238,83,0)" fg:x="8190" fg:w="1"/><text x="100.0429%" y="543.50"></text></g><g><title>`0x7FFD9F56A07B (1 samples, 0.01%)</title><rect x="99.7929%" y="517" width="0.0122%" height="15" fill="rgb(221,39,39)" fg:x="8190" fg:w="1"/><text x="100.0429%" y="527.50"></text></g><g><title>`0x7FFD9F56AD97 (1 samples, 0.01%)</title><rect x="99.7929%" y="501" width="0.0122%" height="15" fill="rgb(222,119,46)" fg:x="8190" fg:w="1"/><text x="100.0429%" y="511.50"></text></g><g><title>`0x7FFDA1AEE004 (1 samples, 0.01%)</title><rect x="99.7929%" y="485" width="0.0122%" height="15" fill="rgb(222,165,49)" fg:x="8190" fg:w="1"/><text x="100.0429%" y="495.50"></text></g><g><title>`0x7FFD9F568E37 (1 samples, 0.01%)</title><rect x="99.8050%" y="549" width="0.0122%" height="15" fill="rgb(219,113,52)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="559.50"></text></g><g><title>`0x7FFD9F5AD862 (1 samples, 0.01%)</title><rect x="99.8050%" y="533" width="0.0122%" height="15" fill="rgb(214,7,15)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="543.50"></text></g><g><title>`0x7FFD9F5ACBAE (1 samples, 0.01%)</title><rect x="99.8050%" y="517" width="0.0122%" height="15" fill="rgb(235,32,4)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="527.50"></text></g><g><title>`0x7FFD9F5AB01D (1 samples, 0.01%)</title><rect x="99.8050%" y="501" width="0.0122%" height="15" fill="rgb(238,90,54)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="511.50"></text></g><g><title>`0x7FFD9F5AAB9C (1 samples, 0.01%)</title><rect x="99.8050%" y="485" width="0.0122%" height="15" fill="rgb(213,208,19)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="495.50"></text></g><g><title>`0x7FFD9F548FA8 (1 samples, 0.01%)</title><rect x="99.8050%" y="469" width="0.0122%" height="15" fill="rgb(233,156,4)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="479.50"></text></g><g><title>`0x7FFDA1AEEBD4 (1 samples, 0.01%)</title><rect x="99.8050%" y="453" width="0.0122%" height="15" fill="rgb(207,194,5)" fg:x="8191" fg:w="1"/><text x="100.0550%" y="463.50"></text></g><g><title>`0x7FFDA1B2384E (9 samples, 0.11%)</title><rect x="99.7198%" y="693" width="0.1097%" height="15" fill="rgb(206,111,30)" fg:x="8184" fg:w="9"/><text x="99.9698%" y="703.50"></text></g><g><title>`0x7FFDA1A66AF4 (9 samples, 0.11%)</title><rect x="99.7198%" y="677" width="0.1097%" height="15" fill="rgb(243,70,54)" fg:x="8184" fg:w="9"/><text x="99.9698%" y="687.50"></text></g><g><title>`0x7FFDA1A673E4 (9 samples, 0.11%)</title><rect x="99.7198%" y="661" width="0.1097%" height="15" fill="rgb(242,28,8)" fg:x="8184" fg:w="9"/><text x="99.9698%" y="671.50"></text></g><g><title>`0x7FFDA1A6FBAE (4 samples, 0.05%)</title><rect x="99.7807%" y="645" width="0.0487%" height="15" fill="rgb(219,106,18)" fg:x="8189" fg:w="4"/><text x="100.0307%" y="655.50"></text></g><g><title>`0x7FFDA1A8D947 (4 samples, 0.05%)</title><rect x="99.7807%" y="629" width="0.0487%" height="15" fill="rgb(244,222,10)" fg:x="8189" fg:w="4"/><text x="100.0307%" y="639.50"></text></g><g><title>`0x7FFDA1ABD120 (4 samples, 0.05%)</title><rect x="99.7807%" y="613" width="0.0487%" height="15" fill="rgb(236,179,52)" fg:x="8189" fg:w="4"/><text x="100.0307%" y="623.50"></text></g><g><title>`0x7FFDA1ABD09A (4 samples, 0.05%)</title><rect x="99.7807%" y="597" width="0.0487%" height="15" fill="rgb(213,23,39)" fg:x="8189" fg:w="4"/><text x="100.0307%" y="607.50"></text></g><g><title>`0x7FFDA1ABD307 (4 samples, 0.05%)</title><rect x="99.7807%" y="581" width="0.0487%" height="15" fill="rgb(238,48,10)" fg:x="8189" fg:w="4"/><text x="100.0307%" y="591.50"></text></g><g><title>`0x7FFDA1A69A1D (4 samples, 0.05%)</title><rect x="99.7807%" y="565" width="0.0487%" height="15" fill="rgb(251,196,23)" fg:x="8189" fg:w="4"/><text x="100.0307%" y="575.50"></text></g><g><title>`0x7FFD9F568E3E (1 samples, 0.01%)</title><rect x="99.8172%" y="549" width="0.0122%" height="15" fill="rgb(250,152,24)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="559.50"></text></g><g><title>`0x7FFD9F5AE057 (1 samples, 0.01%)</title><rect x="99.8172%" y="533" width="0.0122%" height="15" fill="rgb(209,150,17)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="543.50"></text></g><g><title>`0x7FFD9F5C3FD3 (1 samples, 0.01%)</title><rect x="99.8172%" y="517" width="0.0122%" height="15" fill="rgb(234,202,34)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="527.50"></text></g><g><title>`0x7FFD9F5AF72C (1 samples, 0.01%)</title><rect x="99.8172%" y="501" width="0.0122%" height="15" fill="rgb(253,148,53)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="511.50"></text></g><g><title>`0x7FFD9F5BB5C2 (1 samples, 0.01%)</title><rect x="99.8172%" y="485" width="0.0122%" height="15" fill="rgb(218,129,16)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="495.50"></text></g><g><title>`0x7FFD9F5BB7E8 (1 samples, 0.01%)</title><rect x="99.8172%" y="469" width="0.0122%" height="15" fill="rgb(216,85,19)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="479.50"></text></g><g><title>`0x7FFD9F57EF77 (1 samples, 0.01%)</title><rect x="99.8172%" y="453" width="0.0122%" height="15" fill="rgb(235,228,7)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="463.50"></text></g><g><title>`0x7FFDA1A9A496 (1 samples, 0.01%)</title><rect x="99.8172%" y="437" width="0.0122%" height="15" fill="rgb(245,175,0)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="447.50"></text></g><g><title>`0x7FFDA1AED7A4 (1 samples, 0.01%)</title><rect x="99.8172%" y="421" width="0.0122%" height="15" fill="rgb(208,168,36)" fg:x="8192" fg:w="1"/><text x="100.0672%" y="431.50"></text></g><g><title>`0x7FFDA1B2388F (1 samples, 0.01%)</title><rect x="99.8294%" y="693" width="0.0122%" height="15" fill="rgb(246,171,24)" fg:x="8193" fg:w="1"/><text x="100.0794%" y="703.50"></text></g><g><title>`0x7FFDA1A800A5 (1 samples, 0.01%)</title><rect x="99.8294%" y="677" width="0.0122%" height="15" fill="rgb(215,142,24)" fg:x="8193" fg:w="1"/><text x="100.0794%" y="687.50"></text></g><g><title>`0x7FFDA1A804A8 (1 samples, 0.01%)</title><rect x="99.8294%" y="661" width="0.0122%" height="15" fill="rgb(250,187,7)" fg:x="8193" fg:w="1"/><text x="100.0794%" y="671.50"></text></g><g><title>`0x7FFDA1A822F6 (1 samples, 0.01%)</title><rect x="99.8294%" y="645" width="0.0122%" height="15" fill="rgb(228,66,33)" fg:x="8193" fg:w="1"/><text x="100.0794%" y="655.50"></text></g><g><title>`0x7FFDA1B2391D (1 samples, 0.01%)</title><rect x="99.8416%" y="693" width="0.0122%" height="15" fill="rgb(234,215,21)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="703.50"></text></g><g><title>`0x7FFDA1A670A6 (1 samples, 0.01%)</title><rect x="99.8416%" y="677" width="0.0122%" height="15" fill="rgb(222,191,20)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="687.50"></text></g><g><title>`0x7FFDA1A601FD (1 samples, 0.01%)</title><rect x="99.8416%" y="661" width="0.0122%" height="15" fill="rgb(245,79,54)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="671.50"></text></g><g><title>`0x7FFDA1A60446 (1 samples, 0.01%)</title><rect x="99.8416%" y="645" width="0.0122%" height="15" fill="rgb(240,10,37)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="655.50"></text></g><g><title>`0x7FFDA1A820F9 (1 samples, 0.01%)</title><rect x="99.8416%" y="629" width="0.0122%" height="15" fill="rgb(214,192,32)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="639.50"></text></g><g><title>`0x7FFDA1AA41ED (1 samples, 0.01%)</title><rect x="99.8416%" y="613" width="0.0122%" height="15" fill="rgb(209,36,54)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="623.50"></text></g><g><title>`0x7FFDA1AEDF64 (1 samples, 0.01%)</title><rect x="99.8416%" y="597" width="0.0122%" height="15" fill="rgb(220,10,11)" fg:x="8194" fg:w="1"/><text x="100.0916%" y="607.50"></text></g><g><title>`0x7FFDA1B23930 (1 samples, 0.01%)</title><rect x="99.8538%" y="693" width="0.0122%" height="15" fill="rgb(221,106,17)" fg:x="8195" fg:w="1"/><text x="100.1038%" y="703.50"></text></g><g><title>`0x7FFDA1ACC45D (1 samples, 0.01%)</title><rect x="99.8538%" y="677" width="0.0122%" height="15" fill="rgb(251,142,44)" fg:x="8195" fg:w="1"/><text x="100.1038%" y="687.50"></text></g><g><title>`0x7FFDA1AED844 (1 samples, 0.01%)</title><rect x="99.8538%" y="661" width="0.0122%" height="15" fill="rgb(238,13,15)" fg:x="8195" fg:w="1"/><text x="100.1038%" y="671.50"></text></g><g><title>`0x7FFDA1A679C4 (1 samples, 0.01%)</title><rect x="99.8660%" y="677" width="0.0122%" height="15" fill="rgb(208,107,27)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="687.50"></text></g><g><title>`0x7FFDA1A64EDA (1 samples, 0.01%)</title><rect x="99.8660%" y="661" width="0.0122%" height="15" fill="rgb(205,136,37)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="671.50"></text></g><g><title>`0x7FFDA07454D4 (1 samples, 0.01%)</title><rect x="99.8660%" y="645" width="0.0122%" height="15" fill="rgb(250,205,27)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="655.50"></text></g><g><title>`0x7FFDA1AA5499 (1 samples, 0.01%)</title><rect x="99.8660%" y="629" width="0.0122%" height="15" fill="rgb(210,80,43)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="639.50"></text></g><g><title>`0x7FFDA1AA5622 (1 samples, 0.01%)</title><rect x="99.8660%" y="613" width="0.0122%" height="15" fill="rgb(247,160,36)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="623.50"></text></g><g><title>`0x7FFDA1AEC440 (1 samples, 0.01%)</title><rect x="99.8660%" y="597" width="0.0122%" height="15" fill="rgb(234,13,49)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="607.50"></text></g><g><title>`0x7FFDA1AEC18D (1 samples, 0.01%)</title><rect x="99.8660%" y="581" width="0.0122%" height="15" fill="rgb(234,122,0)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="591.50"></text></g><g><title>`0x7FFDA1AEC2D8 (1 samples, 0.01%)</title><rect x="99.8660%" y="565" width="0.0122%" height="15" fill="rgb(207,146,38)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="575.50"></text></g><g><title>`0x7FFDA1B6B040 (1 samples, 0.01%)</title><rect x="99.8660%" y="549" width="0.0122%" height="15" fill="rgb(207,177,25)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="559.50"></text></g><g><title>`0x7FFDA1AAE104 (1 samples, 0.01%)</title><rect x="99.8660%" y="533" width="0.0122%" height="15" fill="rgb(211,178,42)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="543.50"></text></g><g><title>`0x7FFDA1AAE224 (1 samples, 0.01%)</title><rect x="99.8660%" y="517" width="0.0122%" height="15" fill="rgb(230,69,54)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="527.50"></text></g><g><title>`0x7FFDA1AADE6B (1 samples, 0.01%)</title><rect x="99.8660%" y="501" width="0.0122%" height="15" fill="rgb(214,135,41)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="511.50"></text></g><g><title>`0x7FFDA1AF0194 (1 samples, 0.01%)</title><rect x="99.8660%" y="485" width="0.0122%" height="15" fill="rgb(237,67,25)" fg:x="8196" fg:w="1"/><text x="100.1160%" y="495.50"></text></g><g><title>`0x7FFDA1A64AAA (2 samples, 0.02%)</title><rect x="99.8782%" y="629" width="0.0244%" height="15" fill="rgb(222,189,50)" fg:x="8197" fg:w="2"/><text x="100.1282%" y="639.50"></text></g><g><title>`0x7FFDA1A64D42 (2 samples, 0.02%)</title><rect x="99.8782%" y="613" width="0.0244%" height="15" fill="rgb(245,148,34)" fg:x="8197" fg:w="2"/><text x="100.1282%" y="623.50"></text></g><g><title>`0x7FFDA1AEDA64 (2 samples, 0.02%)</title><rect x="99.8782%" y="597" width="0.0244%" height="15" fill="rgb(222,29,6)" fg:x="8197" fg:w="2"/><text x="100.1282%" y="607.50"></text></g><g><title>`0x7FFDA1A64BCF (1 samples, 0.01%)</title><rect x="99.9025%" y="629" width="0.0122%" height="15" fill="rgb(221,189,43)" fg:x="8199" fg:w="1"/><text x="100.1525%" y="639.50"></text></g><g><title>`0x7FFDA1A5FB05 (1 samples, 0.01%)</title><rect x="99.9025%" y="613" width="0.0122%" height="15" fill="rgb(207,36,27)" fg:x="8199" fg:w="1"/><text x="100.1525%" y="623.50"></text></g><g><title>`0x7FFDA1A60943 (1 samples, 0.01%)</title><rect x="99.9025%" y="597" width="0.0122%" height="15" fill="rgb(217,90,24)" fg:x="8199" fg:w="1"/><text x="100.1525%" y="607.50"></text></g><g><title>`0x7FFDA1A62296 (1 samples, 0.01%)</title><rect x="99.9025%" y="581" width="0.0122%" height="15" fill="rgb(224,66,35)" fg:x="8199" fg:w="1"/><text x="100.1525%" y="591.50"></text></g><g><title>`0x7FFDA1A6354A (1 samples, 0.01%)</title><rect x="99.9025%" y="565" width="0.0122%" height="15" fill="rgb(221,13,50)" fg:x="8199" fg:w="1"/><text x="100.1525%" y="575.50"></text></g><g><title>`0x7FFDA1AEDF64 (1 samples, 0.01%)</title><rect x="99.9025%" y="549" width="0.0122%" height="15" fill="rgb(236,68,49)" fg:x="8199" fg:w="1"/><text x="100.1525%" y="559.50"></text></g><g><title>`0x7FFDA1B23BED (5 samples, 0.06%)</title><rect x="99.8660%" y="693" width="0.0609%" height="15" fill="rgb(229,146,28)" fg:x="8196" fg:w="5"/><text x="100.1160%" y="703.50"></text></g><g><title>`0x7FFDA1A67B29 (4 samples, 0.05%)</title><rect x="99.8782%" y="677" width="0.0487%" height="15" fill="rgb(225,31,38)" fg:x="8197" fg:w="4"/><text x="100.1282%" y="687.50"></text></g><g><title>`0x7FFDA1A688A8 (4 samples, 0.05%)</title><rect x="99.8782%" y="661" width="0.0487%" height="15" fill="rgb(250,208,3)" fg:x="8197" fg:w="4"/><text x="100.1282%" y="671.50"></text></g><g><title>`0x7FFDA1A64479 (4 samples, 0.05%)</title><rect x="99.8782%" y="645" width="0.0487%" height="15" fill="rgb(246,54,23)" fg:x="8197" fg:w="4"/><text x="100.1282%" y="655.50"></text></g><g><title>`0x7FFDA1A64C14 (1 samples, 0.01%)</title><rect x="99.9147%" y="629" width="0.0122%" height="15" fill="rgb(243,76,11)" fg:x="8200" fg:w="1"/><text x="100.1647%" y="639.50"></text></g><g><title>`0x7FFDA1A67B29 (1 samples, 0.01%)</title><rect x="99.9147%" y="613" width="0.0122%" height="15" fill="rgb(245,21,50)" fg:x="8200" fg:w="1"/><text x="100.1647%" y="623.50"></text></g><g><title>`0x7FFDA1A67EC7 (1 samples, 0.01%)</title><rect x="99.9147%" y="597" width="0.0122%" height="15" fill="rgb(228,9,43)" fg:x="8200" fg:w="1"/><text x="100.1647%" y="607.50"></text></g><g><title>`0x7FFDA1A6A7DD (1 samples, 0.01%)</title><rect x="99.9147%" y="581" width="0.0122%" height="15" fill="rgb(208,100,47)" fg:x="8200" fg:w="1"/><text x="100.1647%" y="591.50"></text></g><g><title>`0x7FFDA1A6D776 (1 samples, 0.01%)</title><rect x="99.9147%" y="565" width="0.0122%" height="15" fill="rgb(232,26,8)" fg:x="8200" fg:w="1"/><text x="100.1647%" y="575.50"></text></g><g><title>`0x7FFDA1B23C16 (1 samples, 0.01%)</title><rect x="99.9269%" y="693" width="0.0122%" height="15" fill="rgb(216,166,38)" fg:x="8201" fg:w="1"/><text x="100.1769%" y="703.50"></text></g><g><title>`0x7FFDA1A8D8FB (1 samples, 0.01%)</title><rect x="99.9269%" y="677" width="0.0122%" height="15" fill="rgb(251,202,51)" fg:x="8201" fg:w="1"/><text x="100.1769%" y="687.50"></text></g><g><title>`0x7FFDA1A8DBB4 (1 samples, 0.01%)</title><rect x="99.9269%" y="661" width="0.0122%" height="15" fill="rgb(254,216,34)" fg:x="8201" fg:w="1"/><text x="100.1769%" y="671.50"></text></g><g><title>`0x7FFDA1A8DCBA (1 samples, 0.01%)</title><rect x="99.9269%" y="645" width="0.0122%" height="15" fill="rgb(251,32,27)" fg:x="8201" fg:w="1"/><text x="100.1769%" y="655.50"></text></g><g><title>`0x7FFDA1AC4618 (1 samples, 0.01%)</title><rect x="99.9269%" y="629" width="0.0122%" height="15" fill="rgb(208,127,28)" fg:x="8201" fg:w="1"/><text x="100.1769%" y="639.50"></text></g><g><title>`0x7FFDA1AEDEE4 (1 samples, 0.01%)</title><rect x="99.9269%" y="613" width="0.0122%" height="15" fill="rgb(224,137,22)" fg:x="8201" fg:w="1"/><text x="100.1769%" y="623.50"></text></g><g><title>`0x7FFDA1ABD09A (1 samples, 0.01%)</title><rect x="99.9391%" y="661" width="0.0122%" height="15" fill="rgb(254,70,32)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="671.50"></text></g><g><title>`0x7FFDA1ABD307 (1 samples, 0.01%)</title><rect x="99.9391%" y="645" width="0.0122%" height="15" fill="rgb(229,75,37)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="655.50"></text></g><g><title>`0x7FFDA1A69A1D (1 samples, 0.01%)</title><rect x="99.9391%" y="629" width="0.0122%" height="15" fill="rgb(252,64,23)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="639.50"></text></g><g><title>`0x7FFD9F8F8C5E (1 samples, 0.01%)</title><rect x="99.9391%" y="613" width="0.0122%" height="15" fill="rgb(232,162,48)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="623.50"></text></g><g><title>`0x7FFD9F8D85A4 (1 samples, 0.01%)</title><rect x="99.9391%" y="597" width="0.0122%" height="15" fill="rgb(246,160,12)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="607.50"></text></g><g><title>`0x7FFD9F8F9032 (1 samples, 0.01%)</title><rect x="99.9391%" y="581" width="0.0122%" height="15" fill="rgb(247,166,0)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="591.50"></text></g><g><title>`0x7FFDA1AED7A4 (1 samples, 0.01%)</title><rect x="99.9391%" y="565" width="0.0122%" height="15" fill="rgb(249,219,21)" fg:x="8202" fg:w="1"/><text x="100.1891%" y="575.50"></text></g><g><title>`0x7FFD9F967704 (1 samples, 0.01%)</title><rect x="99.9513%" y="581" width="0.0122%" height="15" fill="rgb(205,209,3)" fg:x="8203" fg:w="1"/><text x="100.2013%" y="591.50"></text></g><g><title>`0x7FFD9F99968A (1 samples, 0.01%)</title><rect x="99.9513%" y="565" width="0.0122%" height="15" fill="rgb(243,44,1)" fg:x="8203" fg:w="1"/><text x="100.2013%" y="575.50"></text></g><g><title>`0x7FFD9F999D6B (1 samples, 0.01%)</title><rect x="99.9513%" y="549" width="0.0122%" height="15" fill="rgb(206,159,16)" fg:x="8203" fg:w="1"/><text x="100.2013%" y="559.50"></text></g><g><title>`0x7FFD9F95710E (1 samples, 0.01%)</title><rect x="99.9634%" y="565" width="0.0122%" height="15" fill="rgb(244,77,30)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="575.50"></text></g><g><title>`0x7FFD9F957214 (1 samples, 0.01%)</title><rect x="99.9634%" y="549" width="0.0122%" height="15" fill="rgb(218,69,12)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="559.50"></text></g><g><title>`0x7FFD9F9576CC (1 samples, 0.01%)</title><rect x="99.9634%" y="533" width="0.0122%" height="15" fill="rgb(212,87,7)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="543.50"></text></g><g><title>`0x7FFD9F957980 (1 samples, 0.01%)</title><rect x="99.9634%" y="517" width="0.0122%" height="15" fill="rgb(245,114,25)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="527.50"></text></g><g><title>`0x7FFD9F957B11 (1 samples, 0.01%)</title><rect x="99.9634%" y="501" width="0.0122%" height="15" fill="rgb(210,61,42)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="511.50"></text></g><g><title>`0x7FFD9F957F07 (1 samples, 0.01%)</title><rect x="99.9634%" y="485" width="0.0122%" height="15" fill="rgb(211,52,33)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="495.50"></text></g><g><title>`0x7FFD9F958137 (1 samples, 0.01%)</title><rect x="99.9634%" y="469" width="0.0122%" height="15" fill="rgb(234,58,33)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="479.50"></text></g><g><title>`0x7FFD9F532E2B (1 samples, 0.01%)</title><rect x="99.9634%" y="453" width="0.0122%" height="15" fill="rgb(220,115,36)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="463.50"></text></g><g><title>`0x7FFD9F525A79 (1 samples, 0.01%)</title><rect x="99.9634%" y="437" width="0.0122%" height="15" fill="rgb(243,153,54)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="447.50"></text></g><g><title>`0x7FFD9F525D12 (1 samples, 0.01%)</title><rect x="99.9634%" y="421" width="0.0122%" height="15" fill="rgb(251,47,18)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="431.50"></text></g><g><title>`0x7FFDA1AED7A4 (1 samples, 0.01%)</title><rect x="99.9634%" y="405" width="0.0122%" height="15" fill="rgb(242,102,42)" fg:x="8204" fg:w="1"/><text x="100.2134%" y="415.50"></text></g><g><title>`0x7FFDA1B23D32 (4 samples, 0.05%)</title><rect x="99.9391%" y="693" width="0.0487%" height="15" fill="rgb(234,31,38)" fg:x="8202" fg:w="4"/><text x="100.1891%" y="703.50"></text></g><g><title>`0x7FFDA1ABD120 (4 samples, 0.05%)</title><rect x="99.9391%" y="677" width="0.0487%" height="15" fill="rgb(221,117,51)" fg:x="8202" fg:w="4"/><text x="100.1891%" y="687.50"></text></g><g><title>`0x7FFDA1ABD120 (3 samples, 0.04%)</title><rect x="99.9513%" y="661" width="0.0366%" height="15" fill="rgb(212,20,18)" fg:x="8203" fg:w="3"/><text x="100.2013%" y="671.50"></text></g><g><title>`0x7FFDA1ABD09A (3 samples, 0.04%)</title><rect x="99.9513%" y="645" width="0.0366%" height="15" fill="rgb(245,133,36)" fg:x="8203" fg:w="3"/><text x="100.2013%" y="655.50"></text></g><g><title>`0x7FFDA1ABD307 (3 samples, 0.04%)</title><rect x="99.9513%" y="629" width="0.0366%" height="15" fill="rgb(212,6,19)" fg:x="8203" fg:w="3"/><text x="100.2013%" y="639.50"></text></g><g><title>`0x7FFDA1A69A1D (3 samples, 0.04%)</title><rect x="99.9513%" y="613" width="0.0366%" height="15" fill="rgb(218,1,36)" fg:x="8203" fg:w="3"/><text x="100.2013%" y="623.50"></text></g><g><title>`0x7FFD9F966216 (3 samples, 0.04%)</title><rect x="99.9513%" y="597" width="0.0366%" height="15" fill="rgb(246,84,54)" fg:x="8203" fg:w="3"/><text x="100.2013%" y="607.50"></text></g><g><title>`0x7FFD9F967730 (2 samples, 0.02%)</title><rect x="99.9634%" y="581" width="0.0244%" height="15" fill="rgb(242,110,6)" fg:x="8204" fg:w="2"/><text x="100.2134%" y="591.50"></text></g><g><title>`0x7FFD9F96F9C9 (1 samples, 0.01%)</title><rect x="99.9756%" y="565" width="0.0122%" height="15" fill="rgb(214,47,5)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="575.50"></text></g><g><title>`0x7FFD9F96FA24 (1 samples, 0.01%)</title><rect x="99.9756%" y="549" width="0.0122%" height="15" fill="rgb(218,159,25)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="559.50"></text></g><g><title>`0x7FFD9F95DC74 (1 samples, 0.01%)</title><rect x="99.9756%" y="533" width="0.0122%" height="15" fill="rgb(215,211,28)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="543.50"></text></g><g><title>`0x7FFD9F95DD3E (1 samples, 0.01%)</title><rect x="99.9756%" y="517" width="0.0122%" height="15" fill="rgb(238,59,32)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="527.50"></text></g><g><title>`0x7FFDA1A7B44D (1 samples, 0.01%)</title><rect x="99.9756%" y="501" width="0.0122%" height="15" fill="rgb(226,82,3)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="511.50"></text></g><g><title>`0x7FFDA1A7D37A (1 samples, 0.01%)</title><rect x="99.9756%" y="485" width="0.0122%" height="15" fill="rgb(240,164,32)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="495.50"></text></g><g><title>`0x7FFDA1A94D2F (1 samples, 0.01%)</title><rect x="99.9756%" y="469" width="0.0122%" height="15" fill="rgb(232,46,7)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="479.50"></text></g><g><title>`0x7FFDA1A94B80 (1 samples, 0.01%)</title><rect x="99.9756%" y="453" width="0.0122%" height="15" fill="rgb(229,129,53)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="463.50"></text></g><g><title>`0x7FFDA1A94810 (1 samples, 0.01%)</title><rect x="99.9756%" y="437" width="0.0122%" height="15" fill="rgb(234,188,29)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="447.50"></text></g><g><title>`0x7FFDA1A94739 (1 samples, 0.01%)</title><rect x="99.9756%" y="421" width="0.0122%" height="15" fill="rgb(246,141,4)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="431.50"></text></g><g><title>`0x7FFDA1A938C0 (1 samples, 0.01%)</title><rect x="99.9756%" y="405" width="0.0122%" height="15" fill="rgb(229,23,39)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="415.50"></text></g><g><title>`0x7FFDA1ACD622 (1 samples, 0.01%)</title><rect x="99.9756%" y="389" width="0.0122%" height="15" fill="rgb(206,12,3)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="399.50"></text></g><g><title>`0x7FFDA1AED7A4 (1 samples, 0.01%)</title><rect x="99.9756%" y="373" width="0.0122%" height="15" fill="rgb(252,226,20)" fg:x="8205" fg:w="1"/><text x="100.2256%" y="383.50"></text></g><g><title>all (8,207 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(216,123,35)" fg:x="0" fg:w="8207"/><text x="0.2500%" y="767.50"></text></g><g><title>`0x7FFDA1AC5C2E (29 samples, 0.35%)</title><rect x="99.6466%" y="741" width="0.3534%" height="15" fill="rgb(212,68,40)" fg:x="8178" fg:w="29"/><text x="99.8966%" y="751.50"></text></g><g><title>`0x7FFDA1AC5C83 (28 samples, 0.34%)</title><rect x="99.6588%" y="725" width="0.3412%" height="15" fill="rgb(254,125,32)" fg:x="8179" fg:w="28"/><text x="99.9088%" y="735.50"></text></g><g><title>`0x7FFDA1AC5DFB (28 samples, 0.34%)</title><rect x="99.6588%" y="709" width="0.3412%" height="15" fill="rgb(253,97,22)" fg:x="8179" fg:w="28"/><text x="99.9088%" y="719.50"></text></g><g><title>`0x7FFDA1B23E3D (1 samples, 0.01%)</title><rect x="99.9878%" y="693" width="0.0122%" height="15" fill="rgb(241,101,14)" fg:x="8206" fg:w="1"/><text x="100.2378%" y="703.50"></text></g><g><title>`0x7FFDA1A69AFF (1 samples, 0.01%)</title><rect x="99.9878%" y="677" width="0.0122%" height="15" fill="rgb(238,103,29)" fg:x="8206" fg:w="1"/><text x="100.2378%" y="687.50"></text></g><g><title>`0x7FFDA1A69A1D (1 samples, 0.01%)</title><rect x="99.9878%" y="661" width="0.0122%" height="15" fill="rgb(233,195,47)" fg:x="8206" fg:w="1"/><text x="100.2378%" y="671.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread_local_key::on_tls_callback (1 samples, 0.01%)</title><rect x="99.9878%" y="645" width="0.0122%" height="15" fill="rgb(246,218,30)" fg:x="8206" fg:w="1"/><text x="100.2378%" y="655.50"></text></g></svg></svg>