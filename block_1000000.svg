<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="725346"><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (116 samples, 0.02%)</title><rect x="0.0022%" y="149" width="0.0160%" height="15" fill="rgb(227,0,7)" fg:x="16" fg:w="116"/><text x="0.2522%" y="159.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread::Thread::new (116 samples, 0.02%)</title><rect x="0.0022%" y="133" width="0.0160%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="116"/><text x="0.2522%" y="143.50"></text></g><g><title>`0x7FFDA074B91D (114 samples, 0.02%)</title><rect x="0.0025%" y="117" width="0.0157%" height="15" fill="rgb(221,193,54)" fg:x="18" fg:w="114"/><text x="0.2525%" y="127.50"></text></g><g><title>`0x7FFD9F54BBAF (113 samples, 0.02%)</title><rect x="0.0026%" y="101" width="0.0156%" height="15" fill="rgb(248,212,6)" fg:x="19" fg:w="113"/><text x="0.2526%" y="111.50"></text></g><g><title>`0x7FFDA1AEED94 (113 samples, 0.02%)</title><rect x="0.0026%" y="85" width="0.0156%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="113"/><text x="0.2526%" y="95.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::clear (118 samples, 0.02%)</title><rect x="0.0022%" y="229" width="0.0163%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="118"/><text x="0.2522%" y="239.50"></text></g><g><title>1brc.exe`std::thread::spawn&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (118 samples, 0.02%)</title><rect x="0.0022%" y="213" width="0.0163%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="118"/><text x="0.2522%" y="223.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn (118 samples, 0.02%)</title><rect x="0.0022%" y="197" width="0.0163%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="118"/><text x="0.2522%" y="207.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked (118 samples, 0.02%)</title><rect x="0.0022%" y="181" width="0.0163%" height="15" fill="rgb(218,30,26)" fg:x="16" fg:w="118"/><text x="0.2522%" y="191.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, 1brc::input_multitreaded::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (118 samples, 0.02%)</title><rect x="0.0022%" y="165" width="0.0163%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="118"/><text x="0.2522%" y="175.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded(std::collections::hash::map::HashMap (228 samples, 0.03%)</title><rect x="0.0015%" y="245" width="0.0314%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="228"/><text x="0.2515%" y="255.50"></text></g><g><title>1brc.exe`invoke_main() (241 samples, 0.03%)</title><rect x="0.0010%" y="421" width="0.0332%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="241"/><text x="0.2510%" y="431.50"></text></g><g><title>1brc.exe`main (241 samples, 0.03%)</title><rect x="0.0010%" y="405" width="0.0332%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="241"/><text x="0.2510%" y="415.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal (241 samples, 0.03%)</title><rect x="0.0010%" y="389" width="0.0332%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="241"/><text x="0.2510%" y="399.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (240 samples, 0.03%)</title><rect x="0.0011%" y="373" width="0.0331%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="240"/><text x="0.2511%" y="383.50"></text></g><g><title>1brc.exe`std::panicking::try (240 samples, 0.03%)</title><rect x="0.0011%" y="357" width="0.0331%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="240"/><text x="0.2511%" y="367.50"></text></g><g><title>1brc.exe`std::panicking::try::do_call (240 samples, 0.03%)</title><rect x="0.0011%" y="341" width="0.0331%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="240"/><text x="0.2511%" y="351.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$2 (240 samples, 0.03%)</title><rect x="0.0011%" y="325" width="0.0331%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="240"/><text x="0.2511%" y="335.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (240 samples, 0.03%)</title><rect x="0.0011%" y="309" width="0.0331%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="240"/><text x="0.2511%" y="319.50"></text></g><g><title>1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (240 samples, 0.03%)</title><rect x="0.0011%" y="293" width="0.0331%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="240"/><text x="0.2511%" y="303.50"></text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (240 samples, 0.03%)</title><rect x="0.0011%" y="277" width="0.0331%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="240"/><text x="0.2511%" y="287.50"></text></g><g><title>1brc.exe`1brc::main (240 samples, 0.03%)</title><rect x="0.0011%" y="261" width="0.0331%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="240"/><text x="0.2511%" y="271.50"></text></g><g><title>1brc.exe`__scrt_common_main_seh() (251 samples, 0.03%)</title><rect x="0.0010%" y="437" width="0.0346%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="251"/><text x="0.2510%" y="447.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity (78 samples, 0.01%)</title><rect x="4.0112%" y="229" width="0.0108%" height="15" fill="rgb(247,18,42)" fg:x="29095" fg:w="78"/><text x="4.2612%" y="239.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (78 samples, 0.01%)</title><rect x="4.0112%" y="213" width="0.0108%" height="15" fill="rgb(241,131,45)" fg:x="29095" fg:w="78"/><text x="4.2612%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (78 samples, 0.01%)</title><rect x="4.0112%" y="197" width="0.0108%" height="15" fill="rgb(249,31,29)" fg:x="29095" fg:w="78"/><text x="4.2612%" y="207.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (78 samples, 0.01%)</title><rect x="4.0112%" y="181" width="0.0108%" height="15" fill="rgb(225,111,53)" fg:x="29095" fg:w="78"/><text x="4.2612%" y="191.50"></text></g><g><title>`0x7FFDA1A7B44D (77 samples, 0.01%)</title><rect x="4.0113%" y="165" width="0.0106%" height="15" fill="rgb(238,160,17)" fg:x="29096" fg:w="77"/><text x="4.2613%" y="175.50"></text></g><g><title>1brc.exe`core::num::impl$2::checked_add (1,156 samples, 0.16%)</title><rect x="4.0219%" y="229" width="0.1594%" height="15" fill="rgb(214,148,48)" fg:x="29173" fg:w="1156"/><text x="4.2719%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$2::overflowing_add (412 samples, 0.06%)</title><rect x="4.1245%" y="213" width="0.0568%" height="15" fill="rgb(232,36,49)" fg:x="29917" fg:w="412"/><text x="4.3745%" y="223.50"></text></g><g><title>`0x7FFDA1A59B1A (124 samples, 0.02%)</title><rect x="4.1813%" y="165" width="0.0171%" height="15" fill="rgb(209,103,24)" fg:x="30329" fg:w="124"/><text x="4.4313%" y="175.50"></text></g><g><title>`0x7FFDA1AED924 (124 samples, 0.02%)</title><rect x="4.1813%" y="149" width="0.0171%" height="15" fill="rgb(229,88,8)" fg:x="30329" fg:w="124"/><text x="4.4313%" y="159.50"></text></g><g><title>`0x7FFDA1A76F37 (125 samples, 0.02%)</title><rect x="4.1813%" y="181" width="0.0172%" height="15" fill="rgb(213,181,19)" fg:x="30329" fg:w="125"/><text x="4.4313%" y="191.50"></text></g><g><title>`0x7FFDA1A75B74 (127 samples, 0.02%)</title><rect x="4.1813%" y="197" width="0.0175%" height="15" fill="rgb(254,191,54)" fg:x="30329" fg:w="127"/><text x="4.4313%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(std::io::buffered::bufreader::BufReader (134 samples, 0.02%)</title><rect x="4.1813%" y="229" width="0.0185%" height="15" fill="rgb(241,83,37)" fg:x="30329" fg:w="134"/><text x="4.4313%" y="239.50"></text></g><g><title>`0x7FFDA1A747B1 (134 samples, 0.02%)</title><rect x="4.1813%" y="213" width="0.0185%" height="15" fill="rgb(233,36,39)" fg:x="30329" fg:w="134"/><text x="4.4313%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (95 samples, 0.01%)</title><rect x="4.1998%" y="229" width="0.0131%" height="15" fill="rgb(226,3,54)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (95 samples, 0.01%)</title><rect x="4.1998%" y="213" width="0.0131%" height="15" fill="rgb(245,192,40)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (95 samples, 0.01%)</title><rect x="4.1998%" y="197" width="0.0131%" height="15" fill="rgb(238,167,29)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (95 samples, 0.01%)</title><rect x="4.1998%" y="181" width="0.0131%" height="15" fill="rgb(232,182,51)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="191.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (95 samples, 0.01%)</title><rect x="4.1998%" y="165" width="0.0131%" height="15" fill="rgb(231,60,39)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="175.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::Vec (95 samples, 0.01%)</title><rect x="4.1998%" y="149" width="0.0131%" height="15" fill="rgb(208,69,12)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="159.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (95 samples, 0.01%)</title><rect x="4.1998%" y="133" width="0.0131%" height="15" fill="rgb(235,93,37)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="143.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (95 samples, 0.01%)</title><rect x="4.1998%" y="117" width="0.0131%" height="15" fill="rgb(213,116,39)" fg:x="30463" fg:w="95"/><text x="4.4498%" y="127.50"></text></g><g><title>`0x7FFD9F541075 (91 samples, 0.01%)</title><rect x="4.2003%" y="101" width="0.0125%" height="15" fill="rgb(222,207,29)" fg:x="30467" fg:w="91"/><text x="4.4503%" y="111.50"></text></g><g><title>`0x7FFDA1AED744 (90 samples, 0.01%)</title><rect x="4.2005%" y="85" width="0.0124%" height="15" fill="rgb(206,96,30)" fg:x="30468" fg:w="90"/><text x="4.4505%" y="95.50"></text></g><g><title>1brc.exe`core::slice::impl$0::iter(ref$&lt;slice2$ (8,278 samples, 1.14%)</title><rect x="4.2129%" y="213" width="1.1412%" height="15" fill="rgb(218,138,4)" fg:x="30558" fg:w="8278"/><text x="4.4629%" y="223.50"></text></g><g><title>1brc.exe`core::slice::iter::Iter&lt;u8&gt;::new(ref$&lt;slice2$ (8,278 samples, 1.14%)</title><rect x="4.2129%" y="197" width="1.1412%" height="15" fill="rgb(250,191,14)" fg:x="30558" fg:w="8278"/><text x="4.4629%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::add (8,278 samples, 1.14%)</title><rect x="4.2129%" y="181" width="1.1412%" height="15" fill="rgb(239,60,40)" fg:x="30558" fg:w="8278"/><text x="4.4629%" y="191.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (9,080 samples, 1.25%)</title><rect x="5.3541%" y="213" width="1.2518%" height="15" fill="rgb(206,27,48)" fg:x="38836" fg:w="9080"/><text x="5.6041%" y="223.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (9,080 samples, 1.25%)</title><rect x="5.3541%" y="197" width="1.2518%" height="15" fill="rgb(225,35,8)" fg:x="38836" fg:w="9080"/><text x="5.6041%" y="207.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$1 (3,261 samples, 0.45%)</title><rect x="10.8919%" y="197" width="0.4496%" height="15" fill="rgb(250,213,24)" fg:x="79004" fg:w="3261"/><text x="11.1419%" y="207.50"></text></g><g><title>1brc.exe`core::slice::impl$0::rsplit_once(ref$&lt;slice2$ (63,633 samples, 8.77%)</title><rect x="4.2129%" y="229" width="8.7728%" height="15" fill="rgb(247,123,22)" fg:x="30558" fg:w="63633"/><text x="4.4629%" y="239.50">1brc.exe`cor..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::rposition(core::slice::iter::Iter (46,275 samples, 6.38%)</title><rect x="6.6060%" y="213" width="6.3797%" height="15" fill="rgb(231,138,38)" fg:x="47916" fg:w="46275"/><text x="6.8560%" y="223.50">1brc.exe..</text></g><g><title>1brc.exe`core::slice::iter::impl$182::next_back(core::slice::iter::Iter (11,926 samples, 1.64%)</title><rect x="11.3415%" y="197" width="1.6442%" height="15" fill="rgb(231,145,46)" fg:x="82265" fg:w="11926"/><text x="11.5915%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (11,034 samples, 1.52%)</title><rect x="11.4645%" y="181" width="1.5212%" height="15" fill="rgb(251,118,11)" fg:x="83157" fg:w="11034"/><text x="11.7145%" y="191.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multitreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;u8&gt;,1brc::input_multitreaded::closure$0::closure_env$3&gt; &gt;*, tuple$ (36,801 samples, 5.07%)</title><rect x="15.1364%" y="181" width="5.0736%" height="15" fill="rgb(217,147,25)" fg:x="109791" fg:w="36801"/><text x="15.3864%" y="191.50">1brc.e..</text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$2 (3,286 samples, 0.45%)</title><rect x="19.7569%" y="165" width="0.4530%" height="15" fill="rgb(247,81,37)" fg:x="143306" fg:w="3286"/><text x="20.0069%" y="175.50"></text></g><g><title>1brc.exe`core::num::impl$11::unchecked_add (2,510 samples, 0.35%)</title><rect x="20.2099%" y="181" width="0.3460%" height="15" fill="rgb(209,12,38)" fg:x="146592" fg:w="2510"/><text x="20.4599%" y="191.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u8&gt;,1brc::input_multitreaded::closure$0::closure_env$2&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (55,307 samples, 7.62%)</title><rect x="12.9857%" y="213" width="7.6249%" height="15" fill="rgb(227,1,9)" fg:x="94191" fg:w="55307"/><text x="13.2357%" y="223.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multitreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (55,307 samples, 7.62%)</title><rect x="12.9857%" y="197" width="7.6249%" height="15" fill="rgb(248,47,43)" fg:x="94191" fg:w="55307"/><text x="13.2357%" y="207.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (396 samples, 0.05%)</title><rect x="20.5560%" y="181" width="0.0546%" height="15" fill="rgb(221,10,30)" fg:x="149102" fg:w="396"/><text x="20.8060%" y="191.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (57,442 samples, 7.92%)</title><rect x="12.9857%" y="229" width="7.9193%" height="15" fill="rgb(210,229,1)" fg:x="94191" fg:w="57442"/><text x="13.2357%" y="239.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (2,135 samples, 0.29%)</title><rect x="20.6106%" y="213" width="0.2943%" height="15" fill="rgb(222,148,37)" fg:x="149498" fg:w="2135"/><text x="20.8606%" y="223.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (2,135 samples, 0.29%)</title><rect x="20.6106%" y="197" width="0.2943%" height="15" fill="rgb(234,67,33)" fg:x="149498" fg:w="2135"/><text x="20.8606%" y="207.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (2,135 samples, 0.29%)</title><rect x="20.6106%" y="181" width="0.2943%" height="15" fill="rgb(247,98,35)" fg:x="149498" fg:w="2135"/><text x="20.8606%" y="191.50"></text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (2,135 samples, 0.29%)</title><rect x="20.6106%" y="165" width="0.2943%" height="15" fill="rgb(247,138,52)" fg:x="149498" fg:w="2135"/><text x="20.8606%" y="175.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (27,529 samples, 3.80%)</title><rect x="21.7280%" y="213" width="3.7953%" height="15" fill="rgb(213,79,30)" fg:x="157603" fg:w="27529"/><text x="21.9780%" y="223.50">1brc..</text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (27,529 samples, 3.80%)</title><rect x="21.7280%" y="197" width="3.7953%" height="15" fill="rgb(246,177,23)" fg:x="157603" fg:w="27529"/><text x="21.9780%" y="207.50">1brc..</text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (27,529 samples, 3.80%)</title><rect x="21.7280%" y="181" width="3.7953%" height="15" fill="rgb(230,62,27)" fg:x="157603" fg:w="27529"/><text x="21.9780%" y="191.50">1brc..</text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (27,529 samples, 3.80%)</title><rect x="21.7280%" y="165" width="3.7953%" height="15" fill="rgb(216,154,8)" fg:x="157603" fg:w="27529"/><text x="21.9780%" y="175.50">1brc..</text></g><g><title>1brc.exe`core::slice::iter::impl$16::next::closure$0(core::slice::iter::impl$16::next::closure_env$0 (772 samples, 0.11%)</title><rect x="32.4659%" y="197" width="0.1064%" height="15" fill="rgb(244,35,45)" fg:x="235490" fg:w="772"/><text x="32.7159%" y="207.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$0 (772 samples, 0.11%)</title><rect x="32.4659%" y="181" width="0.1064%" height="15" fill="rgb(251,115,12)" fg:x="235490" fg:w="772"/><text x="32.7159%" y="191.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$16::next(core::slice::iter::Split (100,891 samples, 13.91%)</title><rect x="20.9049%" y="229" width="13.9094%" height="15" fill="rgb(240,54,50)" fg:x="151633" fg:w="100891"/><text x="21.1549%" y="239.50">1brc.exe`core::slice:..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::position(core::slice::iter::Iter&lt;u8&gt;*, core::slice::iter::impl$16::next::closure_env$0 (67,392 samples, 9.29%)</title><rect x="25.5233%" y="213" width="9.2910%" height="15" fill="rgb(233,84,52)" fg:x="185132" fg:w="67392"/><text x="25.7733%" y="223.50">1brc.exe`core..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (16,262 samples, 2.24%)</title><rect x="32.5723%" y="197" width="2.2420%" height="15" fill="rgb(207,117,47)" fg:x="236262" fg:w="16262"/><text x="32.8223%" y="207.50">1..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (8,712 samples, 1.20%)</title><rect x="33.6132%" y="181" width="1.2011%" height="15" fill="rgb(249,43,39)" fg:x="243812" fg:w="8712"/><text x="33.8632%" y="191.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;::expect(enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;, ref$ (627 samples, 0.09%)</title><rect x="34.8143%" y="229" width="0.0864%" height="15" fill="rgb(209,38,44)" fg:x="252524" fg:w="627"/><text x="35.0643%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$11::to_ne_bytes (2,491 samples, 0.34%)</title><rect x="38.3724%" y="101" width="0.3434%" height="15" fill="rgb(236,212,23)" fg:x="278333" fg:w="2491"/><text x="38.6224%" y="111.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_length_prefix (3,661 samples, 0.50%)</title><rect x="38.3724%" y="133" width="0.5047%" height="15" fill="rgb(242,79,21)" fg:x="278333" fg:w="3661"/><text x="38.6224%" y="143.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_usize (3,661 samples, 0.50%)</title><rect x="38.3724%" y="117" width="0.5047%" height="15" fill="rgb(211,96,35)" fg:x="278333" fg:w="3661"/><text x="38.6224%" y="127.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1,170 samples, 0.16%)</title><rect x="38.7159%" y="101" width="0.1613%" height="15" fill="rgb(253,215,40)" fg:x="280824" fg:w="1170"/><text x="38.9659%" y="111.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1,170 samples, 0.16%)</title><rect x="38.7159%" y="85" width="0.1613%" height="15" fill="rgb(211,81,21)" fg:x="280824" fg:w="1170"/><text x="38.9659%" y="95.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (5,351 samples, 0.74%)</title><rect x="43.8319%" y="53" width="0.7377%" height="15" fill="rgb(208,190,38)" fg:x="317933" fg:w="5351"/><text x="44.0819%" y="63.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (15,087 samples, 2.08%)</title><rect x="42.9199%" y="69" width="2.0800%" height="15" fill="rgb(235,213,38)" fg:x="311318" fg:w="15087"/><text x="43.1699%" y="79.50">1..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (3,121 samples, 0.43%)</title><rect x="44.5696%" y="53" width="0.4303%" height="15" fill="rgb(237,122,38)" fg:x="323284" fg:w="3121"/><text x="44.8196%" y="63.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (6,622 samples, 0.91%)</title><rect x="44.9999%" y="69" width="0.9129%" height="15" fill="rgb(244,218,35)" fg:x="326405" fg:w="6622"/><text x="45.2499%" y="79.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (55,210 samples, 7.61%)</title><rect x="38.3724%" y="165" width="7.6115%" height="15" fill="rgb(240,68,47)" fg:x="278333" fg:w="55210"/><text x="38.6224%" y="175.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (55,210 samples, 7.61%)</title><rect x="38.3724%" y="149" width="7.6115%" height="15" fill="rgb(210,16,53)" fg:x="278333" fg:w="55210"/><text x="38.6224%" y="159.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (51,549 samples, 7.11%)</title><rect x="38.8772%" y="133" width="7.1068%" height="15" fill="rgb(235,124,12)" fg:x="281994" fg:w="51549"/><text x="39.1272%" y="143.50">1brc.exe`c..</text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (51,549 samples, 7.11%)</title><rect x="38.8772%" y="117" width="7.1068%" height="15" fill="rgb(224,169,11)" fg:x="281994" fg:w="51549"/><text x="39.1272%" y="127.50">1brc.exe`s..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (51,549 samples, 7.11%)</title><rect x="38.8772%" y="101" width="7.1068%" height="15" fill="rgb(250,166,2)" fg:x="281994" fg:w="51549"/><text x="39.1272%" y="111.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (49,540 samples, 6.83%)</title><rect x="39.1541%" y="85" width="6.8298%" height="15" fill="rgb(242,216,29)" fg:x="284003" fg:w="49540"/><text x="39.4041%" y="95.50">1brc.exe`..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (516 samples, 0.07%)</title><rect x="45.9128%" y="69" width="0.0711%" height="15" fill="rgb(230,116,27)" fg:x="333027" fg:w="516"/><text x="46.1628%" y="79.50"></text></g><g><title>1brc.exe`std::hash::random::impl$1::build_hasher (13,393 samples, 1.85%)</title><rect x="45.9840%" y="165" width="1.8464%" height="15" fill="rgb(228,99,48)" fg:x="333543" fg:w="13393"/><text x="46.2340%" y="175.50">1..</text></g><g><title>1brc.exe`core::hash::sip::SipHasher13::new_with_keys (6,525 samples, 0.90%)</title><rect x="46.9308%" y="149" width="0.8996%" height="15" fill="rgb(253,11,6)" fg:x="340411" fg:w="6525"/><text x="47.1808%" y="159.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (6,525 samples, 0.90%)</title><rect x="46.9308%" y="133" width="0.8996%" height="15" fill="rgb(247,143,39)" fg:x="340411" fg:w="6525"/><text x="47.1808%" y="143.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (6,525 samples, 0.90%)</title><rect x="46.9308%" y="117" width="0.8996%" height="15" fill="rgb(236,97,10)" fg:x="340411" fg:w="6525"/><text x="47.1808%" y="127.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (3,740 samples, 0.52%)</title><rect x="54.5213%" y="85" width="0.5156%" height="15" fill="rgb(233,208,19)" fg:x="395468" fg:w="3740"/><text x="54.7713%" y="95.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (10,035 samples, 1.38%)</title><rect x="53.9145%" y="101" width="1.3835%" height="15" fill="rgb(216,164,2)" fg:x="391067" fg:w="10035"/><text x="54.1645%" y="111.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (1,894 samples, 0.26%)</title><rect x="55.0369%" y="85" width="0.2611%" height="15" fill="rgb(220,129,5)" fg:x="399208" fg:w="1894"/><text x="55.2869%" y="95.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (2,339 samples, 0.32%)</title><rect x="57.4199%" y="85" width="0.3225%" height="15" fill="rgb(242,17,10)" fg:x="416493" fg:w="2339"/><text x="57.6699%" y="95.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (17,757 samples, 2.45%)</title><rect x="55.2980%" y="101" width="2.4481%" height="15" fill="rgb(242,107,0)" fg:x="401102" fg:w="17757"/><text x="55.5480%" y="111.50">1b..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (52,727 samples, 7.27%)</title><rect x="50.5142%" y="117" width="7.2692%" height="15" fill="rgb(251,28,31)" fg:x="366403" fg:w="52727"/><text x="50.7642%" y="127.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (271 samples, 0.04%)</title><rect x="57.7461%" y="101" width="0.0374%" height="15" fill="rgb(233,223,10)" fg:x="418859" fg:w="271"/><text x="57.9961%" y="111.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (4,653 samples, 0.64%)</title><rect x="58.3425%" y="101" width="0.6415%" height="15" fill="rgb(215,21,27)" fg:x="423185" fg:w="4653"/><text x="58.5925%" y="111.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (13,188 samples, 1.82%)</title><rect x="57.7835%" y="117" width="1.8182%" height="15" fill="rgb(232,23,21)" fg:x="419130" fg:w="13188"/><text x="58.0335%" y="127.50">1..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (4,480 samples, 0.62%)</title><rect x="58.9840%" y="101" width="0.6176%" height="15" fill="rgb(244,5,23)" fg:x="427838" fg:w="4480"/><text x="59.2340%" y="111.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (22,081 samples, 3.04%)</title><rect x="60.7728%" y="101" width="3.0442%" height="15" fill="rgb(226,81,46)" fg:x="440813" fg:w="22081"/><text x="61.0228%" y="111.50">1br..</text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;slice2$&lt;u8&gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (209,610 samples, 28.90%)</title><rect x="36.3891%" y="181" width="28.8979%" height="15" fill="rgb(247,70,30)" fg:x="263947" fg:w="209610"/><text x="36.6391%" y="191.50">1brc.exe`core::hash::BuildHasher::hash_one&lt;std..</text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (126,621 samples, 17.46%)</title><rect x="47.8304%" y="165" width="17.4566%" height="15" fill="rgb(212,68,19)" fg:x="346936" fg:w="126621"/><text x="48.0804%" y="175.50">1brc.exe`std::hash::random:..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (126,621 samples, 17.46%)</title><rect x="47.8304%" y="149" width="17.4566%" height="15" fill="rgb(240,187,13)" fg:x="346936" fg:w="126621"/><text x="48.0804%" y="159.50">1brc.exe`core::hash::sip::i..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (126,621 samples, 17.46%)</title><rect x="47.8304%" y="133" width="17.4566%" height="15" fill="rgb(223,113,26)" fg:x="346936" fg:w="126621"/><text x="48.0804%" y="143.50">1brc.exe`core::hash::sip::i..</text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (41,239 samples, 5.69%)</title><rect x="59.6016%" y="117" width="5.6854%" height="15" fill="rgb(206,192,2)" fg:x="432318" fg:w="41239"/><text x="59.8516%" y="127.50">1brc.ex..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (10,663 samples, 1.47%)</title><rect x="63.8170%" y="101" width="1.4701%" height="15" fill="rgb(241,108,4)" fg:x="462894" fg:w="10663"/><text x="64.0670%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (87 samples, 0.01%)</title><rect x="65.2898%" y="149" width="0.0120%" height="15" fill="rgb(247,173,49)" fg:x="473577" fg:w="87"/><text x="65.5398%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (87 samples, 0.01%)</title><rect x="65.2898%" y="133" width="0.0120%" height="15" fill="rgb(224,114,35)" fg:x="473577" fg:w="87"/><text x="65.5398%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (87 samples, 0.01%)</title><rect x="65.2898%" y="117" width="0.0120%" height="15" fill="rgb(245,159,27)" fg:x="473577" fg:w="87"/><text x="65.5398%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (87 samples, 0.01%)</title><rect x="65.2898%" y="101" width="0.0120%" height="15" fill="rgb(245,172,44)" fg:x="473577" fg:w="87"/><text x="65.5398%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (90 samples, 0.01%)</title><rect x="65.2898%" y="165" width="0.0124%" height="15" fill="rgb(236,23,11)" fg:x="473577" fg:w="90"/><text x="65.5398%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;(ref$&lt;slice2$ (111 samples, 0.02%)</title><rect x="65.2870%" y="181" width="0.0153%" height="15" fill="rgb(205,117,38)" fg:x="473557" fg:w="111"/><text x="65.5370%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$&lt;slice2$ (3,064 samples, 0.42%)</title><rect x="65.3024%" y="181" width="0.4224%" height="15" fill="rgb(237,72,25)" fg:x="473668" fg:w="3064"/><text x="65.5524%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::bucket (3,392 samples, 0.47%)</title><rect x="65.7248%" y="149" width="0.4676%" height="15" fill="rgb(244,70,9)" fg:x="476732" fg:w="3392"/><text x="65.9748%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;ref$&lt;slice2$ (3,392 samples, 0.47%)</title><rect x="65.7248%" y="133" width="0.4676%" height="15" fill="rgb(217,125,39)" fg:x="476732" fg:w="3392"/><text x="65.9748%" y="143.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (3,392 samples, 0.47%)</title><rect x="65.7248%" y="117" width="0.4676%" height="15" fill="rgb(235,36,10)" fg:x="476732" fg:w="3392"/><text x="65.9748%" y="127.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (3,392 samples, 0.47%)</title><rect x="65.7248%" y="101" width="0.4676%" height="15" fill="rgb(251,123,47)" fg:x="476732" fg:w="3392"/><text x="65.9748%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::ProbeSeq::move_next (215 samples, 0.03%)</title><rect x="66.8211%" y="133" width="0.0296%" height="15" fill="rgb(221,13,13)" fg:x="484684" fg:w="215"/><text x="67.0711%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::impl$3::next (10,395 samples, 1.43%)</title><rect x="66.8507%" y="133" width="1.4331%" height="15" fill="rgb(238,131,9)" fg:x="484899" fg:w="10395"/><text x="67.1007%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (10,395 samples, 1.43%)</title><rect x="66.8507%" y="117" width="1.4331%" height="15" fill="rgb(211,50,8)" fg:x="484899" fg:w="10395"/><text x="67.1007%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros(core::num::nonzero::NonZero (90 samples, 0.01%)</title><rect x="68.2714%" y="101" width="0.0124%" height="15" fill="rgb(245,182,24)" fg:x="495204" fg:w="90"/><text x="68.5214%" y="111.50"></text></g><g><title>1brc.exe`core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros(core::num::nonzero::NonZero (90 samples, 0.01%)</title><rect x="68.2714%" y="85" width="0.0124%" height="15" fill="rgb(242,14,37)" fg:x="495204" fg:w="90"/><text x="68.5214%" y="95.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (8,386 samples, 1.16%)</title><rect x="68.2838%" y="133" width="1.1561%" height="15" fill="rgb(246,228,12)" fg:x="495294" fg:w="8386"/><text x="68.5338%" y="143.50"></text></g><g><title>`0x7FFD7EDB1100 (140 samples, 0.02%)</title><rect x="74.5717%" y="37" width="0.0193%" height="15" fill="rgb(213,55,15)" fg:x="540903" fg:w="140"/><text x="74.8217%" y="47.50"></text></g><g><title>`0x7FFD7EDB1103 (1,488 samples, 0.21%)</title><rect x="74.5910%" y="37" width="0.2051%" height="15" fill="rgb(209,9,3)" fg:x="541043" fg:w="1488"/><text x="74.8410%" y="47.50"></text></g><g><title>`0x7FFD7EDB1107 (1,450 samples, 0.20%)</title><rect x="74.7962%" y="37" width="0.1999%" height="15" fill="rgb(230,59,30)" fg:x="542531" fg:w="1450"/><text x="75.0462%" y="47.50"></text></g><g><title>`0x7FFD7EDB1112 (1,522 samples, 0.21%)</title><rect x="75.0039%" y="37" width="0.2098%" height="15" fill="rgb(209,121,21)" fg:x="544038" fg:w="1522"/><text x="75.2539%" y="47.50"></text></g><g><title>`0x7FFD7EDB1115 (11,092 samples, 1.53%)</title><rect x="75.2138%" y="37" width="1.5292%" height="15" fill="rgb(220,109,13)" fg:x="545560" fg:w="11092"/><text x="75.4638%" y="47.50"></text></g><g><title>`0x7FFD7EDB111A (198 samples, 0.03%)</title><rect x="76.7435%" y="37" width="0.0273%" height="15" fill="rgb(232,18,1)" fg:x="556656" fg:w="198"/><text x="76.9935%" y="47.50"></text></g><g><title>`0x7FFD7EDB111D (298 samples, 0.04%)</title><rect x="76.7708%" y="37" width="0.0411%" height="15" fill="rgb(215,41,42)" fg:x="556854" fg:w="298"/><text x="77.0208%" y="47.50"></text></g><g><title>`0x7FFD7EDB1120 (622 samples, 0.09%)</title><rect x="76.8119%" y="37" width="0.0858%" height="15" fill="rgb(224,123,36)" fg:x="557152" fg:w="622"/><text x="77.0619%" y="47.50"></text></g><g><title>`0x7FFD7EDB1125 (2,498 samples, 0.34%)</title><rect x="76.8981%" y="37" width="0.3444%" height="15" fill="rgb(240,125,3)" fg:x="557777" fg:w="2498"/><text x="77.1481%" y="47.50"></text></g><g><title>`0x7FFD7EDB1129 (465 samples, 0.06%)</title><rect x="77.2424%" y="37" width="0.0641%" height="15" fill="rgb(205,98,50)" fg:x="560275" fg:w="465"/><text x="77.4924%" y="47.50"></text></g><g><title>`0x7FFD7EDB112B (461 samples, 0.06%)</title><rect x="77.3066%" y="37" width="0.0636%" height="15" fill="rgb(205,185,37)" fg:x="560740" fg:w="461"/><text x="77.5566%" y="47.50"></text></g><g><title>`0x7FFD7EDB112E (777 samples, 0.11%)</title><rect x="77.3701%" y="37" width="0.1071%" height="15" fill="rgb(238,207,15)" fg:x="561201" fg:w="777"/><text x="77.6201%" y="47.50"></text></g><g><title>`0x7FFD7EDB1130 (1,937 samples, 0.27%)</title><rect x="77.4772%" y="37" width="0.2670%" height="15" fill="rgb(213,199,42)" fg:x="561978" fg:w="1937"/><text x="77.7272%" y="47.50"></text></g><g><title>`0x7FFD7EDB1132 (4,833 samples, 0.67%)</title><rect x="77.7443%" y="37" width="0.6663%" height="15" fill="rgb(235,201,11)" fg:x="563915" fg:w="4833"/><text x="77.9943%" y="47.50"></text></g><g><title>`0x7FFD7EDB1135 (19,150 samples, 2.64%)</title><rect x="78.4106%" y="37" width="2.6401%" height="15" fill="rgb(207,46,11)" fg:x="568748" fg:w="19150"/><text x="78.6606%" y="47.50">`0..</text></g><g><title>`0x7FFD7EDB1137 (76 samples, 0.01%)</title><rect x="81.0507%" y="37" width="0.0105%" height="15" fill="rgb(241,35,35)" fg:x="587898" fg:w="76"/><text x="81.3007%" y="47.50"></text></g><g><title>`0x7FFD7EDB113A (788 samples, 0.11%)</title><rect x="81.0612%" y="37" width="0.1086%" height="15" fill="rgb(243,32,47)" fg:x="587974" fg:w="788"/><text x="81.3112%" y="47.50"></text></g><g><title>`0x7FFD7EDB113D (394 samples, 0.05%)</title><rect x="81.1698%" y="37" width="0.0543%" height="15" fill="rgb(247,202,23)" fg:x="588762" fg:w="394"/><text x="81.4198%" y="47.50"></text></g><g><title>`0x7FFD7EDB113F (501 samples, 0.07%)</title><rect x="81.2241%" y="37" width="0.0691%" height="15" fill="rgb(219,102,11)" fg:x="589156" fg:w="501"/><text x="81.4741%" y="47.50"></text></g><g><title>`0x7FFD7EDB1142 (877 samples, 0.12%)</title><rect x="81.2932%" y="37" width="0.1209%" height="15" fill="rgb(243,110,44)" fg:x="589657" fg:w="877"/><text x="81.5432%" y="47.50"></text></g><g><title>`0x7FFD7EDB1145 (90 samples, 0.01%)</title><rect x="81.4141%" y="37" width="0.0124%" height="15" fill="rgb(222,74,54)" fg:x="590534" fg:w="90"/><text x="81.6641%" y="47.50"></text></g><g><title>`0x7FFD7EDB114A (275 samples, 0.04%)</title><rect x="81.4268%" y="37" width="0.0379%" height="15" fill="rgb(216,99,12)" fg:x="590626" fg:w="275"/><text x="81.6768%" y="47.50"></text></g><g><title>`0x7FFD7EDB114E (195 samples, 0.03%)</title><rect x="81.4647%" y="37" width="0.0269%" height="15" fill="rgb(226,22,26)" fg:x="590901" fg:w="195"/><text x="81.7147%" y="47.50"></text></g><g><title>`0x7FFD7EDB1187 (276 samples, 0.04%)</title><rect x="81.4916%" y="37" width="0.0381%" height="15" fill="rgb(217,163,10)" fg:x="591096" fg:w="276"/><text x="81.7416%" y="47.50"></text></g><g><title>`0x7FFD7EDB118E (98 samples, 0.01%)</title><rect x="81.5387%" y="37" width="0.0135%" height="15" fill="rgb(213,25,53)" fg:x="591438" fg:w="98"/><text x="81.7887%" y="47.50"></text></g><g><title>`0x7FFD7EDB1190 (328 samples, 0.05%)</title><rect x="81.5523%" y="37" width="0.0452%" height="15" fill="rgb(252,105,26)" fg:x="591536" fg:w="328"/><text x="81.8023%" y="47.50"></text></g><g><title>`0x7FFD7EDB1193 (852 samples, 0.12%)</title><rect x="81.5975%" y="37" width="0.1175%" height="15" fill="rgb(220,39,43)" fg:x="591864" fg:w="852"/><text x="81.8475%" y="47.50"></text></g><g><title>`0x7FFD7EDB1197 (1,282 samples, 0.18%)</title><rect x="81.7149%" y="37" width="0.1767%" height="15" fill="rgb(229,68,48)" fg:x="592716" fg:w="1282"/><text x="81.9649%" y="47.50"></text></g><g><title>`0x7FFD7EDB11A2 (165 samples, 0.02%)</title><rect x="81.8964%" y="37" width="0.0227%" height="15" fill="rgb(252,8,32)" fg:x="594032" fg:w="165"/><text x="82.1464%" y="47.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (90,572 samples, 12.49%)</title><rect x="69.4400%" y="117" width="12.4867%" height="15" fill="rgb(223,20,43)" fg:x="503680" fg:w="90572"/><text x="69.6900%" y="127.50">1brc.exe`hashbrown:..</text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (90,572 samples, 12.49%)</title><rect x="69.4400%" y="101" width="12.4867%" height="15" fill="rgb(229,81,49)" fg:x="503680" fg:w="90572"/><text x="69.6900%" y="111.50">1brc.exe`hashbrown:..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (90,458 samples, 12.47%)</title><rect x="69.4557%" y="85" width="12.4710%" height="15" fill="rgb(236,28,36)" fg:x="503794" fg:w="90458"/><text x="69.7057%" y="95.50">1brc.exe`core::cmp:..</text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (90,458 samples, 12.47%)</title><rect x="69.4557%" y="69" width="12.4710%" height="15" fill="rgb(249,185,26)" fg:x="503794" fg:w="90458"/><text x="69.7057%" y="79.50">1brc.exe`core::slic..</text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (90,458 samples, 12.47%)</title><rect x="69.4557%" y="53" width="12.4710%" height="15" fill="rgb(249,174,33)" fg:x="503794" fg:w="90458"/><text x="69.7057%" y="63.50">1brc.exe`core::slic..</text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (93,075 samples, 12.83%)</title><rect x="69.4400%" y="133" width="12.8318%" height="15" fill="rgb(233,201,37)" fg:x="503680" fg:w="93075"/><text x="69.6900%" y="143.50">1brc.exe`hashbrown:..</text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ref (2,503 samples, 0.35%)</title><rect x="81.9267%" y="117" width="0.3451%" height="15" fill="rgb(221,78,26)" fg:x="594252" fg:w="2503"/><text x="82.1767%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ptr (2,503 samples, 0.35%)</title><rect x="81.9267%" y="101" width="0.3451%" height="15" fill="rgb(250,127,30)" fg:x="594252" fg:w="2503"/><text x="82.1767%" y="111.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (2,503 samples, 0.35%)</title><rect x="81.9267%" y="85" width="0.3451%" height="15" fill="rgb(230,49,44)" fg:x="594252" fg:w="2503"/><text x="82.1767%" y="95.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (2,503 samples, 0.35%)</title><rect x="81.9267%" y="69" width="0.3451%" height="15" fill="rgb(229,67,23)" fg:x="594252" fg:w="2503"/><text x="82.1767%" y="79.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::load (1,231 samples, 0.17%)</title><rect x="82.2718%" y="133" width="0.1697%" height="15" fill="rgb(249,83,47)" fg:x="596755" fg:w="1231"/><text x="82.5218%" y="143.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (1,231 samples, 0.17%)</title><rect x="82.2718%" y="117" width="0.1697%" height="15" fill="rgb(215,43,3)" fg:x="596755" fg:w="1231"/><text x="82.5218%" y="127.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (1,231 samples, 0.17%)</title><rect x="82.2718%" y="101" width="0.1697%" height="15" fill="rgb(238,154,13)" fg:x="596755" fg:w="1231"/><text x="82.5218%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (5,219 samples, 0.72%)</title><rect x="82.4415%" y="133" width="0.7195%" height="15" fill="rgb(219,56,2)" fg:x="597986" fg:w="5219"/><text x="82.6915%" y="143.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (5,219 samples, 0.72%)</title><rect x="82.4415%" y="117" width="0.7195%" height="15" fill="rgb(233,0,4)" fg:x="597986" fg:w="5219"/><text x="82.6915%" y="127.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt;::get_mut(ref$&lt;slice2$ (351,133 samples, 48.41%)</title><rect x="34.9007%" y="229" width="48.4090%" height="15" fill="rgb(235,30,7)" fg:x="253151" fg:w="351133"/><text x="35.1507%" y="239.50">1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationSt..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(ref$&lt;slice2$ (351,133 samples, 48.41%)</title><rect x="34.9007%" y="213" width="48.4090%" height="15" fill="rgb(250,79,13)" fg:x="253151" fg:w="351133"/><text x="35.1507%" y="223.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(ref$&lt;slice2$ (351,133 samples, 48.41%)</title><rect x="34.9007%" y="197" width="48.4090%" height="15" fill="rgb(211,146,34)" fg:x="253151" fg:w="351133"/><text x="35.1507%" y="207.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (127,552 samples, 17.58%)</title><rect x="65.7248%" y="181" width="17.5850%" height="15" fill="rgb(228,22,38)" fg:x="476732" fg:w="127552"/><text x="65.9748%" y="191.50">1brc.exe`hashbrown::raw::Ra..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (127,552 samples, 17.58%)</title><rect x="65.7248%" y="165" width="17.5850%" height="15" fill="rgb(235,168,5)" fg:x="476732" fg:w="127552"/><text x="65.9748%" y="175.50">1brc.exe`hashbrown::raw::Ra..</text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (124,160 samples, 17.12%)</title><rect x="66.1924%" y="149" width="17.1173%" height="15" fill="rgb(221,155,16)" fg:x="480124" fg:w="124160"/><text x="66.4424%" y="159.50">1brc.exe`hashbrown::raw::Ra..</text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_empty (1,079 samples, 0.15%)</title><rect x="83.1610%" y="133" width="0.1488%" height="15" fill="rgb(215,215,53)" fg:x="603205" fg:w="1079"/><text x="83.4110%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (1,012 samples, 0.14%)</title><rect x="83.1702%" y="117" width="0.1395%" height="15" fill="rgb(223,4,10)" fg:x="603272" fg:w="1012"/><text x="83.4202%" y="127.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1,012 samples, 0.14%)</title><rect x="83.1702%" y="101" width="0.1395%" height="15" fill="rgb(234,103,6)" fg:x="603272" fg:w="1012"/><text x="83.4202%" y="111.50"></text></g><g><title>1brc.exe`std::io::default_read_exact&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (120,587 samples, 16.62%)</title><rect x="83.3133%" y="229" width="16.6248%" height="15" fill="rgb(227,97,0)" fg:x="604310" fg:w="120587"/><text x="83.5633%" y="239.50">1brc.exe`std::io::default_..</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (120,587 samples, 16.62%)</title><rect x="83.3133%" y="213" width="16.6248%" height="15" fill="rgb(234,150,53)" fg:x="604310" fg:w="120587"/><text x="83.5633%" y="223.50">1brc.exe`std::io::buffered..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read (120,587 samples, 16.62%)</title><rect x="83.3133%" y="197" width="16.6248%" height="15" fill="rgb(228,201,54)" fg:x="604310" fg:w="120587"/><text x="83.5633%" y="207.50">1brc.exe`std::sys::pal::wi..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (120,587 samples, 16.62%)</title><rect x="83.3133%" y="181" width="16.6248%" height="15" fill="rgb(222,22,37)" fg:x="604310" fg:w="120587"/><text x="83.5633%" y="191.50">1brc.exe`std::sys::pal::wi..</text></g><g><title>`0x7FFDA1AED624 (120,587 samples, 16.62%)</title><rect x="83.3133%" y="165" width="16.6248%" height="15" fill="rgb(237,53,32)" fg:x="604310" fg:w="120587"/><text x="83.5633%" y="175.50">`0x7FFDA1AED624</text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (264 samples, 0.04%)</title><rect x="99.9381%" y="229" width="0.0364%" height="15" fill="rgb(233,25,53)" fg:x="724897" fg:w="264"/><text x="100.1881%" y="239.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (249 samples, 0.03%)</title><rect x="99.9402%" y="213" width="0.0343%" height="15" fill="rgb(210,40,34)" fg:x="724912" fg:w="249"/><text x="100.1902%" y="223.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (249 samples, 0.03%)</title><rect x="99.9402%" y="197" width="0.0343%" height="15" fill="rgb(241,220,44)" fg:x="724912" fg:w="249"/><text x="100.1902%" y="207.50"></text></g><g><title>`0x7FFD9F541476 (248 samples, 0.03%)</title><rect x="99.9403%" y="181" width="0.0342%" height="15" fill="rgb(235,28,35)" fg:x="724913" fg:w="248"/><text x="100.1903%" y="191.50"></text></g><g><title>`0x7FFD9F541A09 (247 samples, 0.03%)</title><rect x="99.9404%" y="165" width="0.0341%" height="15" fill="rgb(210,56,17)" fg:x="724914" fg:w="247"/><text x="100.1904%" y="175.50"></text></g><g><title>`0x7FFDA1AEE004 (247 samples, 0.03%)</title><rect x="99.9404%" y="149" width="0.0341%" height="15" fill="rgb(224,130,29)" fg:x="724914" fg:w="247"/><text x="100.1904%" y="159.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0 (724,907 samples, 99.94%)</title><rect x="0.0357%" y="245" width="99.9395%" height="15" fill="rgb(235,212,8)" fg:x="259" fg:w="724907"/><text x="0.2857%" y="255.50">1brc.exe`1brc::input_multitreaded::closure$0</text></g><g><title>1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (724,909 samples, 99.94%)</title><rect x="0.0356%" y="309" width="99.9398%" height="15" fill="rgb(223,33,50)" fg:x="258" fg:w="724909"/><text x="0.2856%" y="319.50">1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::..</text></g><g><title>1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (724,909 samples, 99.94%)</title><rect x="0.0356%" y="293" width="99.9398%" height="15" fill="rgb(219,149,13)" fg:x="258" fg:w="724909"/><text x="0.2856%" y="303.50">1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closu..</text></g><g><title>1brc.exe`std::panicking::try::do_call (724,909 samples, 99.94%)</title><rect x="0.0356%" y="277" width="99.9398%" height="15" fill="rgb(250,156,29)" fg:x="258" fg:w="724909"/><text x="0.2856%" y="287.50">1brc.exe`std::panicking::try::do_call</text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (724,908 samples, 99.94%)</title><rect x="0.0357%" y="261" width="99.9396%" height="15" fill="rgb(216,193,19)" fg:x="259" fg:w="724908"/><text x="0.2857%" y="271.50">1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationSta..</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (724,913 samples, 99.94%)</title><rect x="0.0356%" y="405" width="99.9403%" height="15" fill="rgb(216,135,14)" fg:x="258" fg:w="724913"/><text x="0.2856%" y="415.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`alloc::boxed::impl$8::drop (724,913 samples, 99.94%)</title><rect x="0.0356%" y="389" width="99.9403%" height="15" fill="rgb(241,47,5)" fg:x="258" fg:w="724913"/><text x="0.2856%" y="399.50">1brc.exe`alloc::boxed::impl$8::drop</text></g><g><title>1brc.exe`core::alloc::layout::Layout::for_value_raw (724,913 samples, 99.94%)</title><rect x="0.0356%" y="373" width="99.9403%" height="15" fill="rgb(233,42,35)" fg:x="258" fg:w="724913"/><text x="0.2856%" y="383.50">1brc.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>1brc.exe`core::mem::size_of_val_raw (724,913 samples, 99.94%)</title><rect x="0.0356%" y="357" width="99.9403%" height="15" fill="rgb(231,13,6)" fg:x="258" fg:w="724913"/><text x="0.2856%" y="367.50">1brc.exe`core::mem::size_of_val_raw</text></g><g><title>1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (724,913 samples, 99.94%)</title><rect x="0.0356%" y="341" width="99.9403%" height="15" fill="rgb(207,181,40)" fg:x="258" fg:w="724913"/><text x="0.2856%" y="351.50">1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;all..</text></g><g><title>1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (724,913 samples, 99.94%)</title><rect x="0.0356%" y="325" width="99.9403%" height="15" fill="rgb(254,173,49)" fg:x="258" fg:w="724913"/><text x="0.2856%" y="335.50">1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;..</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (724,922 samples, 99.94%)</title><rect x="0.0356%" y="421" width="99.9415%" height="15" fill="rgb(221,1,38)" fg:x="258" fg:w="724922"/><text x="0.2856%" y="431.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (724,923 samples, 99.94%)</title><rect x="0.0356%" y="437" width="99.9417%" height="15" fill="rgb(206,124,46)" fg:x="258" fg:w="724923"/><text x="0.2856%" y="447.50">1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>`0x7FFDA0747374 (725,184 samples, 99.98%)</title><rect x="0.0010%" y="453" width="99.9777%" height="15" fill="rgb(249,21,11)" fg:x="7" fg:w="725184"/><text x="0.2510%" y="463.50">`0x7FFDA0747374</text></g><g><title>`0x7FFDA1A9CC91 (725,207 samples, 99.98%)</title><rect x="0.0010%" y="469" width="99.9808%" height="15" fill="rgb(222,201,40)" fg:x="7" fg:w="725207"/><text x="0.2510%" y="479.50">`0x7FFDA1A9CC91</text></g><g><title>`0x7FFDA1AC60A4 (76 samples, 0.01%)</title><rect x="99.9888%" y="437" width="0.0105%" height="15" fill="rgb(235,61,29)" fg:x="725265" fg:w="76"/><text x="100.2388%" y="447.50"></text></g><g><title>`0x7FFDA1AC5C83 (111 samples, 0.02%)</title><rect x="99.9846%" y="453" width="0.0153%" height="15" fill="rgb(219,207,3)" fg:x="725234" fg:w="111"/><text x="100.2346%" y="463.50"></text></g><g><title>all (725,346 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="725346"/><text x="0.2500%" y="495.50"></text></g><g><title>`0x7FFDA1AC5C2E (112 samples, 0.02%)</title><rect x="99.9846%" y="469" width="0.0154%" height="15" fill="rgb(239,76,54)" fg:x="725234" fg:w="112"/><text x="100.2346%" y="479.50"></text></g></svg></svg>