<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="580389"><g><title>`0x7FFDA1A9CC70 (66 samples, 0.01%)</title><rect x="0.0000%" y="517" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="66"/><text x="0.2500%" y="527.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (684 samples, 0.12%)</title><rect x="0.0174%" y="197" width="0.1179%" height="15" fill="rgb(217,0,24)" fg:x="101" fg:w="684"/><text x="0.2674%" y="207.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread::Thread::new (683 samples, 0.12%)</title><rect x="0.0176%" y="181" width="0.1177%" height="15" fill="rgb(221,193,54)" fg:x="102" fg:w="683"/><text x="0.2676%" y="191.50"></text></g><g><title>`0x7FFDA074B91D (677 samples, 0.12%)</title><rect x="0.0186%" y="165" width="0.1166%" height="15" fill="rgb(248,212,6)" fg:x="108" fg:w="677"/><text x="0.2686%" y="175.50"></text></g><g><title>`0x7FFD9F54BBAF (671 samples, 0.12%)</title><rect x="0.0196%" y="149" width="0.1156%" height="15" fill="rgb(208,68,35)" fg:x="114" fg:w="671"/><text x="0.2696%" y="159.50"></text></g><g><title>`0x7FFDA1AEED94 (669 samples, 0.12%)</title><rect x="0.0200%" y="133" width="0.1153%" height="15" fill="rgb(232,128,0)" fg:x="116" fg:w="669"/><text x="0.2700%" y="143.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::clear (693 samples, 0.12%)</title><rect x="0.0171%" y="277" width="0.1194%" height="15" fill="rgb(207,160,47)" fg:x="99" fg:w="693"/><text x="0.2671%" y="287.50"></text></g><g><title>1brc.exe`std::thread::spawn&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (693 samples, 0.12%)</title><rect x="0.0171%" y="261" width="0.1194%" height="15" fill="rgb(228,23,34)" fg:x="99" fg:w="693"/><text x="0.2671%" y="271.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn (693 samples, 0.12%)</title><rect x="0.0171%" y="245" width="0.1194%" height="15" fill="rgb(218,30,26)" fg:x="99" fg:w="693"/><text x="0.2671%" y="255.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked (693 samples, 0.12%)</title><rect x="0.0171%" y="229" width="0.1194%" height="15" fill="rgb(220,122,19)" fg:x="99" fg:w="693"/><text x="0.2671%" y="239.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, 1brc::input_multithreaded::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (693 samples, 0.12%)</title><rect x="0.0171%" y="213" width="0.1194%" height="15" fill="rgb(250,228,42)" fg:x="99" fg:w="693"/><text x="0.2671%" y="223.50"></text></g><g><title>`0x7FFDA1A7095C (145 samples, 0.02%)</title><rect x="0.1437%" y="69" width="0.0250%" height="15" fill="rgb(240,193,28)" fg:x="834" fg:w="145"/><text x="0.3937%" y="79.50"></text></g><g><title>`0x7FFDA1A59B1A (145 samples, 0.02%)</title><rect x="0.1437%" y="53" width="0.0250%" height="15" fill="rgb(216,20,37)" fg:x="834" fg:w="145"/><text x="0.3937%" y="63.50"></text></g><g><title>`0x7FFDA1AED924 (145 samples, 0.02%)</title><rect x="0.1437%" y="37" width="0.0250%" height="15" fill="rgb(206,188,39)" fg:x="834" fg:w="145"/><text x="0.3937%" y="47.50"></text></g><g><title>`0x7FFDA1A75B74 (181 samples, 0.03%)</title><rect x="0.1378%" y="133" width="0.0312%" height="15" fill="rgb(217,207,13)" fg:x="800" fg:w="181"/><text x="0.3878%" y="143.50"></text></g><g><title>`0x7FFDA1A765F6 (168 samples, 0.03%)</title><rect x="0.1401%" y="117" width="0.0289%" height="15" fill="rgb(231,73,38)" fg:x="813" fg:w="168"/><text x="0.3901%" y="127.50"></text></g><g><title>`0x7FFDA1A6E412 (152 samples, 0.03%)</title><rect x="0.1428%" y="101" width="0.0262%" height="15" fill="rgb(225,20,46)" fg:x="829" fg:w="152"/><text x="0.3928%" y="111.50"></text></g><g><title>`0x7FFDA1A6F35E (148 samples, 0.03%)</title><rect x="0.1435%" y="85" width="0.0255%" height="15" fill="rgb(210,31,41)" fg:x="833" fg:w="148"/><text x="0.3935%" y="95.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::IntoIter&lt;tuple$ (182 samples, 0.03%)</title><rect x="0.1378%" y="277" width="0.0314%" height="15" fill="rgb(221,200,47)" fg:x="800" fg:w="182"/><text x="0.3878%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop(alloc::vec::into_iter::IntoIter&lt;tuple$ (182 samples, 0.03%)</title><rect x="0.1378%" y="261" width="0.0314%" height="15" fill="rgb(226,26,5)" fg:x="800" fg:w="182"/><text x="0.3878%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (182 samples, 0.03%)</title><rect x="0.1378%" y="245" width="0.0314%" height="15" fill="rgb(249,33,26)" fg:x="800" fg:w="182"/><text x="0.3878%" y="255.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop::impl$0::drop(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (182 samples, 0.03%)</title><rect x="0.1378%" y="229" width="0.0314%" height="15" fill="rgb(235,183,28)" fg:x="800" fg:w="182"/><text x="0.3878%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (182 samples, 0.03%)</title><rect x="0.1378%" y="213" width="0.0314%" height="15" fill="rgb(221,5,38)" fg:x="800" fg:w="182"/><text x="0.3878%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (182 samples, 0.03%)</title><rect x="0.1378%" y="197" width="0.0314%" height="15" fill="rgb(247,18,42)" fg:x="800" fg:w="182"/><text x="0.3878%" y="207.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (182 samples, 0.03%)</title><rect x="0.1378%" y="181" width="0.0314%" height="15" fill="rgb(241,131,45)" fg:x="800" fg:w="182"/><text x="0.3878%" y="191.50"></text></g><g><title>1brc.exe`alloc::alloc::dealloc (182 samples, 0.03%)</title><rect x="0.1378%" y="165" width="0.0314%" height="15" fill="rgb(249,31,29)" fg:x="800" fg:w="182"/><text x="0.3878%" y="175.50"></text></g><g><title>`0x7FFDA1A747B1 (182 samples, 0.03%)</title><rect x="0.1378%" y="149" width="0.0314%" height="15" fill="rgb(225,111,53)" fg:x="800" fg:w="182"/><text x="0.3878%" y="159.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::get_mut (75 samples, 0.01%)</title><rect x="0.1692%" y="245" width="0.0129%" height="15" fill="rgb(238,160,17)" fg:x="982" fg:w="75"/><text x="0.4192%" y="255.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::is_unique (75 samples, 0.01%)</title><rect x="0.1692%" y="229" width="0.0129%" height="15" fill="rgb(214,148,48)" fg:x="982" fg:w="75"/><text x="0.4192%" y="239.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::inner (75 samples, 0.01%)</title><rect x="0.1692%" y="213" width="0.0129%" height="15" fill="rgb(232,36,49)" fg:x="982" fg:w="75"/><text x="0.4192%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; &gt; &gt;::as_ref (70 samples, 0.01%)</title><rect x="0.1701%" y="197" width="0.0121%" height="15" fill="rgb(209,103,24)" fg:x="987" fg:w="70"/><text x="0.4201%" y="207.50"></text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::any::Any,core::marker::Send&gt;,alloc::alloc::Global&gt; &gt; &gt;::expect(enum2$&lt;core::result::Result&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::any::Any,core::marker::Send&gt;,alloc::alloc::Global&gt; &gt; &gt;, ref$ (87 samples, 0.01%)</title><rect x="0.1692%" y="277" width="0.0150%" height="15" fill="rgb(229,88,8)" fg:x="982" fg:w="87"/><text x="0.4192%" y="287.50"></text></g><g><title>1brc.exe`std::thread::JoinInner&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;::join&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;(std::thread::JoinInner&lt;alloc::vec::Vec&lt;tuple$ (87 samples, 0.01%)</title><rect x="0.1692%" y="261" width="0.0150%" height="15" fill="rgb(213,181,19)" fg:x="982" fg:w="87"/><text x="0.4192%" y="271.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::AHasher::large_update (85 samples, 0.01%)</title><rect x="0.1859%" y="181" width="0.0146%" height="15" fill="rgb(254,191,54)" fg:x="1079" fg:w="85"/><text x="0.4359%" y="191.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (145 samples, 0.02%)</title><rect x="0.1854%" y="197" width="0.0250%" height="15" fill="rgb(241,83,37)" fg:x="1076" fg:w="145"/><text x="0.4354%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(core::hash::BuildHasherDefault (160 samples, 0.03%)</title><rect x="0.1842%" y="261" width="0.0276%" height="15" fill="rgb(233,36,39)" fg:x="1069" fg:w="160"/><text x="0.4342%" y="271.50"></text></g><g><title>1brc.exe`alloc::string::impl$23::hash (153 samples, 0.03%)</title><rect x="0.1854%" y="245" width="0.0264%" height="15" fill="rgb(226,3,54)" fg:x="1076" fg:w="153"/><text x="0.4354%" y="255.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$2::hash(ref$ (153 samples, 0.03%)</title><rect x="0.1854%" y="229" width="0.0264%" height="15" fill="rgb(245,192,40)" fg:x="1076" fg:w="153"/><text x="0.4354%" y="239.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_str(ahash::fallback_hash::AHasher*, ref$ (153 samples, 0.03%)</title><rect x="0.1854%" y="213" width="0.0264%" height="15" fill="rgb(238,167,29)" fg:x="1076" fg:w="153"/><text x="0.4354%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,1brc::StationStats&gt;*, tuple$ (74 samples, 0.01%)</title><rect x="0.2180%" y="213" width="0.0128%" height="15" fill="rgb(232,182,51)" fg:x="1265" fg:w="74"/><text x="0.4680%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent (74 samples, 0.01%)</title><rect x="0.2180%" y="197" width="0.0128%" height="15" fill="rgb(231,60,39)" fg:x="1265" fg:w="74"/><text x="0.4680%" y="207.50"></text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq (74 samples, 0.01%)</title><rect x="0.2180%" y="181" width="0.0128%" height="15" fill="rgb(208,69,12)" fg:x="1265" fg:w="74"/><text x="0.4680%" y="191.50"></text></g><g><title>1brc.exe`alloc::string::impl$71::eq (69 samples, 0.01%)</title><rect x="0.2188%" y="165" width="0.0119%" height="15" fill="rgb(235,93,37)" fg:x="1270" fg:w="69"/><text x="0.4688%" y="175.50"></text></g><g><title>1brc.exe`alloc::vec::partial_eq::impl$0::eq(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, alloc::vec::Vec (69 samples, 0.01%)</title><rect x="0.2188%" y="149" width="0.0119%" height="15" fill="rgb(213,116,39)" fg:x="1270" fg:w="69"/><text x="0.4688%" y="159.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (69 samples, 0.01%)</title><rect x="0.2188%" y="133" width="0.0119%" height="15" fill="rgb(222,207,29)" fg:x="1270" fg:w="69"/><text x="0.4688%" y="143.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (69 samples, 0.01%)</title><rect x="0.2188%" y="117" width="0.0119%" height="15" fill="rgb(206,96,30)" fg:x="1270" fg:w="69"/><text x="0.4688%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0 (75 samples, 0.01%)</title><rect x="0.2180%" y="229" width="0.0129%" height="15" fill="rgb(218,138,4)" fg:x="1265" fg:w="75"/><text x="0.4680%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::entry (275 samples, 0.05%)</title><rect x="0.1842%" y="277" width="0.0474%" height="15" fill="rgb(250,191,14)" fg:x="1069" fg:w="275"/><text x="0.4342%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (115 samples, 0.02%)</title><rect x="0.2118%" y="261" width="0.0198%" height="15" fill="rgb(239,60,40)" fg:x="1229" fg:w="115"/><text x="0.4618%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (114 samples, 0.02%)</title><rect x="0.2119%" y="245" width="0.0196%" height="15" fill="rgb(206,27,48)" fg:x="1230" fg:w="114"/><text x="0.4619%" y="255.50"></text></g><g><title>1brc.exe`std::io::BufRead::has_data_left(std::io::buffered::bufreader::BufReader (226 samples, 0.04%)</title><rect x="0.2345%" y="277" width="0.0389%" height="15" fill="rgb(225,35,8)" fg:x="1361" fg:w="226"/><text x="0.4845%" y="287.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$5::fill_buf(std::io::buffered::bufreader::BufReader (226 samples, 0.04%)</title><rect x="0.2345%" y="261" width="0.0389%" height="15" fill="rgb(250,213,24)" fg:x="1361" fg:w="226"/><text x="0.4845%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (226 samples, 0.04%)</title><rect x="0.2345%" y="245" width="0.0389%" height="15" fill="rgb(247,123,22)" fg:x="1361" fg:w="226"/><text x="0.4845%" y="255.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (226 samples, 0.04%)</title><rect x="0.2345%" y="229" width="0.0389%" height="15" fill="rgb(231,138,38)" fg:x="1361" fg:w="226"/><text x="0.4845%" y="239.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read_buf (225 samples, 0.04%)</title><rect x="0.2347%" y="213" width="0.0388%" height="15" fill="rgb(231,145,46)" fg:x="1362" fg:w="225"/><text x="0.4847%" y="223.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (225 samples, 0.04%)</title><rect x="0.2347%" y="197" width="0.0388%" height="15" fill="rgb(251,118,11)" fg:x="1362" fg:w="225"/><text x="0.4847%" y="207.50"></text></g><g><title>`0x7FFDA1AED624 (224 samples, 0.04%)</title><rect x="0.2348%" y="181" width="0.0386%" height="15" fill="rgb(217,147,25)" fg:x="1363" fg:w="224"/><text x="0.4848%" y="191.50"></text></g><g><title>`0x7FFDA1AF776F (85 samples, 0.01%)</title><rect x="0.3158%" y="261" width="0.0146%" height="15" fill="rgb(247,81,37)" fg:x="1833" fg:w="85"/><text x="0.5658%" y="271.50"></text></g><g><title>`0x7FFDA1A747B1 (273 samples, 0.05%)</title><rect x="0.2838%" y="277" width="0.0470%" height="15" fill="rgb(209,12,38)" fg:x="1647" fg:w="273"/><text x="0.5338%" y="287.50"></text></g><g><title>1brc.exe`1brc::input_multithreaded(hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,core::hash::BuildHasherDefault (1,857 samples, 0.32%)</title><rect x="0.0119%" y="293" width="0.3200%" height="15" fill="rgb(227,1,9)" fg:x="69" fg:w="1857"/><text x="0.2619%" y="303.50"></text></g><g><title>1brc.exe`invoke_main() (1,867 samples, 0.32%)</title><rect x="0.0114%" y="469" width="0.3217%" height="15" fill="rgb(248,47,43)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="479.50"></text></g><g><title>1brc.exe`main (1,867 samples, 0.32%)</title><rect x="0.0114%" y="453" width="0.3217%" height="15" fill="rgb(221,10,30)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="463.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal (1,867 samples, 0.32%)</title><rect x="0.0114%" y="437" width="0.3217%" height="15" fill="rgb(210,229,1)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="447.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (1,867 samples, 0.32%)</title><rect x="0.0114%" y="421" width="0.3217%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="431.50"></text></g><g><title>1brc.exe`std::panicking::try (1,867 samples, 0.32%)</title><rect x="0.0114%" y="405" width="0.3217%" height="15" fill="rgb(234,67,33)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="415.50"></text></g><g><title>1brc.exe`std::panicking::try::do_call (1,867 samples, 0.32%)</title><rect x="0.0114%" y="389" width="0.3217%" height="15" fill="rgb(247,98,35)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="399.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$2 (1,867 samples, 0.32%)</title><rect x="0.0114%" y="373" width="0.3217%" height="15" fill="rgb(247,138,52)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="383.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (1,867 samples, 0.32%)</title><rect x="0.0114%" y="357" width="0.3217%" height="15" fill="rgb(213,79,30)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="367.50"></text></g><g><title>1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (1,867 samples, 0.32%)</title><rect x="0.0114%" y="341" width="0.3217%" height="15" fill="rgb(246,177,23)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="351.50"></text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (1,867 samples, 0.32%)</title><rect x="0.0114%" y="325" width="0.3217%" height="15" fill="rgb(230,62,27)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="335.50"></text></g><g><title>1brc.exe`1brc::main (1,867 samples, 0.32%)</title><rect x="0.0114%" y="309" width="0.3217%" height="15" fill="rgb(216,154,8)" fg:x="66" fg:w="1867"/><text x="0.2614%" y="319.50"></text></g><g><title>1brc.exe`__scrt_common_main_seh() (1,877 samples, 0.32%)</title><rect x="0.0114%" y="485" width="0.3234%" height="15" fill="rgb(244,35,45)" fg:x="66" fg:w="1877"/><text x="0.2614%" y="495.50"></text></g><g><title>`0x7FFDA1A7B8A4 (65 samples, 0.01%)</title><rect x="6.9276%" y="149" width="0.0112%" height="15" fill="rgb(251,115,12)" fg:x="40207" fg:w="65"/><text x="7.1776%" y="159.50"></text></g><g><title>`0x7FFDA1A7BEDA (69 samples, 0.01%)</title><rect x="6.9414%" y="149" width="0.0119%" height="15" fill="rgb(240,54,50)" fg:x="40287" fg:w="69"/><text x="7.1914%" y="159.50"></text></g><g><title>`0x7FFDA1A70B31 (68 samples, 0.01%)</title><rect x="6.9416%" y="133" width="0.0117%" height="15" fill="rgb(233,84,52)" fg:x="40288" fg:w="68"/><text x="7.1916%" y="143.50"></text></g><g><title>`0x7FFDA1A7B3C7 (336 samples, 0.06%)</title><rect x="6.9049%" y="165" width="0.0579%" height="15" fill="rgb(207,117,47)" fg:x="40075" fg:w="336"/><text x="7.1549%" y="175.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (436 samples, 0.08%)</title><rect x="6.8895%" y="213" width="0.0751%" height="15" fill="rgb(249,43,39)" fg:x="39986" fg:w="436"/><text x="7.1395%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (436 samples, 0.08%)</title><rect x="6.8895%" y="197" width="0.0751%" height="15" fill="rgb(209,38,44)" fg:x="39986" fg:w="436"/><text x="7.1395%" y="207.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (436 samples, 0.08%)</title><rect x="6.8895%" y="181" width="0.0751%" height="15" fill="rgb(236,212,23)" fg:x="39986" fg:w="436"/><text x="7.1395%" y="191.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (440 samples, 0.08%)</title><rect x="6.8895%" y="277" width="0.0758%" height="15" fill="rgb(242,79,21)" fg:x="39986" fg:w="440"/><text x="7.1395%" y="287.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (440 samples, 0.08%)</title><rect x="6.8895%" y="261" width="0.0758%" height="15" fill="rgb(211,96,35)" fg:x="39986" fg:w="440"/><text x="7.1395%" y="271.50"></text></g><g><title>1brc.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (440 samples, 0.08%)</title><rect x="6.8895%" y="245" width="0.0758%" height="15" fill="rgb(253,215,40)" fg:x="39986" fg:w="440"/><text x="7.1395%" y="255.50"></text></g><g><title>1brc.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (440 samples, 0.08%)</title><rect x="6.8895%" y="229" width="0.0758%" height="15" fill="rgb(211,81,21)" fg:x="39986" fg:w="440"/><text x="7.1395%" y="239.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::push(tuple$ (127 samples, 0.02%)</title><rect x="6.9653%" y="277" width="0.0219%" height="15" fill="rgb(208,190,38)" fg:x="40426" fg:w="127"/><text x="7.2153%" y="287.50"></text></g><g><title>`0x7FFDA1A7FBD2 (87 samples, 0.01%)</title><rect x="6.9955%" y="165" width="0.0150%" height="15" fill="rgb(235,213,38)" fg:x="40601" fg:w="87"/><text x="7.2455%" y="175.50"></text></g><g><title>`0x7FFDA1A7D357 (169 samples, 0.03%)</title><rect x="6.9884%" y="197" width="0.0291%" height="15" fill="rgb(237,122,38)" fg:x="40560" fg:w="169"/><text x="7.2384%" y="207.50"></text></g><g><title>`0x7FFDA1A7FAE2 (169 samples, 0.03%)</title><rect x="6.9884%" y="181" width="0.0291%" height="15" fill="rgb(244,218,35)" fg:x="40560" fg:w="169"/><text x="7.2384%" y="191.50"></text></g><g><title>`0x7FFDA1AECDFE (329 samples, 0.06%)</title><rect x="7.0196%" y="181" width="0.0567%" height="15" fill="rgb(240,68,47)" fg:x="40741" fg:w="329"/><text x="7.2696%" y="191.50"></text></g><g><title>`0x7FFDA1AED864 (329 samples, 0.06%)</title><rect x="7.0196%" y="165" width="0.0567%" height="15" fill="rgb(210,16,53)" fg:x="40741" fg:w="329"/><text x="7.2696%" y="175.50"></text></g><g><title>`0x7FFDA1A7EEEE (457 samples, 0.08%)</title><rect x="7.0191%" y="197" width="0.0787%" height="15" fill="rgb(235,124,12)" fg:x="40738" fg:w="457"/><text x="7.2691%" y="207.50"></text></g><g><title>`0x7FFDA1AECE4B (71 samples, 0.01%)</title><rect x="7.0856%" y="181" width="0.0122%" height="15" fill="rgb(224,169,11)" fg:x="41124" fg:w="71"/><text x="7.3356%" y="191.50"></text></g><g><title>`0x7FFDA1A59B1A (71 samples, 0.01%)</title><rect x="7.0856%" y="165" width="0.0122%" height="15" fill="rgb(250,166,2)" fg:x="41124" fg:w="71"/><text x="7.3356%" y="175.50"></text></g><g><title>`0x7FFDA1AED924 (71 samples, 0.01%)</title><rect x="7.0856%" y="149" width="0.0122%" height="15" fill="rgb(242,216,29)" fg:x="41124" fg:w="71"/><text x="7.3356%" y="159.50"></text></g><g><title>`0x7FFDA1A7EF1C (65 samples, 0.01%)</title><rect x="7.0980%" y="197" width="0.0112%" height="15" fill="rgb(230,116,27)" fg:x="41196" fg:w="65"/><text x="7.3480%" y="207.50"></text></g><g><title>`0x7FFDA1A7B44D (733 samples, 0.13%)</title><rect x="6.9884%" y="213" width="0.1263%" height="15" fill="rgb(228,99,48)" fg:x="40560" fg:w="733"/><text x="7.2384%" y="223.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity (744 samples, 0.13%)</title><rect x="6.9872%" y="277" width="0.1282%" height="15" fill="rgb(253,11,6)" fg:x="40553" fg:w="744"/><text x="7.2372%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (744 samples, 0.13%)</title><rect x="6.9872%" y="261" width="0.1282%" height="15" fill="rgb(247,143,39)" fg:x="40553" fg:w="744"/><text x="7.2372%" y="271.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (744 samples, 0.13%)</title><rect x="6.9872%" y="245" width="0.1282%" height="15" fill="rgb(236,97,10)" fg:x="40553" fg:w="744"/><text x="7.2372%" y="255.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (744 samples, 0.13%)</title><rect x="6.9872%" y="229" width="0.1282%" height="15" fill="rgb(233,208,19)" fg:x="40553" fg:w="744"/><text x="7.2372%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$2::checked_add (2,401 samples, 0.41%)</title><rect x="7.1154%" y="277" width="0.4137%" height="15" fill="rgb(216,164,2)" fg:x="41297" fg:w="2401"/><text x="7.3654%" y="287.50"></text></g><g><title>1brc.exe`core::num::impl$2::overflowing_add (662 samples, 0.11%)</title><rect x="7.4150%" y="261" width="0.1141%" height="15" fill="rgb(220,129,5)" fg:x="43036" fg:w="662"/><text x="7.6650%" y="271.50"></text></g><g><title>`0x7FFDA1A59B1A (1,216 samples, 0.21%)</title><rect x="7.5312%" y="213" width="0.2095%" height="15" fill="rgb(242,17,10)" fg:x="43710" fg:w="1216"/><text x="7.7812%" y="223.50"></text></g><g><title>`0x7FFDA1AED924 (1,214 samples, 0.21%)</title><rect x="7.5315%" y="197" width="0.2092%" height="15" fill="rgb(242,107,0)" fg:x="43712" fg:w="1214"/><text x="7.7815%" y="207.50"></text></g><g><title>`0x7FFDA1A76F37 (1,217 samples, 0.21%)</title><rect x="7.5312%" y="229" width="0.2097%" height="15" fill="rgb(251,28,31)" fg:x="43710" fg:w="1217"/><text x="7.7812%" y="239.50"></text></g><g><title>`0x7FFDA1A75B74 (1,226 samples, 0.21%)</title><rect x="7.5301%" y="245" width="0.2112%" height="15" fill="rgb(233,223,10)" fg:x="43704" fg:w="1226"/><text x="7.7801%" y="255.50"></text></g><g><title>`0x7FFDA1AF776F (93 samples, 0.02%)</title><rect x="7.7420%" y="245" width="0.0160%" height="15" fill="rgb(215,21,27)" fg:x="44934" fg:w="93"/><text x="7.9920%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(std::io::buffered::bufreader::BufReader (1,329 samples, 0.23%)</title><rect x="7.5293%" y="277" width="0.2290%" height="15" fill="rgb(232,23,21)" fg:x="43699" fg:w="1329"/><text x="7.7793%" y="287.50"></text></g><g><title>`0x7FFDA1A747B1 (1,324 samples, 0.23%)</title><rect x="7.5301%" y="261" width="0.2281%" height="15" fill="rgb(244,5,23)" fg:x="43704" fg:w="1324"/><text x="7.7801%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (779 samples, 0.13%)</title><rect x="7.7582%" y="277" width="0.1342%" height="15" fill="rgb(226,81,46)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="287.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (779 samples, 0.13%)</title><rect x="7.7582%" y="261" width="0.1342%" height="15" fill="rgb(247,70,30)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (779 samples, 0.13%)</title><rect x="7.7582%" y="245" width="0.1342%" height="15" fill="rgb(212,68,19)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (779 samples, 0.13%)</title><rect x="7.7582%" y="229" width="0.1342%" height="15" fill="rgb(240,187,13)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (779 samples, 0.13%)</title><rect x="7.7582%" y="213" width="0.1342%" height="15" fill="rgb(223,113,26)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::Vec (779 samples, 0.13%)</title><rect x="7.7582%" y="197" width="0.1342%" height="15" fill="rgb(206,192,2)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (779 samples, 0.13%)</title><rect x="7.7582%" y="181" width="0.1342%" height="15" fill="rgb(241,108,4)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="191.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (779 samples, 0.13%)</title><rect x="7.7582%" y="165" width="0.1342%" height="15" fill="rgb(247,173,49)" fg:x="45028" fg:w="779"/><text x="8.0082%" y="175.50"></text></g><g><title>`0x7FFD9F541075 (765 samples, 0.13%)</title><rect x="7.7607%" y="149" width="0.1318%" height="15" fill="rgb(224,114,35)" fg:x="45042" fg:w="765"/><text x="8.0107%" y="159.50"></text></g><g><title>`0x7FFDA1AED744 (761 samples, 0.13%)</title><rect x="7.7613%" y="133" width="0.1311%" height="15" fill="rgb(245,159,27)" fg:x="45046" fg:w="761"/><text x="8.0113%" y="143.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (9,257 samples, 1.59%)</title><rect x="7.8926%" y="261" width="1.5950%" height="15" fill="rgb(245,172,44)" fg:x="45808" fg:w="9257"/><text x="8.1426%" y="271.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (9,257 samples, 1.59%)</title><rect x="7.8926%" y="245" width="1.5950%" height="15" fill="rgb(236,23,11)" fg:x="45808" fg:w="9257"/><text x="8.1426%" y="255.50"></text></g><g><title>1brc.exe`1brc::input_multithreaded::closure$0::closure$1 (2,748 samples, 0.47%)</title><rect x="16.5697%" y="245" width="0.4735%" height="15" fill="rgb(205,117,38)" fg:x="96169" fg:w="2748"/><text x="16.8197%" y="255.50"></text></g><g><title>1brc.exe`core::slice::impl$0::rsplit_once(ref$&lt;slice2$ (65,374 samples, 11.26%)</title><rect x="7.8925%" y="277" width="11.2638%" height="15" fill="rgb(237,72,25)" fg:x="45807" fg:w="65374"/><text x="8.1425%" y="287.50">1brc.exe`core::sl..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::rposition(core::slice::iter::Iter (56,116 samples, 9.67%)</title><rect x="9.4876%" y="261" width="9.6687%" height="15" fill="rgb(244,70,9)" fg:x="55065" fg:w="56116"/><text x="9.7376%" y="271.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::slice::iter::impl$182::next_back(core::slice::iter::Iter (12,264 samples, 2.11%)</title><rect x="17.0432%" y="245" width="2.1131%" height="15" fill="rgb(217,125,39)" fg:x="98917" fg:w="12264"/><text x="17.2932%" y="255.50">1..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (10,387 samples, 1.79%)</title><rect x="17.3666%" y="229" width="1.7897%" height="15" fill="rgb(235,36,10)" fg:x="100794" fg:w="10387"/><text x="17.6166%" y="239.50">1..</text></g><g><title>1brc.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multithreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;u8&gt;,1brc::input_multithreaded::closure$0::closure_env$3&gt; &gt;*, tuple$ (40,935 samples, 7.05%)</title><rect x="22.1612%" y="229" width="7.0530%" height="15" fill="rgb(251,123,47)" fg:x="128621" fg:w="40935"/><text x="22.4112%" y="239.50">1brc.exe`..</text></g><g><title>1brc.exe`1brc::input_multithreaded::closure$0::closure$2 (3,385 samples, 0.58%)</title><rect x="28.6310%" y="213" width="0.5832%" height="15" fill="rgb(221,13,13)" fg:x="166171" fg:w="3385"/><text x="28.8810%" y="223.50"></text></g><g><title>1brc.exe`core::num::impl$11::unchecked_add (2,885 samples, 0.50%)</title><rect x="29.2142%" y="229" width="0.4971%" height="15" fill="rgb(238,131,9)" fg:x="169556" fg:w="2885"/><text x="29.4642%" y="239.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u8&gt;,1brc::input_multithreaded::closure$0::closure_env$2&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (61,751 samples, 10.64%)</title><rect x="19.1563%" y="261" width="10.6396%" height="15" fill="rgb(211,50,8)" fg:x="111181" fg:w="61751"/><text x="19.4063%" y="271.50">1brc.exe`core::i..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multithreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (61,751 samples, 10.64%)</title><rect x="19.1563%" y="245" width="10.6396%" height="15" fill="rgb(245,182,24)" fg:x="111181" fg:w="61751"/><text x="19.4063%" y="255.50">1brc.exe`core::s..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (491 samples, 0.08%)</title><rect x="29.7113%" y="229" width="0.0846%" height="15" fill="rgb(242,14,37)" fg:x="172441" fg:w="491"/><text x="29.9613%" y="239.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (64,200 samples, 11.06%)</title><rect x="19.1563%" y="277" width="11.0615%" height="15" fill="rgb(246,228,12)" fg:x="111181" fg:w="64200"/><text x="19.4063%" y="287.50">1brc.exe`core::s..</text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (2,449 samples, 0.42%)</title><rect x="29.7959%" y="261" width="0.4220%" height="15" fill="rgb(213,55,15)" fg:x="172932" fg:w="2449"/><text x="30.0459%" y="271.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (2,449 samples, 0.42%)</title><rect x="29.7959%" y="245" width="0.4220%" height="15" fill="rgb(209,9,3)" fg:x="172932" fg:w="2449"/><text x="30.0459%" y="255.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (2,449 samples, 0.42%)</title><rect x="29.7959%" y="229" width="0.4220%" height="15" fill="rgb(230,59,30)" fg:x="172932" fg:w="2449"/><text x="30.0459%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (2,449 samples, 0.42%)</title><rect x="29.7959%" y="213" width="0.4220%" height="15" fill="rgb(209,121,21)" fg:x="172932" fg:w="2449"/><text x="30.0459%" y="223.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (28,003 samples, 4.82%)</title><rect x="31.1276%" y="261" width="4.8249%" height="15" fill="rgb(220,109,13)" fg:x="180661" fg:w="28003"/><text x="31.3776%" y="271.50">1brc.e..</text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (28,003 samples, 4.82%)</title><rect x="31.1276%" y="245" width="4.8249%" height="15" fill="rgb(232,18,1)" fg:x="180661" fg:w="28003"/><text x="31.3776%" y="255.50">1brc.e..</text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (28,003 samples, 4.82%)</title><rect x="31.1276%" y="229" width="4.8249%" height="15" fill="rgb(215,41,42)" fg:x="180661" fg:w="28003"/><text x="31.3776%" y="239.50">1brc.e..</text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (28,003 samples, 4.82%)</title><rect x="31.1276%" y="213" width="4.8249%" height="15" fill="rgb(224,123,36)" fg:x="180661" fg:w="28003"/><text x="31.3776%" y="223.50">1brc.e..</text></g><g><title>1brc.exe`core::slice::iter::impl$16::next::closure$0(core::slice::iter::impl$16::next::closure_env$0 (4,498 samples, 0.77%)</title><rect x="45.1087%" y="245" width="0.7750%" height="15" fill="rgb(240,125,3)" fg:x="261806" fg:w="4498"/><text x="45.3587%" y="255.50"></text></g><g><title>1brc.exe`1brc::input_multithreaded::closure$0::closure$0 (4,498 samples, 0.77%)</title><rect x="45.1087%" y="229" width="0.7750%" height="15" fill="rgb(205,98,50)" fg:x="261806" fg:w="4498"/><text x="45.3587%" y="239.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$16::next(core::slice::iter::Split (110,729 samples, 19.08%)</title><rect x="30.2178%" y="277" width="19.0784%" height="15" fill="rgb(205,185,37)" fg:x="175381" fg:w="110729"/><text x="30.4678%" y="287.50">1brc.exe`core::slice::iter::im..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::position(core::slice::iter::Iter&lt;u8&gt;*, core::slice::iter::impl$16::next::closure_env$0 (77,446 samples, 13.34%)</title><rect x="35.9524%" y="261" width="13.3438%" height="15" fill="rgb(238,207,15)" fg:x="208664" fg:w="77446"/><text x="36.2024%" y="271.50">1brc.exe`core::slice..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (19,806 samples, 3.41%)</title><rect x="45.8837%" y="245" width="3.4125%" height="15" fill="rgb(213,199,42)" fg:x="266304" fg:w="19806"/><text x="46.1337%" y="255.50">1br..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (11,612 samples, 2.00%)</title><rect x="47.2955%" y="229" width="2.0007%" height="15" fill="rgb(235,201,11)" fg:x="274498" fg:w="11612"/><text x="47.5455%" y="239.50">1..</text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (62 samples, 0.01%)</title><rect x="49.3074%" y="165" width="0.0107%" height="15" fill="rgb(207,46,11)" fg:x="286175" fg:w="62"/><text x="49.5574%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (62 samples, 0.01%)</title><rect x="49.3074%" y="149" width="0.0107%" height="15" fill="rgb(241,35,35)" fg:x="286175" fg:w="62"/><text x="49.5574%" y="159.50"></text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (62 samples, 0.01%)</title><rect x="49.3074%" y="133" width="0.0107%" height="15" fill="rgb(243,32,47)" fg:x="286175" fg:w="62"/><text x="49.5574%" y="143.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (62 samples, 0.01%)</title><rect x="49.3074%" y="117" width="0.0107%" height="15" fill="rgb(247,202,23)" fg:x="286175" fg:w="62"/><text x="49.5574%" y="127.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (62 samples, 0.01%)</title><rect x="49.3074%" y="101" width="0.0107%" height="15" fill="rgb(219,102,11)" fg:x="286175" fg:w="62"/><text x="49.5574%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (64 samples, 0.01%)</title><rect x="49.3074%" y="181" width="0.0110%" height="15" fill="rgb(243,110,44)" fg:x="286175" fg:w="64"/><text x="49.5574%" y="191.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;ref_mut$&lt;1brc::StationStats&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;ref_mut$ (131 samples, 0.02%)</title><rect x="49.2962%" y="277" width="0.0226%" height="15" fill="rgb(222,74,54)" fg:x="286110" fg:w="131"/><text x="49.5462%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global,slice2$&lt;u8&gt; &gt;(ref$&lt;slice2$ (130 samples, 0.02%)</title><rect x="49.2964%" y="261" width="0.0224%" height="15" fill="rgb(216,99,12)" fg:x="286111" fg:w="130"/><text x="49.5464%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_inner_mut(ref$&lt;slice2$ (123 samples, 0.02%)</title><rect x="49.2976%" y="245" width="0.0212%" height="15" fill="rgb(226,22,26)" fg:x="286118" fg:w="123"/><text x="49.5476%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (95 samples, 0.02%)</title><rect x="49.3025%" y="229" width="0.0164%" height="15" fill="rgb(217,163,10)" fg:x="286146" fg:w="95"/><text x="49.5525%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (90 samples, 0.02%)</title><rect x="49.3033%" y="213" width="0.0155%" height="15" fill="rgb(213,25,53)" fg:x="286151" fg:w="90"/><text x="49.5533%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (86 samples, 0.01%)</title><rect x="49.3040%" y="197" width="0.0148%" height="15" fill="rgb(252,105,26)" fg:x="286155" fg:w="86"/><text x="49.5540%" y="207.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;::expect(enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;, ref$ (805 samples, 0.14%)</title><rect x="49.3188%" y="277" width="0.1387%" height="15" fill="rgb(220,39,43)" fg:x="286241" fg:w="805"/><text x="49.5688%" y="287.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::finish (11,115 samples, 1.92%)</title><rect x="56.3445%" y="229" width="1.9151%" height="15" fill="rgb(229,68,48)" fg:x="327017" fg:w="11115"/><text x="56.5945%" y="239.50">1..</text></g><g><title>1brc.exe`ahash::operations::folded_multiply (11,115 samples, 1.92%)</title><rect x="56.3445%" y="213" width="1.9151%" height="15" fill="rgb(252,8,32)" fg:x="327017" fg:w="11115"/><text x="56.5945%" y="223.50">1..</text></g><g><title>1brc.exe`core::num::impl$10::wrapping_mul (8,631 samples, 1.49%)</title><rect x="56.7724%" y="197" width="1.4871%" height="15" fill="rgb(223,20,43)" fg:x="329501" fg:w="8631"/><text x="57.0224%" y="207.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_length_prefix (5,027 samples, 0.87%)</title><rect x="58.2595%" y="213" width="0.8661%" height="15" fill="rgb(229,81,49)" fg:x="338132" fg:w="5027"/><text x="58.5095%" y="223.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write_usize (5,027 samples, 0.87%)</title><rect x="58.2595%" y="197" width="0.8661%" height="15" fill="rgb(236,28,36)" fg:x="338132" fg:w="5027"/><text x="58.5095%" y="207.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write_u64 (5,027 samples, 0.87%)</title><rect x="58.2595%" y="181" width="0.8661%" height="15" fill="rgb(249,185,26)" fg:x="338132" fg:w="5027"/><text x="58.5095%" y="191.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::AHasher::update (5,027 samples, 0.87%)</title><rect x="58.2595%" y="165" width="0.8661%" height="15" fill="rgb(249,174,33)" fg:x="338132" fg:w="5027"/><text x="58.5095%" y="175.50"></text></g><g><title>1brc.exe`ahash::operations::folded_multiply (3,281 samples, 0.57%)</title><rect x="58.5604%" y="149" width="0.5653%" height="15" fill="rgb(233,201,37)" fg:x="339878" fg:w="3281"/><text x="58.8104%" y="159.50"></text></g><g><title>1brc.exe`core::num::impl$10::wrapping_mul (3,255 samples, 0.56%)</title><rect x="58.5649%" y="133" width="0.5608%" height="15" fill="rgb(221,78,26)" fg:x="339904" fg:w="3255"/><text x="58.8149%" y="143.50"></text></g><g><title>1brc.exe`ahash::operations::folded_multiply (6,905 samples, 1.19%)</title><rect x="59.9946%" y="165" width="1.1897%" height="15" fill="rgb(250,127,30)" fg:x="348202" fg:w="6905"/><text x="60.2446%" y="175.50"></text></g><g><title>1brc.exe`core::num::impl$10::wrapping_mul (3,219 samples, 0.55%)</title><rect x="60.6297%" y="149" width="0.5546%" height="15" fill="rgb(230,49,44)" fg:x="351888" fg:w="3219"/><text x="60.8797%" y="159.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::AHasher::large_update (16,460 samples, 2.84%)</title><rect x="59.3897%" y="181" width="2.8360%" height="15" fill="rgb(229,67,23)" fg:x="344691" fg:w="16460"/><text x="59.6397%" y="191.50">1b..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (6,044 samples, 1.04%)</title><rect x="61.1843%" y="165" width="1.0414%" height="15" fill="rgb(249,83,47)" fg:x="355107" fg:w="6044"/><text x="61.4343%" y="175.50"></text></g><g><title>1brc.exe`ahash::operations::read_small(ref$&lt;slice2$ (3,894 samples, 0.67%)</title><rect x="62.2257%" y="181" width="0.6709%" height="15" fill="rgb(215,43,3)" fg:x="361151" fg:w="3894"/><text x="62.4757%" y="191.50"></text></g><g><title>1brc.exe`ahash::convert::impl$0::read_last_u32(ref$&lt;slice2$ (1,874 samples, 0.32%)</title><rect x="62.5737%" y="165" width="0.3229%" height="15" fill="rgb(238,154,13)" fg:x="363171" fg:w="1874"/><text x="62.8237%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;*, ref$&lt;slice2$ (44,144 samples, 7.61%)</title><rect x="56.3445%" y="245" width="7.6059%" height="15" fill="rgb(219,56,2)" fg:x="327017" fg:w="44144"/><text x="56.5945%" y="255.50">1brc.exe`h..</text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (33,029 samples, 5.69%)</title><rect x="58.2595%" y="229" width="5.6908%" height="15" fill="rgb(233,0,4)" fg:x="338132" fg:w="33029"/><text x="58.5095%" y="239.50">1brc.ex..</text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (28,002 samples, 4.82%)</title><rect x="59.1257%" y="213" width="4.8247%" height="15" fill="rgb(235,30,7)" fg:x="343159" fg:w="28002"/><text x="59.3757%" y="223.50">1brc.e..</text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (28,002 samples, 4.82%)</title><rect x="59.1257%" y="197" width="4.8247%" height="15" fill="rgb(250,79,13)" fg:x="343159" fg:w="28002"/><text x="59.3757%" y="207.50">1brc.e..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (6,116 samples, 1.05%)</title><rect x="62.8966%" y="181" width="1.0538%" height="15" fill="rgb(211,146,34)" fg:x="365045" fg:w="6116"/><text x="63.1466%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::bucket (3,364 samples, 0.58%)</title><rect x="64.6711%" y="213" width="0.5796%" height="15" fill="rgb(228,22,38)" fg:x="375344" fg:w="3364"/><text x="64.9211%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;ref$&lt;slice2$ (3,364 samples, 0.58%)</title><rect x="64.6711%" y="197" width="0.5796%" height="15" fill="rgb(235,168,5)" fg:x="375344" fg:w="3364"/><text x="64.9211%" y="207.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (3,364 samples, 0.58%)</title><rect x="64.6711%" y="181" width="0.5796%" height="15" fill="rgb(221,155,16)" fg:x="375344" fg:w="3364"/><text x="64.9211%" y="191.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (3,364 samples, 0.58%)</title><rect x="64.6711%" y="165" width="0.5796%" height="15" fill="rgb(215,215,53)" fg:x="375344" fg:w="3364"/><text x="64.9211%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::impl$3::next (10,480 samples, 1.81%)</title><rect x="66.1277%" y="197" width="1.8057%" height="15" fill="rgb(223,4,10)" fg:x="383798" fg:w="10480"/><text x="66.3777%" y="207.50">1..</text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (10,480 samples, 1.81%)</title><rect x="66.1277%" y="181" width="1.8057%" height="15" fill="rgb(234,103,6)" fg:x="383798" fg:w="10480"/><text x="66.3777%" y="191.50">1..</text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros(core::num::nonzero::NonZero (686 samples, 0.12%)</title><rect x="67.8152%" y="165" width="0.1182%" height="15" fill="rgb(227,97,0)" fg:x="393592" fg:w="686"/><text x="68.0652%" y="175.50"></text></g><g><title>1brc.exe`core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros(core::num::nonzero::NonZero (686 samples, 0.12%)</title><rect x="67.8152%" y="149" width="0.1182%" height="15" fill="rgb(234,150,53)" fg:x="393592" fg:w="686"/><text x="68.0652%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (13,709 samples, 2.36%)</title><rect x="67.9334%" y="197" width="2.3620%" height="15" fill="rgb(228,201,54)" fg:x="394278" fg:w="13709"/><text x="68.1834%" y="207.50">1b..</text></g><g><title>`0x7FFD7EDB1100 (377 samples, 0.06%)</title><rect x="76.0916%" y="101" width="0.0650%" height="15" fill="rgb(222,22,37)" fg:x="441627" fg:w="377"/><text x="76.3416%" y="111.50"></text></g><g><title>`0x7FFD7EDB1103 (1,942 samples, 0.33%)</title><rect x="76.1565%" y="101" width="0.3346%" height="15" fill="rgb(237,53,32)" fg:x="442004" fg:w="1942"/><text x="76.4065%" y="111.50"></text></g><g><title>`0x7FFD7EDB1107 (680 samples, 0.12%)</title><rect x="76.4911%" y="101" width="0.1172%" height="15" fill="rgb(233,25,53)" fg:x="443946" fg:w="680"/><text x="76.7411%" y="111.50"></text></g><g><title>`0x7FFD7EDB110C (242 samples, 0.04%)</title><rect x="76.6083%" y="101" width="0.0417%" height="15" fill="rgb(210,40,34)" fg:x="444626" fg:w="242"/><text x="76.8583%" y="111.50"></text></g><g><title>`0x7FFD7EDB110E (101 samples, 0.02%)</title><rect x="76.6500%" y="101" width="0.0174%" height="15" fill="rgb(241,220,44)" fg:x="444868" fg:w="101"/><text x="76.9000%" y="111.50"></text></g><g><title>`0x7FFD7EDB1112 (2,104 samples, 0.36%)</title><rect x="76.6724%" y="101" width="0.3625%" height="15" fill="rgb(235,28,35)" fg:x="444998" fg:w="2104"/><text x="76.9224%" y="111.50"></text></g><g><title>`0x7FFD7EDB1115 (11,048 samples, 1.90%)</title><rect x="77.0349%" y="101" width="1.9036%" height="15" fill="rgb(210,56,17)" fg:x="447102" fg:w="11048"/><text x="77.2849%" y="111.50">`..</text></g><g><title>`0x7FFD7EDB111A (212 samples, 0.04%)</title><rect x="78.9395%" y="101" width="0.0365%" height="15" fill="rgb(224,130,29)" fg:x="458156" fg:w="212"/><text x="79.1895%" y="111.50"></text></g><g><title>`0x7FFD7EDB111D (605 samples, 0.10%)</title><rect x="78.9760%" y="101" width="0.1042%" height="15" fill="rgb(235,212,8)" fg:x="458368" fg:w="605"/><text x="79.2260%" y="111.50"></text></g><g><title>`0x7FFD7EDB1120 (733 samples, 0.13%)</title><rect x="79.0802%" y="101" width="0.1263%" height="15" fill="rgb(223,33,50)" fg:x="458973" fg:w="733"/><text x="79.3302%" y="111.50"></text></g><g><title>`0x7FFD7EDB1125 (3,173 samples, 0.55%)</title><rect x="79.2069%" y="101" width="0.5467%" height="15" fill="rgb(219,149,13)" fg:x="459708" fg:w="3173"/><text x="79.4569%" y="111.50"></text></g><g><title>`0x7FFD7EDB1129 (474 samples, 0.08%)</title><rect x="79.7536%" y="101" width="0.0817%" height="15" fill="rgb(250,156,29)" fg:x="462881" fg:w="474"/><text x="80.0036%" y="111.50"></text></g><g><title>`0x7FFD7EDB112B (467 samples, 0.08%)</title><rect x="79.8352%" y="101" width="0.0805%" height="15" fill="rgb(216,193,19)" fg:x="463355" fg:w="467"/><text x="80.0852%" y="111.50"></text></g><g><title>`0x7FFD7EDB112E (971 samples, 0.17%)</title><rect x="79.9157%" y="101" width="0.1673%" height="15" fill="rgb(216,135,14)" fg:x="463822" fg:w="971"/><text x="80.1657%" y="111.50"></text></g><g><title>`0x7FFD7EDB1130 (2,066 samples, 0.36%)</title><rect x="80.0830%" y="101" width="0.3560%" height="15" fill="rgb(241,47,5)" fg:x="464793" fg:w="2066"/><text x="80.3330%" y="111.50"></text></g><g><title>`0x7FFD7EDB1132 (7,034 samples, 1.21%)</title><rect x="80.4390%" y="101" width="1.2119%" height="15" fill="rgb(233,42,35)" fg:x="466859" fg:w="7034"/><text x="80.6890%" y="111.50"></text></g><g><title>`0x7FFD7EDB1135 (19,466 samples, 3.35%)</title><rect x="81.6509%" y="101" width="3.3540%" height="15" fill="rgb(231,13,6)" fg:x="473893" fg:w="19466"/><text x="81.9009%" y="111.50">`0x..</text></g><g><title>`0x7FFD7EDB1137 (462 samples, 0.08%)</title><rect x="85.0049%" y="101" width="0.0796%" height="15" fill="rgb(207,181,40)" fg:x="493359" fg:w="462"/><text x="85.2549%" y="111.50"></text></g><g><title>`0x7FFD7EDB113A (770 samples, 0.13%)</title><rect x="85.0845%" y="101" width="0.1327%" height="15" fill="rgb(254,173,49)" fg:x="493821" fg:w="770"/><text x="85.3345%" y="111.50"></text></g><g><title>`0x7FFD7EDB113D (517 samples, 0.09%)</title><rect x="85.2172%" y="101" width="0.0891%" height="15" fill="rgb(221,1,38)" fg:x="494591" fg:w="517"/><text x="85.4672%" y="111.50"></text></g><g><title>`0x7FFD7EDB113F (482 samples, 0.08%)</title><rect x="85.3062%" y="101" width="0.0830%" height="15" fill="rgb(206,124,46)" fg:x="495108" fg:w="482"/><text x="85.5562%" y="111.50"></text></g><g><title>`0x7FFD7EDB1142 (2,816 samples, 0.49%)</title><rect x="85.3893%" y="101" width="0.4852%" height="15" fill="rgb(249,21,11)" fg:x="495590" fg:w="2816"/><text x="85.6393%" y="111.50"></text></g><g><title>`0x7FFD7EDB1145 (60 samples, 0.01%)</title><rect x="85.8745%" y="101" width="0.0103%" height="15" fill="rgb(222,201,40)" fg:x="498406" fg:w="60"/><text x="86.1245%" y="111.50"></text></g><g><title>`0x7FFD7EDB114A (206 samples, 0.04%)</title><rect x="85.8853%" y="101" width="0.0355%" height="15" fill="rgb(235,61,29)" fg:x="498469" fg:w="206"/><text x="86.1353%" y="111.50"></text></g><g><title>`0x7FFD7EDB114E (406 samples, 0.07%)</title><rect x="85.9208%" y="101" width="0.0700%" height="15" fill="rgb(219,207,3)" fg:x="498675" fg:w="406"/><text x="86.1708%" y="111.50"></text></g><g><title>`0x7FFD7EDB1187 (321 samples, 0.06%)</title><rect x="85.9908%" y="101" width="0.0553%" height="15" fill="rgb(222,56,46)" fg:x="499081" fg:w="321"/><text x="86.2408%" y="111.50"></text></g><g><title>`0x7FFD7EDB118E (77 samples, 0.01%)</title><rect x="86.0545%" y="101" width="0.0133%" height="15" fill="rgb(239,76,54)" fg:x="499451" fg:w="77"/><text x="86.3045%" y="111.50"></text></g><g><title>`0x7FFD7EDB1190 (299 samples, 0.05%)</title><rect x="86.0678%" y="101" width="0.0515%" height="15" fill="rgb(231,124,27)" fg:x="499528" fg:w="299"/><text x="86.3178%" y="111.50"></text></g><g><title>`0x7FFD7EDB1193 (1,031 samples, 0.18%)</title><rect x="86.1193%" y="101" width="0.1776%" height="15" fill="rgb(249,195,6)" fg:x="499827" fg:w="1031"/><text x="86.3693%" y="111.50"></text></g><g><title>`0x7FFD7EDB1197 (1,285 samples, 0.22%)</title><rect x="86.2969%" y="101" width="0.2214%" height="15" fill="rgb(237,174,47)" fg:x="500858" fg:w="1285"/><text x="86.5469%" y="111.50"></text></g><g><title>`0x7FFD7EDB11A2 (108 samples, 0.02%)</title><rect x="86.5213%" y="101" width="0.0186%" height="15" fill="rgb(206,201,31)" fg:x="502160" fg:w="108"/><text x="86.7713%" y="111.50"></text></g><g><title>`0x7FFD7EDB11A6 (73 samples, 0.01%)</title><rect x="86.5399%" y="101" width="0.0126%" height="15" fill="rgb(231,57,52)" fg:x="502268" fg:w="73"/><text x="86.7899%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (94,359 samples, 16.26%)</title><rect x="70.2954%" y="181" width="16.2579%" height="15" fill="rgb(248,177,22)" fg:x="407987" fg:w="94359"/><text x="70.5454%" y="191.50">1brc.exe`hashbrown::map::..</text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (94,359 samples, 16.26%)</title><rect x="70.2954%" y="165" width="16.2579%" height="15" fill="rgb(215,211,37)" fg:x="407987" fg:w="94359"/><text x="70.5454%" y="175.50">1brc.exe`hashbrown::impl$..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (93,039 samples, 16.03%)</title><rect x="70.5229%" y="149" width="16.0305%" height="15" fill="rgb(241,128,51)" fg:x="409307" fg:w="93039"/><text x="70.7729%" y="159.50">1brc.exe`core::cmp::impls..</text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (93,039 samples, 16.03%)</title><rect x="70.5229%" y="133" width="16.0305%" height="15" fill="rgb(227,165,31)" fg:x="409307" fg:w="93039"/><text x="70.7729%" y="143.50">1brc.exe`core::slice::cmp..</text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (93,039 samples, 16.03%)</title><rect x="70.5229%" y="117" width="16.0305%" height="15" fill="rgb(228,167,24)" fg:x="409307" fg:w="93039"/><text x="70.7729%" y="127.50">1brc.exe`core::slice::cmp..</text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (97,983 samples, 16.88%)</title><rect x="70.2954%" y="197" width="16.8823%" height="15" fill="rgb(228,143,12)" fg:x="407987" fg:w="97983"/><text x="70.5454%" y="207.50">1brc.exe`hashbrown::raw::i..</text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ref (3,624 samples, 0.62%)</title><rect x="86.5533%" y="181" width="0.6244%" height="15" fill="rgb(249,149,8)" fg:x="502346" fg:w="3624"/><text x="86.8033%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ptr (3,624 samples, 0.62%)</title><rect x="86.5533%" y="165" width="0.6244%" height="15" fill="rgb(243,35,44)" fg:x="502346" fg:w="3624"/><text x="86.8033%" y="175.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (3,624 samples, 0.62%)</title><rect x="86.5533%" y="149" width="0.6244%" height="15" fill="rgb(246,89,9)" fg:x="502346" fg:w="3624"/><text x="86.8033%" y="159.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (3,624 samples, 0.62%)</title><rect x="86.5533%" y="133" width="0.6244%" height="15" fill="rgb(233,213,13)" fg:x="502346" fg:w="3624"/><text x="86.8033%" y="143.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::load (1,499 samples, 0.26%)</title><rect x="87.1777%" y="197" width="0.2583%" height="15" fill="rgb(233,141,41)" fg:x="505970" fg:w="1499"/><text x="87.4277%" y="207.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (1,499 samples, 0.26%)</title><rect x="87.1777%" y="181" width="0.2583%" height="15" fill="rgb(239,167,4)" fg:x="505970" fg:w="1499"/><text x="87.4277%" y="191.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (1,499 samples, 0.26%)</title><rect x="87.1777%" y="165" width="0.2583%" height="15" fill="rgb(209,217,16)" fg:x="505970" fg:w="1499"/><text x="87.4277%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (7,717 samples, 1.33%)</title><rect x="87.4360%" y="197" width="1.3296%" height="15" fill="rgb(219,88,35)" fg:x="507469" fg:w="7717"/><text x="87.6860%" y="207.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (7,717 samples, 1.33%)</title><rect x="87.4360%" y="181" width="1.3296%" height="15" fill="rgb(220,193,23)" fg:x="507469" fg:w="7717"/><text x="87.6860%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global,slice2$&lt;u8&gt; &gt;(ref$&lt;slice2$ (229,168 samples, 39.49%)</title><rect x="49.4579%" y="277" width="39.4852%" height="15" fill="rgb(230,90,52)" fg:x="287048" fg:w="229168"/><text x="49.7079%" y="287.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::Statio..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_inner_mut(ref$&lt;slice2$ (195,231 samples, 33.64%)</title><rect x="55.3051%" y="261" width="33.6380%" height="15" fill="rgb(252,106,19)" fg:x="320985" fg:w="195231"/><text x="55.5551%" y="271.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1br..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (145,055 samples, 24.99%)</title><rect x="63.9504%" y="245" width="24.9927%" height="15" fill="rgb(206,74,20)" fg:x="371161" fg:w="145055"/><text x="64.2004%" y="255.50">1brc.exe`hashbrown::raw::RawTable&lt;tuple$..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (140,872 samples, 24.27%)</title><rect x="64.6711%" y="229" width="24.2720%" height="15" fill="rgb(230,138,44)" fg:x="375344" fg:w="140872"/><text x="64.9211%" y="239.50">1brc.exe`hashbrown::raw::RawTable&lt;tuple..</text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (137,508 samples, 23.69%)</title><rect x="65.2507%" y="213" width="23.6924%" height="15" fill="rgb(235,182,43)" fg:x="378708" fg:w="137508"/><text x="65.5007%" y="223.50">1brc.exe`hashbrown::raw::RawTableInner..</text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_empty (1,030 samples, 0.18%)</title><rect x="88.7656%" y="197" width="0.1775%" height="15" fill="rgb(242,16,51)" fg:x="515186" fg:w="1030"/><text x="89.0156%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (1,030 samples, 0.18%)</title><rect x="88.7656%" y="181" width="0.1775%" height="15" fill="rgb(248,9,4)" fg:x="515186" fg:w="1030"/><text x="89.0156%" y="191.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1,030 samples, 0.18%)</title><rect x="88.7656%" y="165" width="0.1775%" height="15" fill="rgb(210,31,22)" fg:x="515186" fg:w="1030"/><text x="89.0156%" y="175.50"></text></g><g><title>`0x7FFDA1A7B3C7 (70 samples, 0.01%)</title><rect x="88.9660%" y="69" width="0.0121%" height="15" fill="rgb(239,54,39)" fg:x="516349" fg:w="70"/><text x="89.2160%" y="79.50"></text></g><g><title>`0x7FFDA1A7B44D (121 samples, 0.02%)</title><rect x="88.9783%" y="69" width="0.0208%" height="15" fill="rgb(230,99,41)" fg:x="516420" fg:w="121"/><text x="89.2283%" y="79.50"></text></g><g><title>1brc.exe`hashbrown::raw::alloc::inner::do_alloc (215 samples, 0.04%)</title><rect x="88.9624%" y="133" width="0.0370%" height="15" fill="rgb(253,106,12)" fg:x="516328" fg:w="215"/><text x="89.2124%" y="143.50"></text></g><g><title>1brc.exe`allocator_api2::stable::alloc::global::impl$1::allocate (215 samples, 0.04%)</title><rect x="88.9624%" y="117" width="0.0370%" height="15" fill="rgb(213,46,41)" fg:x="516328" fg:w="215"/><text x="89.2124%" y="127.50"></text></g><g><title>1brc.exe`allocator_api2::stable::alloc::global::Global::alloc_impl (215 samples, 0.04%)</title><rect x="88.9624%" y="101" width="0.0370%" height="15" fill="rgb(215,133,35)" fg:x="516328" fg:w="215"/><text x="89.2124%" y="111.50"></text></g><g><title>1brc.exe`alloc::alloc::alloc (215 samples, 0.04%)</title><rect x="88.9624%" y="85" width="0.0370%" height="15" fill="rgb(213,28,5)" fg:x="516328" fg:w="215"/><text x="89.2124%" y="95.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0&lt;allocator_api2::stable::alloc::global::Global&gt; &gt;,enum2$ (227 samples, 0.04%)</title><rect x="88.9619%" y="197" width="0.0391%" height="15" fill="rgb(215,77,49)" fg:x="516325" fg:w="227"/><text x="89.2119%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_resize&lt;allocator_api2::stable::alloc::global::Global&gt; (227 samples, 0.04%)</title><rect x="88.9619%" y="181" width="0.0391%" height="15" fill="rgb(248,100,22)" fg:x="516325" fg:w="227"/><text x="89.2119%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (224 samples, 0.04%)</title><rect x="88.9624%" y="165" width="0.0386%" height="15" fill="rgb(208,67,9)" fg:x="516328" fg:w="224"/><text x="89.2124%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::new_uninitialized (224 samples, 0.04%)</title><rect x="88.9624%" y="149" width="0.0386%" height="15" fill="rgb(219,133,21)" fg:x="516328" fg:w="224"/><text x="89.2124%" y="159.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt; &gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault (417 samples, 0.07%)</title><rect x="88.9488%" y="245" width="0.0718%" height="15" fill="rgb(246,46,29)" fg:x="516249" fg:w="417"/><text x="89.1988%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(allocator_api2::stable::alloc::global::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (410 samples, 0.07%)</title><rect x="88.9500%" y="229" width="0.0706%" height="15" fill="rgb(246,185,52)" fg:x="516256" fg:w="410"/><text x="89.2000%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::resize_inner(allocator_api2::stable::alloc::global::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (410 samples, 0.07%)</title><rect x="88.9500%" y="213" width="0.0706%" height="15" fill="rgb(252,136,11)" fg:x="516256" fg:w="410"/><text x="89.2000%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault (469 samples, 0.08%)</title><rect x="88.9478%" y="261" width="0.0808%" height="15" fill="rgb(219,138,53)" fg:x="516243" fg:w="469"/><text x="89.1978%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::insert(ref$&lt;slice2$ (507 samples, 0.09%)</title><rect x="88.9431%" y="277" width="0.0874%" height="15" fill="rgb(211,51,23)" fg:x="516216" fg:w="507"/><text x="89.1931%" y="287.50"></text></g><g><title>`0x7FFDA1A7D357 (97 samples, 0.02%)</title><rect x="89.0322%" y="197" width="0.0167%" height="15" fill="rgb(247,221,28)" fg:x="516733" fg:w="97"/><text x="89.2822%" y="207.50"></text></g><g><title>`0x7FFDA1A7FAE2 (97 samples, 0.02%)</title><rect x="89.0322%" y="181" width="0.0167%" height="15" fill="rgb(251,222,45)" fg:x="516733" fg:w="97"/><text x="89.2822%" y="191.50"></text></g><g><title>`0x7FFDA1A7B44D (178 samples, 0.03%)</title><rect x="89.0322%" y="213" width="0.0307%" height="15" fill="rgb(217,162,53)" fg:x="516733" fg:w="178"/><text x="89.2822%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::len (189 samples, 0.03%)</title><rect x="89.0305%" y="277" width="0.0326%" height="15" fill="rgb(229,93,14)" fg:x="516723" fg:w="189"/><text x="89.2805%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (189 samples, 0.03%)</title><rect x="89.0305%" y="261" width="0.0326%" height="15" fill="rgb(209,67,49)" fg:x="516723" fg:w="189"/><text x="89.2805%" y="271.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (189 samples, 0.03%)</title><rect x="89.0305%" y="245" width="0.0326%" height="15" fill="rgb(213,87,29)" fg:x="516723" fg:w="189"/><text x="89.2805%" y="255.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::try_allocate_in (189 samples, 0.03%)</title><rect x="89.0305%" y="229" width="0.0326%" height="15" fill="rgb(205,151,52)" fg:x="516723" fg:w="189"/><text x="89.2805%" y="239.50"></text></g><g><title>`0x7FFDA1A6F43F (124 samples, 0.02%)</title><rect x="89.0678%" y="133" width="0.0214%" height="15" fill="rgb(253,215,39)" fg:x="516940" fg:w="124"/><text x="89.3178%" y="143.50"></text></g><g><title>`0x7FFDA1A7FAE2 (124 samples, 0.02%)</title><rect x="89.0678%" y="117" width="0.0214%" height="15" fill="rgb(221,220,41)" fg:x="516940" fg:w="124"/><text x="89.3178%" y="127.50"></text></g><g><title>`0x7FFDA1A6F44F (67 samples, 0.01%)</title><rect x="89.0892%" y="133" width="0.0115%" height="15" fill="rgb(218,133,21)" fg:x="517064" fg:w="67"/><text x="89.3392%" y="143.50"></text></g><g><title>`0x7FFDA1A7B44D (66 samples, 0.01%)</title><rect x="89.0894%" y="117" width="0.0114%" height="15" fill="rgb(221,193,43)" fg:x="517065" fg:w="66"/><text x="89.3394%" y="127.50"></text></g><g><title>`0x7FFDA1A7BEDA (203 samples, 0.03%)</title><rect x="89.0678%" y="165" width="0.0350%" height="15" fill="rgb(240,128,52)" fg:x="516940" fg:w="203"/><text x="89.3178%" y="175.50"></text></g><g><title>`0x7FFDA1A70B31 (203 samples, 0.03%)</title><rect x="89.0678%" y="149" width="0.0350%" height="15" fill="rgb(253,114,12)" fg:x="516940" fg:w="203"/><text x="89.3178%" y="159.50"></text></g><g><title>`0x7FFDA1A5A16F (166 samples, 0.03%)</title><rect x="89.1028%" y="149" width="0.0286%" height="15" fill="rgb(215,223,47)" fg:x="517143" fg:w="166"/><text x="89.3528%" y="159.50"></text></g><g><title>`0x7FFDA1A7BF5E (180 samples, 0.03%)</title><rect x="89.1028%" y="165" width="0.0310%" height="15" fill="rgb(248,225,23)" fg:x="517143" fg:w="180"/><text x="89.3528%" y="175.50"></text></g><g><title>`0x7FFDA1A7B3C7 (395 samples, 0.07%)</title><rect x="89.0661%" y="181" width="0.0681%" height="15" fill="rgb(250,108,0)" fg:x="516930" fg:w="395"/><text x="89.3161%" y="191.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;::new (401 samples, 0.07%)</title><rect x="89.0653%" y="277" width="0.0691%" height="15" fill="rgb(228,208,7)" fg:x="516925" fg:w="401"/><text x="89.3153%" y="287.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;::with_capacity (401 samples, 0.07%)</title><rect x="89.0653%" y="261" width="0.0691%" height="15" fill="rgb(244,45,10)" fg:x="516925" fg:w="401"/><text x="89.3153%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::with_capacity (401 samples, 0.07%)</title><rect x="89.0653%" y="245" width="0.0691%" height="15" fill="rgb(207,125,25)" fg:x="516925" fg:w="401"/><text x="89.3153%" y="255.50"></text></g><g><title>1brc.exe`alloc::boxed::impl$2::new_uninit_slice (401 samples, 0.07%)</title><rect x="89.0653%" y="229" width="0.0691%" height="15" fill="rgb(210,195,18)" fg:x="516925" fg:w="401"/><text x="89.3153%" y="239.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity (401 samples, 0.07%)</title><rect x="89.0653%" y="213" width="0.0691%" height="15" fill="rgb(249,80,12)" fg:x="516925" fg:w="401"/><text x="89.3153%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (401 samples, 0.07%)</title><rect x="89.0653%" y="197" width="0.0691%" height="15" fill="rgb(221,65,9)" fg:x="516925" fg:w="401"/><text x="89.3153%" y="207.50"></text></g><g><title>1brc.exe`std::io::default_read_exact&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (58,868 samples, 10.14%)</title><rect x="89.1380%" y="277" width="10.1429%" height="15" fill="rgb(235,49,36)" fg:x="517347" fg:w="58868"/><text x="89.3880%" y="287.50">1brc.exe`std::i..</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (58,866 samples, 10.14%)</title><rect x="89.1383%" y="261" width="10.1425%" height="15" fill="rgb(225,32,20)" fg:x="517349" fg:w="58866"/><text x="89.3883%" y="271.50">1brc.exe`std::i..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read (58,864 samples, 10.14%)</title><rect x="89.1387%" y="245" width="10.1422%" height="15" fill="rgb(215,141,46)" fg:x="517351" fg:w="58864"/><text x="89.3887%" y="255.50">1brc.exe`std::s..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (58,862 samples, 10.14%)</title><rect x="89.1390%" y="229" width="10.1418%" height="15" fill="rgb(250,160,47)" fg:x="517353" fg:w="58862"/><text x="89.3890%" y="239.50">1brc.exe`std::s..</text></g><g><title>`0x7FFDA1AED624 (58,856 samples, 10.14%)</title><rect x="89.1400%" y="213" width="10.1408%" height="15" fill="rgb(216,222,40)" fg:x="517359" fg:w="58856"/><text x="89.3900%" y="223.50">`0x7FFDA1AED624</text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path::closure$1 (65 samples, 0.01%)</title><rect x="99.2877%" y="213" width="0.0112%" height="15" fill="rgb(234,217,39)" fg:x="576255" fg:w="65"/><text x="99.5377%" y="223.50"></text></g><g><title>1brc.exe`alloc::vec::Vec::reserve_exact (63 samples, 0.01%)</title><rect x="99.2881%" y="197" width="0.0109%" height="15" fill="rgb(207,178,40)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="207.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::reserve_exact (63 samples, 0.01%)</title><rect x="99.2881%" y="181" width="0.0109%" height="15" fill="rgb(221,136,13)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="191.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::try_reserve_exact (63 samples, 0.01%)</title><rect x="99.2881%" y="165" width="0.0109%" height="15" fill="rgb(249,199,10)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="175.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::grow_exact (63 samples, 0.01%)</title><rect x="99.2881%" y="149" width="0.0109%" height="15" fill="rgb(249,222,13)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="159.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (63 samples, 0.01%)</title><rect x="99.2881%" y="133" width="0.0109%" height="15" fill="rgb(244,185,38)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="143.50"></text></g><g><title>1brc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (63 samples, 0.01%)</title><rect x="99.2881%" y="117" width="0.0109%" height="15" fill="rgb(236,202,9)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="127.50"></text></g><g><title>1brc.exe`core::result::Result::map_err (63 samples, 0.01%)</title><rect x="99.2881%" y="101" width="0.0109%" height="15" fill="rgb(250,229,37)" fg:x="576257" fg:w="63"/><text x="99.5381%" y="111.50"></text></g><g><title>`0x7FFDA1A736BD (61 samples, 0.01%)</title><rect x="99.2884%" y="85" width="0.0105%" height="15" fill="rgb(206,174,23)" fg:x="576259" fg:w="61"/><text x="99.5384%" y="95.50"></text></g><g><title>`0x7FFDA1A738E3 (59 samples, 0.01%)</title><rect x="99.2888%" y="69" width="0.0102%" height="15" fill="rgb(211,33,43)" fg:x="576261" fg:w="59"/><text x="99.5388%" y="79.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (98 samples, 0.02%)</title><rect x="99.2822%" y="261" width="0.0169%" height="15" fill="rgb(245,58,50)" fg:x="576223" fg:w="98"/><text x="99.5322%" y="271.50"></text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path (98 samples, 0.02%)</title><rect x="99.2822%" y="245" width="0.0169%" height="15" fill="rgb(244,68,36)" fg:x="576223" fg:w="98"/><text x="99.5322%" y="255.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fill_utf16_buf (96 samples, 0.02%)</title><rect x="99.2826%" y="229" width="0.0165%" height="15" fill="rgb(232,229,15)" fg:x="576225" fg:w="96"/><text x="99.5326%" y="239.50"></text></g><g><title>`0x7FFD9F541A09 (2,581 samples, 0.44%)</title><rect x="99.3051%" y="213" width="0.4447%" height="15" fill="rgb(254,30,23)" fg:x="576356" fg:w="2581"/><text x="99.5551%" y="223.50"></text></g><g><title>`0x7FFDA1AEE004 (2,579 samples, 0.44%)</title><rect x="99.3055%" y="197" width="0.4444%" height="15" fill="rgb(235,160,14)" fg:x="576358" fg:w="2579"/><text x="99.5555%" y="207.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (2,633 samples, 0.45%)</title><rect x="99.2991%" y="261" width="0.4537%" height="15" fill="rgb(212,155,44)" fg:x="576321" fg:w="2633"/><text x="99.5491%" y="271.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (2,633 samples, 0.45%)</title><rect x="99.2991%" y="245" width="0.4537%" height="15" fill="rgb(226,2,50)" fg:x="576321" fg:w="2633"/><text x="99.5491%" y="255.50"></text></g><g><title>`0x7FFD9F541476 (2,629 samples, 0.45%)</title><rect x="99.2998%" y="229" width="0.4530%" height="15" fill="rgb(234,177,6)" fg:x="576325" fg:w="2629"/><text x="99.5498%" y="239.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (2,749 samples, 0.47%)</title><rect x="99.2808%" y="277" width="0.4736%" height="15" fill="rgb(217,24,9)" fg:x="576215" fg:w="2749"/><text x="99.5308%" y="287.50"></text></g><g><title>1brc.exe`1brc::input_multithreaded::closure$0 (577,048 samples, 99.42%)</title><rect x="0.3372%" y="293" width="99.4244%" height="15" fill="rgb(220,13,46)" fg:x="1957" fg:w="577048"/><text x="0.5872%" y="303.50">1brc.exe`1brc::input_multithreaded::closure$0</text></g><g><title>1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (577,062 samples, 99.43%)</title><rect x="0.3368%" y="357" width="99.4268%" height="15" fill="rgb(239,221,27)" fg:x="1955" fg:w="577062"/><text x="0.5868%" y="367.50">1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded..</text></g><g><title>1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (577,062 samples, 99.43%)</title><rect x="0.3368%" y="341" width="99.4268%" height="15" fill="rgb(222,198,25)" fg:x="1955" fg:w="577062"/><text x="0.5868%" y="351.50">1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded::clo..</text></g><g><title>1brc.exe`std::panicking::try::do_call (577,062 samples, 99.43%)</title><rect x="0.3368%" y="325" width="99.4268%" height="15" fill="rgb(211,99,13)" fg:x="1955" fg:w="577062"/><text x="0.5868%" y="335.50">1brc.exe`std::panicking::try::do_call</text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (577,061 samples, 99.43%)</title><rect x="0.3370%" y="309" width="99.4266%" height="15" fill="rgb(232,111,31)" fg:x="1956" fg:w="577061"/><text x="0.5870%" y="319.50">1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationS..</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (577,084 samples, 99.43%)</title><rect x="0.3353%" y="453" width="99.4306%" height="15" fill="rgb(245,82,37)" fg:x="1946" fg:w="577084"/><text x="0.5853%" y="463.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`alloc::boxed::impl$8::drop (577,084 samples, 99.43%)</title><rect x="0.3353%" y="437" width="99.4306%" height="15" fill="rgb(227,149,46)" fg:x="1946" fg:w="577084"/><text x="0.5853%" y="447.50">1brc.exe`alloc::boxed::impl$8::drop</text></g><g><title>1brc.exe`core::alloc::layout::Layout::for_value_raw (577,082 samples, 99.43%)</title><rect x="0.3356%" y="421" width="99.4302%" height="15" fill="rgb(218,36,50)" fg:x="1948" fg:w="577082"/><text x="0.5856%" y="431.50">1brc.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>1brc.exe`core::mem::size_of_val_raw (577,082 samples, 99.43%)</title><rect x="0.3356%" y="405" width="99.4302%" height="15" fill="rgb(226,80,48)" fg:x="1948" fg:w="577082"/><text x="0.5856%" y="415.50">1brc.exe`core::mem::size_of_val_raw</text></g><g><title>1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (577,080 samples, 99.43%)</title><rect x="0.3360%" y="389" width="99.4299%" height="15" fill="rgb(238,224,15)" fg:x="1950" fg:w="577080"/><text x="0.5860%" y="399.50">1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;a..</text></g><g><title>1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (577,079 samples, 99.43%)</title><rect x="0.3362%" y="373" width="99.4297%" height="15" fill="rgb(241,136,10)" fg:x="1951" fg:w="577079"/><text x="0.5862%" y="383.50">1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Ve..</text></g><g><title>`0x7FFD9F58694B (99 samples, 0.02%)</title><rect x="99.7664%" y="453" width="0.0171%" height="15" fill="rgb(208,32,45)" fg:x="579033" fg:w="99"/><text x="100.0164%" y="463.50"></text></g><g><title>`0x7FFDA1AED864 (99 samples, 0.02%)</title><rect x="99.7664%" y="437" width="0.0171%" height="15" fill="rgb(207,135,9)" fg:x="579033" fg:w="99"/><text x="100.0164%" y="447.50"></text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (577,190 samples, 99.45%)</title><rect x="0.3349%" y="469" width="99.4488%" height="15" fill="rgb(206,86,44)" fg:x="1944" fg:w="577190"/><text x="0.5849%" y="479.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (577,193 samples, 99.45%)</title><rect x="0.3348%" y="485" width="99.4493%" height="15" fill="rgb(245,177,15)" fg:x="1943" fg:w="577193"/><text x="0.5848%" y="495.50">1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>`0x7FFDA0747374 (579,078 samples, 99.77%)</title><rect x="0.0114%" y="501" width="99.7741%" height="15" fill="rgb(206,64,50)" fg:x="66" fg:w="579078"/><text x="0.2614%" y="511.50">`0x7FFDA0747374</text></g><g><title>`0x7FFDA1A67498 (85 samples, 0.01%)</title><rect x="99.7874%" y="469" width="0.0146%" height="15" fill="rgb(234,36,40)" fg:x="579155" fg:w="85"/><text x="100.0374%" y="479.50"></text></g><g><title>`0x7FFDA1AAF3B5 (76 samples, 0.01%)</title><rect x="99.7889%" y="453" width="0.0131%" height="15" fill="rgb(213,64,8)" fg:x="579164" fg:w="76"/><text x="100.0389%" y="463.50"></text></g><g><title>`0x7FFDA1A9EC6E (257 samples, 0.04%)</title><rect x="99.7869%" y="485" width="0.0443%" height="15" fill="rgb(210,75,36)" fg:x="579152" fg:w="257"/><text x="100.0369%" y="495.50"></text></g><g><title>`0x7FFDA1A9CC91 (579,346 samples, 99.82%)</title><rect x="0.0114%" y="517" width="99.8203%" height="15" fill="rgb(229,88,21)" fg:x="66" fg:w="579346"/><text x="0.2614%" y="527.50">`0x7FFDA1A9CC91</text></g><g><title>`0x7FFDA074737D (267 samples, 0.05%)</title><rect x="99.7857%" y="501" width="0.0460%" height="15" fill="rgb(252,204,47)" fg:x="579145" fg:w="267"/><text x="100.0357%" y="511.50"></text></g><g><title>`0x7FFDA1AC5C20 (142 samples, 0.02%)</title><rect x="99.8317%" y="517" width="0.0245%" height="15" fill="rgb(208,77,27)" fg:x="579412" fg:w="142"/><text x="100.0817%" y="527.50"></text></g><g><title>`0x7FFDA1A7B3C7 (115 samples, 0.02%)</title><rect x="99.8703%" y="421" width="0.0198%" height="15" fill="rgb(221,76,26)" fg:x="579636" fg:w="115"/><text x="100.1203%" y="431.50"></text></g><g><title>`0x7FFDA1AA4CDF (159 samples, 0.03%)</title><rect x="99.8629%" y="437" width="0.0274%" height="15" fill="rgb(225,139,18)" fg:x="579593" fg:w="159"/><text x="100.1129%" y="447.50"></text></g><g><title>`0x7FFDA1AA4B2D (163 samples, 0.03%)</title><rect x="99.8623%" y="453" width="0.0281%" height="15" fill="rgb(230,137,11)" fg:x="579590" fg:w="163"/><text x="100.1123%" y="463.50"></text></g><g><title>`0x7FFDA1A677A7 (188 samples, 0.03%)</title><rect x="99.8616%" y="469" width="0.0324%" height="15" fill="rgb(212,28,1)" fg:x="579586" fg:w="188"/><text x="100.1116%" y="479.50"></text></g><g><title>`0x7FFD9F569EB1 (277 samples, 0.05%)</title><rect x="99.9187%" y="373" width="0.0477%" height="15" fill="rgb(248,164,17)" fg:x="579917" fg:w="277"/><text x="100.1687%" y="383.50"></text></g><g><title>`0x7FFDA1AED644 (275 samples, 0.05%)</title><rect x="99.9190%" y="357" width="0.0474%" height="15" fill="rgb(222,171,42)" fg:x="579919" fg:w="275"/><text x="100.1690%" y="367.50"></text></g><g><title>`0x7FFD9F569B80 (319 samples, 0.05%)</title><rect x="99.9120%" y="389" width="0.0550%" height="15" fill="rgb(243,84,45)" fg:x="579878" fg:w="319"/><text x="100.1620%" y="399.50"></text></g><g><title>`0x7FFD9F569968 (328 samples, 0.06%)</title><rect x="99.9106%" y="405" width="0.0565%" height="15" fill="rgb(252,49,23)" fg:x="579870" fg:w="328"/><text x="100.1606%" y="415.50"></text></g><g><title>`0x7FFD9F568E0D (347 samples, 0.06%)</title><rect x="99.9082%" y="437" width="0.0598%" height="15" fill="rgb(215,19,7)" fg:x="579856" fg:w="347"/><text x="100.1582%" y="447.50"></text></g><g><title>`0x7FFD9F569074 (343 samples, 0.06%)</title><rect x="99.9089%" y="421" width="0.0591%" height="15" fill="rgb(238,81,41)" fg:x="579860" fg:w="343"/><text x="100.1589%" y="431.50"></text></g><g><title>`0x7FFD9F966223 (62 samples, 0.01%)</title><rect x="99.9716%" y="437" width="0.0107%" height="15" fill="rgb(210,199,37)" fg:x="580224" fg:w="62"/><text x="100.2216%" y="447.50"></text></g><g><title>`0x7FFD9F96631F (62 samples, 0.01%)</title><rect x="99.9716%" y="421" width="0.0107%" height="15" fill="rgb(244,192,49)" fg:x="580224" fg:w="62"/><text x="100.2216%" y="431.50"></text></g><g><title>`0x7FFD9F565C3B (61 samples, 0.01%)</title><rect x="99.9717%" y="405" width="0.0105%" height="15" fill="rgb(226,211,11)" fg:x="580225" fg:w="61"/><text x="100.2217%" y="415.50"></text></g><g><title>`0x7FFDA1A69A1D (481 samples, 0.08%)</title><rect x="99.9052%" y="453" width="0.0829%" height="15" fill="rgb(236,162,54)" fg:x="579839" fg:w="481"/><text x="100.1552%" y="463.50"></text></g><g><title>`0x7FFDA1A6789F (485 samples, 0.08%)</title><rect x="99.9052%" y="469" width="0.0836%" height="15" fill="rgb(220,229,9)" fg:x="579839" fg:w="485"/><text x="100.1552%" y="479.50"></text></g><g><title>`0x7FFDA1AC60A4 (792 samples, 0.14%)</title><rect x="99.8611%" y="485" width="0.1365%" height="15" fill="rgb(250,87,22)" fg:x="579583" fg:w="792"/><text x="100.1111%" y="495.50"></text></g><g><title>`0x7FFDA1AC5C83 (828 samples, 0.14%)</title><rect x="99.8570%" y="501" width="0.1427%" height="15" fill="rgb(239,43,17)" fg:x="579559" fg:w="828"/><text x="100.1070%" y="511.50"></text></g><g><title>`0x7FFDA1AC5C2E (834 samples, 0.14%)</title><rect x="99.8561%" y="517" width="0.1437%" height="15" fill="rgb(231,177,25)" fg:x="579554" fg:w="834"/><text x="100.1061%" y="527.50"></text></g><g><title>all (580,389 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="580389"/><text x="0.2500%" y="543.50"></text></g></svg></svg>