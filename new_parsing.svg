<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="621405"><g><title>`0x7FFDA1A9CC70 (66 samples, 0.01%)</title><rect x="0.0000%" y="613" width="0.0106%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="66"/><text x="0.2500%" y="623.50"></text></g><g><title>`0x7FFD9F54BBAF (661 samples, 0.11%)</title><rect x="0.0200%" y="245" width="0.1064%" height="15" fill="rgb(217,0,24)" fg:x="124" fg:w="661"/><text x="0.2700%" y="255.50"></text></g><g><title>`0x7FFDA1AEED94 (660 samples, 0.11%)</title><rect x="0.0201%" y="229" width="0.1062%" height="15" fill="rgb(221,193,54)" fg:x="125" fg:w="660"/><text x="0.2701%" y="239.50"></text></g><g><title>`0x7FFDA074B91D (671 samples, 0.11%)</title><rect x="0.0185%" y="261" width="0.1080%" height="15" fill="rgb(248,212,6)" fg:x="115" fg:w="671"/><text x="0.2685%" y="271.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (677 samples, 0.11%)</title><rect x="0.0177%" y="293" width="0.1089%" height="15" fill="rgb(208,68,35)" fg:x="110" fg:w="677"/><text x="0.2677%" y="303.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread::Thread::new (677 samples, 0.11%)</title><rect x="0.0177%" y="277" width="0.1089%" height="15" fill="rgb(232,128,0)" fg:x="110" fg:w="677"/><text x="0.2677%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;std::thread::JoinHandle&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::push(std::thread::JoinHandle&lt;alloc::vec::Vec&lt;tuple$ (689 samples, 0.11%)</title><rect x="0.0163%" y="373" width="0.1109%" height="15" fill="rgb(207,160,47)" fg:x="101" fg:w="689"/><text x="0.2663%" y="383.50"></text></g><g><title>1brc.exe`std::thread::spawn&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (684 samples, 0.11%)</title><rect x="0.0171%" y="357" width="0.1101%" height="15" fill="rgb(228,23,34)" fg:x="106" fg:w="684"/><text x="0.2671%" y="367.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn (684 samples, 0.11%)</title><rect x="0.0171%" y="341" width="0.1101%" height="15" fill="rgb(218,30,26)" fg:x="106" fg:w="684"/><text x="0.2671%" y="351.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked (684 samples, 0.11%)</title><rect x="0.0171%" y="325" width="0.1101%" height="15" fill="rgb(220,122,19)" fg:x="106" fg:w="684"/><text x="0.2671%" y="335.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, 1brc::input_multithreaded::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (684 samples, 0.11%)</title><rect x="0.0171%" y="309" width="0.1101%" height="15" fill="rgb(250,228,42)" fg:x="106" fg:w="684"/><text x="0.2671%" y="319.50"></text></g><g><title>`0x7FFDA1A7095C (107 samples, 0.02%)</title><rect x="0.1355%" y="165" width="0.0172%" height="15" fill="rgb(240,193,28)" fg:x="842" fg:w="107"/><text x="0.3855%" y="175.50"></text></g><g><title>`0x7FFDA1A59B1A (107 samples, 0.02%)</title><rect x="0.1355%" y="149" width="0.0172%" height="15" fill="rgb(216,20,37)" fg:x="842" fg:w="107"/><text x="0.3855%" y="159.50"></text></g><g><title>`0x7FFDA1AED924 (107 samples, 0.02%)</title><rect x="0.1355%" y="133" width="0.0172%" height="15" fill="rgb(206,188,39)" fg:x="842" fg:w="107"/><text x="0.3855%" y="143.50"></text></g><g><title>`0x7FFDA1A6E412 (112 samples, 0.02%)</title><rect x="0.1349%" y="197" width="0.0180%" height="15" fill="rgb(217,207,13)" fg:x="838" fg:w="112"/><text x="0.3849%" y="207.50"></text></g><g><title>`0x7FFDA1A6F35E (108 samples, 0.02%)</title><rect x="0.1355%" y="181" width="0.0174%" height="15" fill="rgb(231,73,38)" fg:x="842" fg:w="108"/><text x="0.3855%" y="191.50"></text></g><g><title>`0x7FFDA1A75B74 (157 samples, 0.03%)</title><rect x="0.1279%" y="229" width="0.0253%" height="15" fill="rgb(225,20,46)" fg:x="795" fg:w="157"/><text x="0.3779%" y="239.50"></text></g><g><title>`0x7FFDA1A765F6 (130 samples, 0.02%)</title><rect x="0.1323%" y="213" width="0.0209%" height="15" fill="rgb(210,31,41)" fg:x="822" fg:w="130"/><text x="0.3823%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::IntoIter&lt;tuple$ (158 samples, 0.03%)</title><rect x="0.1279%" y="373" width="0.0254%" height="15" fill="rgb(221,200,47)" fg:x="795" fg:w="158"/><text x="0.3779%" y="383.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop(alloc::vec::into_iter::IntoIter&lt;tuple$ (158 samples, 0.03%)</title><rect x="0.1279%" y="357" width="0.0254%" height="15" fill="rgb(226,26,5)" fg:x="795" fg:w="158"/><text x="0.3779%" y="367.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (158 samples, 0.03%)</title><rect x="0.1279%" y="341" width="0.0254%" height="15" fill="rgb(249,33,26)" fg:x="795" fg:w="158"/><text x="0.3779%" y="351.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop::impl$0::drop(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (158 samples, 0.03%)</title><rect x="0.1279%" y="325" width="0.0254%" height="15" fill="rgb(235,183,28)" fg:x="795" fg:w="158"/><text x="0.3779%" y="335.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (158 samples, 0.03%)</title><rect x="0.1279%" y="309" width="0.0254%" height="15" fill="rgb(221,5,38)" fg:x="795" fg:w="158"/><text x="0.3779%" y="319.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (158 samples, 0.03%)</title><rect x="0.1279%" y="293" width="0.0254%" height="15" fill="rgb(247,18,42)" fg:x="795" fg:w="158"/><text x="0.3779%" y="303.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (158 samples, 0.03%)</title><rect x="0.1279%" y="277" width="0.0254%" height="15" fill="rgb(241,131,45)" fg:x="795" fg:w="158"/><text x="0.3779%" y="287.50"></text></g><g><title>1brc.exe`alloc::alloc::dealloc (158 samples, 0.03%)</title><rect x="0.1279%" y="261" width="0.0254%" height="15" fill="rgb(249,31,29)" fg:x="795" fg:w="158"/><text x="0.3779%" y="271.50"></text></g><g><title>`0x7FFDA1A747B1 (158 samples, 0.03%)</title><rect x="0.1279%" y="245" width="0.0254%" height="15" fill="rgb(225,111,53)" fg:x="795" fg:w="158"/><text x="0.3779%" y="255.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::get_mut (66 samples, 0.01%)</title><rect x="0.1534%" y="341" width="0.0106%" height="15" fill="rgb(238,160,17)" fg:x="953" fg:w="66"/><text x="0.4034%" y="351.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::is_unique (66 samples, 0.01%)</title><rect x="0.1534%" y="325" width="0.0106%" height="15" fill="rgb(214,148,48)" fg:x="953" fg:w="66"/><text x="0.4034%" y="335.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::inner (66 samples, 0.01%)</title><rect x="0.1534%" y="309" width="0.0106%" height="15" fill="rgb(232,36,49)" fg:x="953" fg:w="66"/><text x="0.4034%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; &gt; &gt;::as_ref (65 samples, 0.01%)</title><rect x="0.1535%" y="293" width="0.0105%" height="15" fill="rgb(209,103,24)" fg:x="954" fg:w="65"/><text x="0.4035%" y="303.50"></text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::any::Any,core::marker::Send&gt;,alloc::alloc::Global&gt; &gt; &gt;::expect(enum2$&lt;core::result::Result&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::any::Any,core::marker::Send&gt;,alloc::alloc::Global&gt; &gt; &gt;, ref$ (70 samples, 0.01%)</title><rect x="0.1534%" y="373" width="0.0113%" height="15" fill="rgb(229,88,8)" fg:x="953" fg:w="70"/><text x="0.4034%" y="383.50"></text></g><g><title>1brc.exe`std::thread::JoinInner&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;::join&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;(std::thread::JoinInner&lt;alloc::vec::Vec&lt;tuple$ (70 samples, 0.01%)</title><rect x="0.1534%" y="357" width="0.0113%" height="15" fill="rgb(213,181,19)" fg:x="953" fg:w="70"/><text x="0.4034%" y="367.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::AHasher::large_update (77 samples, 0.01%)</title><rect x="0.1670%" y="277" width="0.0124%" height="15" fill="rgb(254,191,54)" fg:x="1038" fg:w="77"/><text x="0.4170%" y="287.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (140 samples, 0.02%)</title><rect x="0.1659%" y="293" width="0.0225%" height="15" fill="rgb(241,83,37)" fg:x="1031" fg:w="140"/><text x="0.4159%" y="303.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(core::hash::BuildHasherDefault (154 samples, 0.02%)</title><rect x="0.1646%" y="357" width="0.0248%" height="15" fill="rgb(233,36,39)" fg:x="1023" fg:w="154"/><text x="0.4146%" y="367.50"></text></g><g><title>1brc.exe`alloc::string::impl$23::hash (146 samples, 0.02%)</title><rect x="0.1659%" y="341" width="0.0235%" height="15" fill="rgb(226,3,54)" fg:x="1031" fg:w="146"/><text x="0.4159%" y="351.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$2::hash(ref$ (146 samples, 0.02%)</title><rect x="0.1659%" y="325" width="0.0235%" height="15" fill="rgb(245,192,40)" fg:x="1031" fg:w="146"/><text x="0.4159%" y="335.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_str(ahash::fallback_hash::AHasher*, ref$ (146 samples, 0.02%)</title><rect x="0.1659%" y="309" width="0.0235%" height="15" fill="rgb(238,167,29)" fg:x="1031" fg:w="146"/><text x="0.4159%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0 (66 samples, 0.01%)</title><rect x="0.1929%" y="325" width="0.0106%" height="15" fill="rgb(232,182,51)" fg:x="1199" fg:w="66"/><text x="0.4429%" y="335.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::entry (246 samples, 0.04%)</title><rect x="0.1646%" y="373" width="0.0396%" height="15" fill="rgb(231,60,39)" fg:x="1023" fg:w="246"/><text x="0.4146%" y="383.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (92 samples, 0.01%)</title><rect x="0.1894%" y="357" width="0.0148%" height="15" fill="rgb(208,69,12)" fg:x="1177" fg:w="92"/><text x="0.4394%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (89 samples, 0.01%)</title><rect x="0.1899%" y="341" width="0.0143%" height="15" fill="rgb(235,93,37)" fg:x="1180" fg:w="89"/><text x="0.4399%" y="351.50"></text></g><g><title>1brc.exe`std::io::BufRead::has_data_left(std::io::buffered::bufreader::BufReader (231 samples, 0.04%)</title><rect x="0.2070%" y="373" width="0.0372%" height="15" fill="rgb(213,116,39)" fg:x="1286" fg:w="231"/><text x="0.4570%" y="383.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$5::fill_buf(std::io::buffered::bufreader::BufReader (231 samples, 0.04%)</title><rect x="0.2070%" y="357" width="0.0372%" height="15" fill="rgb(222,207,29)" fg:x="1286" fg:w="231"/><text x="0.4570%" y="367.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (231 samples, 0.04%)</title><rect x="0.2070%" y="341" width="0.0372%" height="15" fill="rgb(206,96,30)" fg:x="1286" fg:w="231"/><text x="0.4570%" y="351.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (231 samples, 0.04%)</title><rect x="0.2070%" y="325" width="0.0372%" height="15" fill="rgb(218,138,4)" fg:x="1286" fg:w="231"/><text x="0.4570%" y="335.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read_buf (231 samples, 0.04%)</title><rect x="0.2070%" y="309" width="0.0372%" height="15" fill="rgb(250,191,14)" fg:x="1286" fg:w="231"/><text x="0.4570%" y="319.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (229 samples, 0.04%)</title><rect x="0.2073%" y="293" width="0.0369%" height="15" fill="rgb(239,60,40)" fg:x="1288" fg:w="229"/><text x="0.4573%" y="303.50"></text></g><g><title>`0x7FFDA1AED624 (228 samples, 0.04%)</title><rect x="0.2074%" y="277" width="0.0367%" height="15" fill="rgb(206,27,48)" fg:x="1289" fg:w="228"/><text x="0.4574%" y="287.50"></text></g><g><title>`0x7FFDA1AF776F (89 samples, 0.01%)</title><rect x="0.2766%" y="357" width="0.0143%" height="15" fill="rgb(225,35,8)" fg:x="1719" fg:w="89"/><text x="0.5266%" y="367.50"></text></g><g><title>`0x7FFDA1A747B1 (244 samples, 0.04%)</title><rect x="0.2523%" y="373" width="0.0393%" height="15" fill="rgb(250,213,24)" fg:x="1568" fg:w="244"/><text x="0.5023%" y="383.50"></text></g><g><title>1brc.exe`1brc::input_multithreaded(hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,core::hash::BuildHasherDefault (1,744 samples, 0.28%)</title><rect x="0.0114%" y="389" width="0.2807%" height="15" fill="rgb(247,123,22)" fg:x="71" fg:w="1744"/><text x="0.2614%" y="399.50"></text></g><g><title>1brc.exe`invoke_main() (1,756 samples, 0.28%)</title><rect x="0.0109%" y="565" width="0.2826%" height="15" fill="rgb(231,138,38)" fg:x="68" fg:w="1756"/><text x="0.2609%" y="575.50"></text></g><g><title>1brc.exe`main (1,756 samples, 0.28%)</title><rect x="0.0109%" y="549" width="0.2826%" height="15" fill="rgb(231,145,46)" fg:x="68" fg:w="1756"/><text x="0.2609%" y="559.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal (1,756 samples, 0.28%)</title><rect x="0.0109%" y="533" width="0.2826%" height="15" fill="rgb(251,118,11)" fg:x="68" fg:w="1756"/><text x="0.2609%" y="543.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (1,756 samples, 0.28%)</title><rect x="0.0109%" y="517" width="0.2826%" height="15" fill="rgb(217,147,25)" fg:x="68" fg:w="1756"/><text x="0.2609%" y="527.50"></text></g><g><title>1brc.exe`std::panicking::try (1,756 samples, 0.28%)</title><rect x="0.0109%" y="501" width="0.2826%" height="15" fill="rgb(247,81,37)" fg:x="68" fg:w="1756"/><text x="0.2609%" y="511.50"></text></g><g><title>1brc.exe`std::panicking::try::do_call (1,756 samples, 0.28%)</title><rect x="0.0109%" y="485" width="0.2826%" height="15" fill="rgb(209,12,38)" fg:x="68" fg:w="1756"/><text x="0.2609%" y="495.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$2 (1,755 samples, 0.28%)</title><rect x="0.0111%" y="469" width="0.2824%" height="15" fill="rgb(227,1,9)" fg:x="69" fg:w="1755"/><text x="0.2611%" y="479.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (1,755 samples, 0.28%)</title><rect x="0.0111%" y="453" width="0.2824%" height="15" fill="rgb(248,47,43)" fg:x="69" fg:w="1755"/><text x="0.2611%" y="463.50"></text></g><g><title>1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (1,755 samples, 0.28%)</title><rect x="0.0111%" y="437" width="0.2824%" height="15" fill="rgb(221,10,30)" fg:x="69" fg:w="1755"/><text x="0.2611%" y="447.50"></text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (1,755 samples, 0.28%)</title><rect x="0.0111%" y="421" width="0.2824%" height="15" fill="rgb(210,229,1)" fg:x="69" fg:w="1755"/><text x="0.2611%" y="431.50"></text></g><g><title>1brc.exe`1brc::main (1,755 samples, 0.28%)</title><rect x="0.0111%" y="405" width="0.2824%" height="15" fill="rgb(222,148,37)" fg:x="69" fg:w="1755"/><text x="0.2611%" y="415.50"></text></g><g><title>1brc.exe`__scrt_common_main_seh() (1,768 samples, 0.28%)</title><rect x="0.0109%" y="581" width="0.2845%" height="15" fill="rgb(234,67,33)" fg:x="68" fg:w="1768"/><text x="0.2609%" y="591.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::parse_reading::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;u8&gt;,1brc::parse_reading::closure_env$1&gt; &gt;*, tuple$ (43,212 samples, 6.95%)</title><rect x="10.7712%" y="309" width="6.9539%" height="15" fill="rgb(247,98,35)" fg:x="66933" fg:w="43212"/><text x="11.0212%" y="319.50">1brc.exe`..</text></g><g><title>1brc.exe`1brc::parse_reading::closure$0 (9,829 samples, 1.58%)</title><rect x="16.1434%" y="293" width="1.5817%" height="15" fill="rgb(247,138,52)" fg:x="100316" fg:w="9829"/><text x="16.3934%" y="303.50"></text></g><g><title>1brc.exe`core::num::impl$11::unchecked_add (2,354 samples, 0.38%)</title><rect x="17.7252%" y="309" width="0.3788%" height="15" fill="rgb(213,79,30)" fg:x="110145" fg:w="2354"/><text x="17.9752%" y="319.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u8&gt;,1brc::parse_reading::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (62,537 samples, 10.06%)</title><rect x="8.1761%" y="341" width="10.0638%" height="15" fill="rgb(246,177,23)" fg:x="50807" fg:w="62537"/><text x="8.4261%" y="351.50">1brc.exe`core::..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::parse_reading::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (62,537 samples, 10.06%)</title><rect x="8.1761%" y="325" width="10.0638%" height="15" fill="rgb(230,62,27)" fg:x="50807" fg:w="62537"/><text x="8.4261%" y="335.50">1brc.exe`core::..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (845 samples, 0.14%)</title><rect x="18.1040%" y="309" width="0.1360%" height="15" fill="rgb(216,154,8)" fg:x="112499" fg:w="845"/><text x="18.3540%" y="319.50"></text></g><g><title>1brc.exe`1brc::parse_reading(ref$&lt;slice2$ (76,430 samples, 12.30%)</title><rect x="6.2492%" y="373" width="12.2995%" height="15" fill="rgb(244,35,45)" fg:x="38833" fg:w="76430"/><text x="6.4992%" y="383.50">1brc.exe`1brc::par..</text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (64,456 samples, 10.37%)</title><rect x="8.1761%" y="357" width="10.3726%" height="15" fill="rgb(251,115,12)" fg:x="50807" fg:w="64456"/><text x="8.4261%" y="367.50">1brc.exe`core::..</text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (1,919 samples, 0.31%)</title><rect x="18.2400%" y="341" width="0.3088%" height="15" fill="rgb(240,54,50)" fg:x="113344" fg:w="1919"/><text x="18.4900%" y="351.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (1,919 samples, 0.31%)</title><rect x="18.2400%" y="325" width="0.3088%" height="15" fill="rgb(233,84,52)" fg:x="113344" fg:w="1919"/><text x="18.4900%" y="335.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (1,919 samples, 0.31%)</title><rect x="18.2400%" y="309" width="0.3088%" height="15" fill="rgb(207,117,47)" fg:x="113344" fg:w="1919"/><text x="18.4900%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (1,919 samples, 0.31%)</title><rect x="18.2400%" y="293" width="0.3088%" height="15" fill="rgb(249,43,39)" fg:x="113344" fg:w="1919"/><text x="18.4900%" y="303.50"></text></g><g><title>`0x7FFDA1A7B8A4 (90 samples, 0.01%)</title><rect x="18.5890%" y="245" width="0.0145%" height="15" fill="rgb(209,38,44)" fg:x="115513" fg:w="90"/><text x="18.8390%" y="255.50"></text></g><g><title>`0x7FFDA1A7BF5E (74 samples, 0.01%)</title><rect x="18.6175%" y="245" width="0.0119%" height="15" fill="rgb(236,212,23)" fg:x="115690" fg:w="74"/><text x="18.8675%" y="255.50"></text></g><g><title>`0x7FFDA1A7B3C7 (391 samples, 0.06%)</title><rect x="18.5668%" y="261" width="0.0629%" height="15" fill="rgb(242,79,21)" fg:x="115375" fg:w="391"/><text x="18.8168%" y="271.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (518 samples, 0.08%)</title><rect x="18.5488%" y="373" width="0.0834%" height="15" fill="rgb(211,96,35)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="383.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (518 samples, 0.08%)</title><rect x="18.5488%" y="357" width="0.0834%" height="15" fill="rgb(253,215,40)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="367.50"></text></g><g><title>1brc.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (518 samples, 0.08%)</title><rect x="18.5488%" y="341" width="0.0834%" height="15" fill="rgb(211,81,21)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="351.50"></text></g><g><title>1brc.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (518 samples, 0.08%)</title><rect x="18.5488%" y="325" width="0.0834%" height="15" fill="rgb(208,190,38)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="335.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (518 samples, 0.08%)</title><rect x="18.5488%" y="309" width="0.0834%" height="15" fill="rgb(235,213,38)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="319.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (518 samples, 0.08%)</title><rect x="18.5488%" y="293" width="0.0834%" height="15" fill="rgb(237,122,38)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="303.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (518 samples, 0.08%)</title><rect x="18.5488%" y="277" width="0.0834%" height="15" fill="rgb(244,218,35)" fg:x="115263" fg:w="518"/><text x="18.7988%" y="287.50"></text></g><g><title>1brc.exe`core::ptr::write(tuple$&lt;alloc::string::String,1brc::StationStats&gt;*, tuple$ (78 samples, 0.01%)</title><rect x="18.6337%" y="357" width="0.0126%" height="15" fill="rgb(240,68,47)" fg:x="115791" fg:w="78"/><text x="18.8837%" y="367.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::push(tuple$ (159 samples, 0.03%)</title><rect x="18.6321%" y="373" width="0.0256%" height="15" fill="rgb(210,16,53)" fg:x="115781" fg:w="159"/><text x="18.8821%" y="383.50"></text></g><g><title>`0x7FFDA1A7FBD2 (73 samples, 0.01%)</title><rect x="18.6658%" y="261" width="0.0117%" height="15" fill="rgb(235,124,12)" fg:x="115990" fg:w="73"/><text x="18.9158%" y="271.50"></text></g><g><title>`0x7FFDA1A7D357 (161 samples, 0.03%)</title><rect x="18.6587%" y="293" width="0.0259%" height="15" fill="rgb(224,169,11)" fg:x="115946" fg:w="161"/><text x="18.9087%" y="303.50"></text></g><g><title>`0x7FFDA1A7FAE2 (161 samples, 0.03%)</title><rect x="18.6587%" y="277" width="0.0259%" height="15" fill="rgb(250,166,2)" fg:x="115946" fg:w="161"/><text x="18.9087%" y="287.50"></text></g><g><title>`0x7FFDA1AECDFE (322 samples, 0.05%)</title><rect x="18.6868%" y="277" width="0.0518%" height="15" fill="rgb(242,216,29)" fg:x="116121" fg:w="322"/><text x="18.9368%" y="287.50"></text></g><g><title>`0x7FFDA1AED864 (322 samples, 0.05%)</title><rect x="18.6868%" y="261" width="0.0518%" height="15" fill="rgb(230,116,27)" fg:x="116121" fg:w="322"/><text x="18.9368%" y="271.50"></text></g><g><title>`0x7FFDA1AECE4B (65 samples, 0.01%)</title><rect x="18.7462%" y="277" width="0.0105%" height="15" fill="rgb(228,99,48)" fg:x="116490" fg:w="65"/><text x="18.9962%" y="287.50"></text></g><g><title>`0x7FFDA1A59B1A (65 samples, 0.01%)</title><rect x="18.7462%" y="261" width="0.0105%" height="15" fill="rgb(253,11,6)" fg:x="116490" fg:w="65"/><text x="18.9962%" y="271.50"></text></g><g><title>`0x7FFDA1AED924 (65 samples, 0.01%)</title><rect x="18.7462%" y="245" width="0.0105%" height="15" fill="rgb(247,143,39)" fg:x="116490" fg:w="65"/><text x="18.9962%" y="255.50"></text></g><g><title>`0x7FFDA1A7EEEE (437 samples, 0.07%)</title><rect x="18.6865%" y="293" width="0.0703%" height="15" fill="rgb(236,97,10)" fg:x="116119" fg:w="437"/><text x="18.9365%" y="303.50"></text></g><g><title>`0x7FFDA1A7EF1C (64 samples, 0.01%)</title><rect x="18.7568%" y="293" width="0.0103%" height="15" fill="rgb(233,208,19)" fg:x="116556" fg:w="64"/><text x="19.0068%" y="303.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity (702 samples, 0.11%)</title><rect x="18.6577%" y="373" width="0.1130%" height="15" fill="rgb(216,164,2)" fg:x="115940" fg:w="702"/><text x="18.9077%" y="383.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (702 samples, 0.11%)</title><rect x="18.6577%" y="357" width="0.1130%" height="15" fill="rgb(220,129,5)" fg:x="115940" fg:w="702"/><text x="18.9077%" y="367.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (702 samples, 0.11%)</title><rect x="18.6577%" y="341" width="0.1130%" height="15" fill="rgb(242,17,10)" fg:x="115940" fg:w="702"/><text x="18.9077%" y="351.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (702 samples, 0.11%)</title><rect x="18.6577%" y="325" width="0.1130%" height="15" fill="rgb(242,107,0)" fg:x="115940" fg:w="702"/><text x="18.9077%" y="335.50"></text></g><g><title>`0x7FFDA1A7B44D (696 samples, 0.11%)</title><rect x="18.6587%" y="309" width="0.1120%" height="15" fill="rgb(251,28,31)" fg:x="115946" fg:w="696"/><text x="18.9087%" y="319.50"></text></g><g><title>1brc.exe`core::num::impl$2::unchecked_add (2,859 samples, 0.46%)</title><rect x="18.7707%" y="373" width="0.4601%" height="15" fill="rgb(233,223,10)" fg:x="116642" fg:w="2859"/><text x="19.0207%" y="383.50"></text></g><g><title>`0x7FFDA1A59B1A (1,285 samples, 0.21%)</title><rect x="19.2325%" y="309" width="0.2068%" height="15" fill="rgb(215,21,27)" fg:x="119512" fg:w="1285"/><text x="19.4825%" y="319.50"></text></g><g><title>`0x7FFDA1AED924 (1,284 samples, 0.21%)</title><rect x="19.2327%" y="293" width="0.2066%" height="15" fill="rgb(232,23,21)" fg:x="119513" fg:w="1284"/><text x="19.4827%" y="303.50"></text></g><g><title>`0x7FFDA1A76F37 (1,286 samples, 0.21%)</title><rect x="19.2325%" y="325" width="0.2070%" height="15" fill="rgb(244,5,23)" fg:x="119512" fg:w="1286"/><text x="19.4825%" y="335.50"></text></g><g><title>`0x7FFDA1A75B74 (1,297 samples, 0.21%)</title><rect x="19.2317%" y="341" width="0.2087%" height="15" fill="rgb(226,81,46)" fg:x="119507" fg:w="1297"/><text x="19.4817%" y="351.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(std::io::buffered::bufreader::BufReader (1,399 samples, 0.23%)</title><rect x="19.2308%" y="373" width="0.2251%" height="15" fill="rgb(247,70,30)" fg:x="119501" fg:w="1399"/><text x="19.4808%" y="383.50"></text></g><g><title>`0x7FFDA1A747B1 (1,393 samples, 0.22%)</title><rect x="19.2317%" y="357" width="0.2242%" height="15" fill="rgb(212,68,19)" fg:x="119507" fg:w="1393"/><text x="19.4817%" y="367.50"></text></g><g><title>`0x7FFDA1AF776F (78 samples, 0.01%)</title><rect x="19.4434%" y="341" width="0.0126%" height="15" fill="rgb(240,187,13)" fg:x="120822" fg:w="78"/><text x="19.6934%" y="351.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (10,315 samples, 1.66%)</title><rect x="19.4561%" y="357" width="1.6599%" height="15" fill="rgb(223,113,26)" fg:x="120901" fg:w="10315"/><text x="19.7061%" y="367.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (10,315 samples, 1.66%)</title><rect x="19.4561%" y="341" width="1.6599%" height="15" fill="rgb(206,192,2)" fg:x="120901" fg:w="10315"/><text x="19.7061%" y="351.50"></text></g><g><title>1brc.exe`1brc::input_block::closure$1 (3,281 samples, 0.53%)</title><rect x="27.3710%" y="341" width="0.5280%" height="15" fill="rgb(241,108,4)" fg:x="170085" fg:w="3281"/><text x="27.6210%" y="351.50"></text></g><g><title>1brc.exe`core::slice::impl$0::rsplit_once(ref$&lt;slice2$ (65,175 samples, 10.49%)</title><rect x="19.4559%" y="373" width="10.4883%" height="15" fill="rgb(247,173,49)" fg:x="120900" fg:w="65175"/><text x="19.7059%" y="383.50">1brc.exe`core::..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::rposition(core::slice::iter::Iter (54,859 samples, 8.83%)</title><rect x="21.1160%" y="357" width="8.8282%" height="15" fill="rgb(224,114,35)" fg:x="131216" fg:w="54859"/><text x="21.3660%" y="367.50">1brc.exe`cor..</text></g><g><title>1brc.exe`core::slice::iter::impl$182::next_back(core::slice::iter::Iter (12,709 samples, 2.05%)</title><rect x="27.8990%" y="341" width="2.0452%" height="15" fill="rgb(245,159,27)" fg:x="173366" fg:w="12709"/><text x="28.1490%" y="351.50">1..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (10,927 samples, 1.76%)</title><rect x="28.1858%" y="325" width="1.7584%" height="15" fill="rgb(245,172,44)" fg:x="175148" fg:w="10927"/><text x="28.4358%" y="335.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (29,670 samples, 4.77%)</title><rect x="30.7228%" y="357" width="4.7747%" height="15" fill="rgb(236,23,11)" fg:x="190913" fg:w="29670"/><text x="30.9728%" y="367.50">1brc.e..</text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (29,670 samples, 4.77%)</title><rect x="30.7228%" y="341" width="4.7747%" height="15" fill="rgb(205,117,38)" fg:x="190913" fg:w="29670"/><text x="30.9728%" y="351.50">1brc.e..</text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (29,670 samples, 4.77%)</title><rect x="30.7228%" y="325" width="4.7747%" height="15" fill="rgb(237,72,25)" fg:x="190913" fg:w="29670"/><text x="30.9728%" y="335.50">1brc.e..</text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (29,670 samples, 4.77%)</title><rect x="30.7228%" y="309" width="4.7747%" height="15" fill="rgb(244,70,9)" fg:x="190913" fg:w="29670"/><text x="30.9728%" y="319.50">1brc.e..</text></g><g><title>1brc.exe`core::slice::iter::impl$16::next::closure$0(core::slice::iter::impl$16::next::closure_env$0 (9,027 samples, 1.45%)</title><rect x="44.9549%" y="341" width="1.4527%" height="15" fill="rgb(217,125,39)" fg:x="279352" fg:w="9027"/><text x="45.2049%" y="351.50"></text></g><g><title>1brc.exe`1brc::input_block::closure$0 (9,027 samples, 1.45%)</title><rect x="44.9549%" y="325" width="1.4527%" height="15" fill="rgb(235,36,10)" fg:x="279352" fg:w="9027"/><text x="45.2049%" y="335.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$16::next(core::slice::iter::Split (124,739 samples, 20.07%)</title><rect x="29.9442%" y="373" width="20.0737%" height="15" fill="rgb(251,123,47)" fg:x="186075" fg:w="124739"/><text x="30.1942%" y="383.50">1brc.exe`core::slice::iter::impl..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::position(core::slice::iter::Iter&lt;u8&gt;*, core::slice::iter::impl$16::next::closure_env$0 (90,231 samples, 14.52%)</title><rect x="35.4975%" y="357" width="14.5205%" height="15" fill="rgb(221,13,13)" fg:x="220583" fg:w="90231"/><text x="35.7475%" y="367.50">1brc.exe`core::slice::..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (22,435 samples, 3.61%)</title><rect x="46.4076%" y="341" width="3.6104%" height="15" fill="rgb(238,131,9)" fg:x="288379" fg:w="22435"/><text x="46.6576%" y="351.50">1brc..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (12,488 samples, 2.01%)</title><rect x="48.0083%" y="325" width="2.0096%" height="15" fill="rgb(211,50,8)" fg:x="298326" fg:w="12488"/><text x="48.2583%" y="335.50">1..</text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (78 samples, 0.01%)</title><rect x="50.0287%" y="261" width="0.0126%" height="15" fill="rgb(245,182,24)" fg:x="310881" fg:w="78"/><text x="50.2787%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (78 samples, 0.01%)</title><rect x="50.0287%" y="245" width="0.0126%" height="15" fill="rgb(242,14,37)" fg:x="310881" fg:w="78"/><text x="50.2787%" y="255.50"></text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (78 samples, 0.01%)</title><rect x="50.0287%" y="229" width="0.0126%" height="15" fill="rgb(246,228,12)" fg:x="310881" fg:w="78"/><text x="50.2787%" y="239.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (78 samples, 0.01%)</title><rect x="50.0287%" y="213" width="0.0126%" height="15" fill="rgb(213,55,15)" fg:x="310881" fg:w="78"/><text x="50.2787%" y="223.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (78 samples, 0.01%)</title><rect x="50.0287%" y="197" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="310881" fg:w="78"/><text x="50.2787%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (80 samples, 0.01%)</title><rect x="50.0287%" y="277" width="0.0129%" height="15" fill="rgb(230,59,30)" fg:x="310881" fg:w="80"/><text x="50.2787%" y="287.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;ref_mut$&lt;1brc::StationStats&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;ref_mut$ (152 samples, 0.02%)</title><rect x="50.0179%" y="373" width="0.0245%" height="15" fill="rgb(209,121,21)" fg:x="310814" fg:w="152"/><text x="50.2679%" y="383.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global,slice2$&lt;u8&gt; &gt;(ref$&lt;slice2$ (149 samples, 0.02%)</title><rect x="50.0184%" y="357" width="0.0240%" height="15" fill="rgb(220,109,13)" fg:x="310817" fg:w="149"/><text x="50.2684%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_inner_mut(ref$&lt;slice2$ (135 samples, 0.02%)</title><rect x="50.0207%" y="341" width="0.0217%" height="15" fill="rgb(232,18,1)" fg:x="310831" fg:w="135"/><text x="50.2707%" y="351.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (108 samples, 0.02%)</title><rect x="50.0250%" y="325" width="0.0174%" height="15" fill="rgb(215,41,42)" fg:x="310858" fg:w="108"/><text x="50.2750%" y="335.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (105 samples, 0.02%)</title><rect x="50.0255%" y="309" width="0.0169%" height="15" fill="rgb(224,123,36)" fg:x="310861" fg:w="105"/><text x="50.2755%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (104 samples, 0.02%)</title><rect x="50.0257%" y="293" width="0.0167%" height="15" fill="rgb(240,125,3)" fg:x="310862" fg:w="104"/><text x="50.2757%" y="303.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;::expect(enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;, ref$ (611 samples, 0.10%)</title><rect x="50.0424%" y="373" width="0.0983%" height="15" fill="rgb(205,98,50)" fg:x="310966" fg:w="611"/><text x="50.2924%" y="383.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::finish (12,048 samples, 1.94%)</title><rect x="56.7092%" y="325" width="1.9388%" height="15" fill="rgb(205,185,37)" fg:x="352394" fg:w="12048"/><text x="56.9592%" y="335.50">1..</text></g><g><title>1brc.exe`ahash::operations::folded_multiply (12,048 samples, 1.94%)</title><rect x="56.7092%" y="309" width="1.9388%" height="15" fill="rgb(238,207,15)" fg:x="352394" fg:w="12048"/><text x="56.9592%" y="319.50">1..</text></g><g><title>1brc.exe`core::num::impl$10::wrapping_mul (9,185 samples, 1.48%)</title><rect x="57.1700%" y="293" width="1.4781%" height="15" fill="rgb(213,199,42)" fg:x="355257" fg:w="9185"/><text x="57.4200%" y="303.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_length_prefix (4,622 samples, 0.74%)</title><rect x="58.6481%" y="309" width="0.7438%" height="15" fill="rgb(235,201,11)" fg:x="364442" fg:w="4622"/><text x="58.8981%" y="319.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write_usize (4,622 samples, 0.74%)</title><rect x="58.6481%" y="293" width="0.7438%" height="15" fill="rgb(207,46,11)" fg:x="364442" fg:w="4622"/><text x="58.8981%" y="303.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write_u64 (4,622 samples, 0.74%)</title><rect x="58.6481%" y="277" width="0.7438%" height="15" fill="rgb(241,35,35)" fg:x="364442" fg:w="4622"/><text x="58.8981%" y="287.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::AHasher::update (4,622 samples, 0.74%)</title><rect x="58.6481%" y="261" width="0.7438%" height="15" fill="rgb(243,32,47)" fg:x="364442" fg:w="4622"/><text x="58.8981%" y="271.50"></text></g><g><title>1brc.exe`ahash::operations::folded_multiply (2,759 samples, 0.44%)</title><rect x="58.9479%" y="245" width="0.4440%" height="15" fill="rgb(247,202,23)" fg:x="366305" fg:w="2759"/><text x="59.1979%" y="255.50"></text></g><g><title>1brc.exe`core::num::impl$10::wrapping_mul (2,730 samples, 0.44%)</title><rect x="58.9525%" y="229" width="0.4393%" height="15" fill="rgb(219,102,11)" fg:x="366334" fg:w="2730"/><text x="59.2025%" y="239.50"></text></g><g><title>1brc.exe`ahash::operations::folded_multiply (6,138 samples, 0.99%)</title><rect x="60.2609%" y="261" width="0.9878%" height="15" fill="rgb(243,110,44)" fg:x="374464" fg:w="6138"/><text x="60.5109%" y="271.50"></text></g><g><title>1brc.exe`core::num::impl$10::wrapping_mul (2,843 samples, 0.46%)</title><rect x="60.7911%" y="245" width="0.4575%" height="15" fill="rgb(222,74,54)" fg:x="377759" fg:w="2843"/><text x="61.0411%" y="255.50"></text></g><g><title>1brc.exe`ahash::fallback_hash::AHasher::large_update (16,376 samples, 2.64%)</title><rect x="59.6653%" y="277" width="2.6353%" height="15" fill="rgb(216,99,12)" fg:x="370763" fg:w="16376"/><text x="59.9153%" y="287.50">1b..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (6,537 samples, 1.05%)</title><rect x="61.2486%" y="261" width="1.0520%" height="15" fill="rgb(226,22,26)" fg:x="380602" fg:w="6537"/><text x="61.4986%" y="271.50"></text></g><g><title>1brc.exe`ahash::convert::impl$0::read_last_u32(ref$&lt;slice2$ (1,069 samples, 0.17%)</title><rect x="62.6276%" y="261" width="0.1720%" height="15" fill="rgb(217,163,10)" fg:x="389171" fg:w="1069"/><text x="62.8776%" y="271.50"></text></g><g><title>1brc.exe`ahash::operations::read_small(ref$&lt;slice2$ (3,108 samples, 0.50%)</title><rect x="62.3006%" y="277" width="0.5002%" height="15" fill="rgb(213,25,53)" fg:x="387139" fg:w="3108"/><text x="62.5506%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;*, ref$&lt;slice2$ (43,564 samples, 7.01%)</title><rect x="56.7092%" y="341" width="7.0106%" height="15" fill="rgb(252,105,26)" fg:x="352394" fg:w="43564"/><text x="56.9592%" y="351.50">1brc.exe`..</text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (31,516 samples, 5.07%)</title><rect x="58.6481%" y="325" width="5.0717%" height="15" fill="rgb(220,39,43)" fg:x="364442" fg:w="31516"/><text x="58.8981%" y="335.50">1brc.e..</text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (26,894 samples, 4.33%)</title><rect x="59.3919%" y="309" width="4.3279%" height="15" fill="rgb(229,68,48)" fg:x="369064" fg:w="26894"/><text x="59.6419%" y="319.50">1brc...</text></g><g><title>1brc.exe`ahash::fallback_hash::impl$1::write(ahash::fallback_hash::AHasher*, ref$&lt;slice2$ (26,894 samples, 4.33%)</title><rect x="59.3919%" y="293" width="4.3279%" height="15" fill="rgb(252,8,32)" fg:x="369064" fg:w="26894"/><text x="59.6419%" y="303.50">1brc...</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (5,711 samples, 0.92%)</title><rect x="62.8007%" y="277" width="0.9190%" height="15" fill="rgb(223,20,43)" fg:x="390247" fg:w="5711"/><text x="63.0507%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::bucket (3,615 samples, 0.58%)</title><rect x="64.4395%" y="309" width="0.5817%" height="15" fill="rgb(229,81,49)" fg:x="400430" fg:w="3615"/><text x="64.6895%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;ref$&lt;slice2$ (3,615 samples, 0.58%)</title><rect x="64.4395%" y="293" width="0.5817%" height="15" fill="rgb(236,28,36)" fg:x="400430" fg:w="3615"/><text x="64.6895%" y="303.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (3,615 samples, 0.58%)</title><rect x="64.4395%" y="277" width="0.5817%" height="15" fill="rgb(249,185,26)" fg:x="400430" fg:w="3615"/><text x="64.6895%" y="287.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (3,615 samples, 0.58%)</title><rect x="64.4395%" y="261" width="0.5817%" height="15" fill="rgb(249,174,33)" fg:x="400430" fg:w="3615"/><text x="64.6895%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::impl$3::next (11,167 samples, 1.80%)</title><rect x="66.0320%" y="293" width="1.7971%" height="15" fill="rgb(233,201,37)" fg:x="410326" fg:w="11167"/><text x="66.2820%" y="303.50">1..</text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (11,167 samples, 1.80%)</title><rect x="66.0320%" y="277" width="1.7971%" height="15" fill="rgb(221,78,26)" fg:x="410326" fg:w="11167"/><text x="66.2820%" y="287.50">1..</text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros(core::num::nonzero::NonZero (74 samples, 0.01%)</title><rect x="67.8171%" y="261" width="0.0119%" height="15" fill="rgb(250,127,30)" fg:x="421419" fg:w="74"/><text x="68.0671%" y="271.50"></text></g><g><title>1brc.exe`core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros(core::num::nonzero::NonZero (74 samples, 0.01%)</title><rect x="67.8171%" y="245" width="0.0119%" height="15" fill="rgb(230,49,44)" fg:x="421419" fg:w="74"/><text x="68.0671%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (14,242 samples, 2.29%)</title><rect x="67.8290%" y="293" width="2.2919%" height="15" fill="rgb(229,67,23)" fg:x="421493" fg:w="14242"/><text x="68.0790%" y="303.50">1..</text></g><g><title>`0x7FFD7EDB1100 (175 samples, 0.03%)</title><rect x="76.0515%" y="197" width="0.0282%" height="15" fill="rgb(249,83,47)" fg:x="472588" fg:w="175"/><text x="76.3015%" y="207.50"></text></g><g><title>`0x7FFD7EDB1103 (2,232 samples, 0.36%)</title><rect x="76.0797%" y="197" width="0.3592%" height="15" fill="rgb(215,43,3)" fg:x="472763" fg:w="2232"/><text x="76.3297%" y="207.50"></text></g><g><title>`0x7FFD7EDB1107 (893 samples, 0.14%)</title><rect x="76.4389%" y="197" width="0.1437%" height="15" fill="rgb(238,154,13)" fg:x="474995" fg:w="893"/><text x="76.6889%" y="207.50"></text></g><g><title>`0x7FFD7EDB110C (221 samples, 0.04%)</title><rect x="76.5826%" y="197" width="0.0356%" height="15" fill="rgb(219,56,2)" fg:x="475888" fg:w="221"/><text x="76.8326%" y="207.50"></text></g><g><title>`0x7FFD7EDB110E (90 samples, 0.01%)</title><rect x="76.6181%" y="197" width="0.0145%" height="15" fill="rgb(233,0,4)" fg:x="476109" fg:w="90"/><text x="76.8681%" y="207.50"></text></g><g><title>`0x7FFD7EDB1112 (2,050 samples, 0.33%)</title><rect x="76.6397%" y="197" width="0.3299%" height="15" fill="rgb(235,30,7)" fg:x="476243" fg:w="2050"/><text x="76.8897%" y="207.50"></text></g><g><title>`0x7FFD7EDB1115 (12,067 samples, 1.94%)</title><rect x="76.9696%" y="197" width="1.9419%" height="15" fill="rgb(250,79,13)" fg:x="478293" fg:w="12067"/><text x="77.2196%" y="207.50">`..</text></g><g><title>`0x7FFD7EDB111A (263 samples, 0.04%)</title><rect x="78.9121%" y="197" width="0.0423%" height="15" fill="rgb(211,146,34)" fg:x="490364" fg:w="263"/><text x="79.1621%" y="207.50"></text></g><g><title>`0x7FFD7EDB111D (609 samples, 0.10%)</title><rect x="78.9545%" y="197" width="0.0980%" height="15" fill="rgb(228,22,38)" fg:x="490627" fg:w="609"/><text x="79.2045%" y="207.50"></text></g><g><title>`0x7FFD7EDB1120 (752 samples, 0.12%)</title><rect x="79.0525%" y="197" width="0.1210%" height="15" fill="rgb(235,168,5)" fg:x="491236" fg:w="752"/><text x="79.3025%" y="207.50"></text></g><g><title>`0x7FFD7EDB1125 (3,262 samples, 0.52%)</title><rect x="79.1756%" y="197" width="0.5249%" height="15" fill="rgb(221,155,16)" fg:x="492001" fg:w="3262"/><text x="79.4256%" y="207.50"></text></g><g><title>`0x7FFD7EDB1129 (527 samples, 0.08%)</title><rect x="79.7005%" y="197" width="0.0848%" height="15" fill="rgb(215,215,53)" fg:x="495263" fg:w="527"/><text x="79.9505%" y="207.50"></text></g><g><title>`0x7FFD7EDB112B (505 samples, 0.08%)</title><rect x="79.7853%" y="197" width="0.0813%" height="15" fill="rgb(223,4,10)" fg:x="495790" fg:w="505"/><text x="80.0353%" y="207.50"></text></g><g><title>`0x7FFD7EDB112E (1,140 samples, 0.18%)</title><rect x="79.8666%" y="197" width="0.1835%" height="15" fill="rgb(234,103,6)" fg:x="496295" fg:w="1140"/><text x="80.1166%" y="207.50"></text></g><g><title>`0x7FFD7EDB1130 (2,299 samples, 0.37%)</title><rect x="80.0500%" y="197" width="0.3700%" height="15" fill="rgb(227,97,0)" fg:x="497435" fg:w="2299"/><text x="80.3000%" y="207.50"></text></g><g><title>`0x7FFD7EDB1132 (7,965 samples, 1.28%)</title><rect x="80.4200%" y="197" width="1.2818%" height="15" fill="rgb(234,150,53)" fg:x="499734" fg:w="7965"/><text x="80.6700%" y="207.50"></text></g><g><title>`0x7FFD7EDB1135 (21,241 samples, 3.42%)</title><rect x="81.7018%" y="197" width="3.4182%" height="15" fill="rgb(228,201,54)" fg:x="507699" fg:w="21241"/><text x="81.9518%" y="207.50">`0x..</text></g><g><title>`0x7FFD7EDB1137 (498 samples, 0.08%)</title><rect x="85.1200%" y="197" width="0.0801%" height="15" fill="rgb(222,22,37)" fg:x="528940" fg:w="498"/><text x="85.3700%" y="207.50"></text></g><g><title>`0x7FFD7EDB113A (789 samples, 0.13%)</title><rect x="85.2002%" y="197" width="0.1270%" height="15" fill="rgb(237,53,32)" fg:x="529438" fg:w="789"/><text x="85.4502%" y="207.50"></text></g><g><title>`0x7FFD7EDB113D (541 samples, 0.09%)</title><rect x="85.3271%" y="197" width="0.0871%" height="15" fill="rgb(233,25,53)" fg:x="530227" fg:w="541"/><text x="85.5771%" y="207.50"></text></g><g><title>`0x7FFD7EDB113F (464 samples, 0.07%)</title><rect x="85.4142%" y="197" width="0.0747%" height="15" fill="rgb(210,40,34)" fg:x="530768" fg:w="464"/><text x="85.6642%" y="207.50"></text></g><g><title>`0x7FFD7EDB1142 (3,889 samples, 0.63%)</title><rect x="85.4889%" y="197" width="0.6258%" height="15" fill="rgb(241,220,44)" fg:x="531232" fg:w="3889"/><text x="85.7389%" y="207.50"></text></g><g><title>`0x7FFD7EDB1145 (76 samples, 0.01%)</title><rect x="86.1147%" y="197" width="0.0122%" height="15" fill="rgb(235,28,35)" fg:x="535121" fg:w="76"/><text x="86.3647%" y="207.50"></text></g><g><title>`0x7FFD7EDB114A (244 samples, 0.04%)</title><rect x="86.1279%" y="197" width="0.0393%" height="15" fill="rgb(210,56,17)" fg:x="535203" fg:w="244"/><text x="86.3779%" y="207.50"></text></g><g><title>`0x7FFD7EDB114E (489 samples, 0.08%)</title><rect x="86.1672%" y="197" width="0.0787%" height="15" fill="rgb(224,130,29)" fg:x="535447" fg:w="489"/><text x="86.4172%" y="207.50"></text></g><g><title>`0x7FFD7EDB1187 (392 samples, 0.06%)</title><rect x="86.2458%" y="197" width="0.0631%" height="15" fill="rgb(235,212,8)" fg:x="535936" fg:w="392"/><text x="86.4958%" y="207.50"></text></g><g><title>`0x7FFD7EDB118E (77 samples, 0.01%)</title><rect x="86.3139%" y="197" width="0.0124%" height="15" fill="rgb(223,33,50)" fg:x="536359" fg:w="77"/><text x="86.5639%" y="207.50"></text></g><g><title>`0x7FFD7EDB1190 (337 samples, 0.05%)</title><rect x="86.3263%" y="197" width="0.0542%" height="15" fill="rgb(219,149,13)" fg:x="536436" fg:w="337"/><text x="86.5763%" y="207.50"></text></g><g><title>`0x7FFD7EDB1193 (1,063 samples, 0.17%)</title><rect x="86.3805%" y="197" width="0.1711%" height="15" fill="rgb(250,156,29)" fg:x="536773" fg:w="1063"/><text x="86.6305%" y="207.50"></text></g><g><title>`0x7FFD7EDB1197 (1,441 samples, 0.23%)</title><rect x="86.5516%" y="197" width="0.2319%" height="15" fill="rgb(216,193,19)" fg:x="537836" fg:w="1441"/><text x="86.8016%" y="207.50"></text></g><g><title>`0x7FFD7EDB11A2 (152 samples, 0.02%)</title><rect x="86.7874%" y="197" width="0.0245%" height="15" fill="rgb(216,135,14)" fg:x="539301" fg:w="152"/><text x="87.0374%" y="207.50"></text></g><g><title>`0x7FFD7EDB11A6 (64 samples, 0.01%)</title><rect x="86.8118%" y="197" width="0.0103%" height="15" fill="rgb(241,47,5)" fg:x="539453" fg:w="64"/><text x="87.0618%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (103,783 samples, 16.70%)</title><rect x="70.1209%" y="277" width="16.7013%" height="15" fill="rgb(233,42,35)" fg:x="435735" fg:w="103783"/><text x="70.3709%" y="287.50">1brc.exe`hashbrown::map::e..</text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (103,783 samples, 16.70%)</title><rect x="70.1209%" y="261" width="16.7013%" height="15" fill="rgb(231,13,6)" fg:x="435735" fg:w="103783"/><text x="70.3709%" y="271.50">1brc.exe`hashbrown::impl$0..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (103,633 samples, 16.68%)</title><rect x="70.1451%" y="245" width="16.6772%" height="15" fill="rgb(207,181,40)" fg:x="435885" fg:w="103633"/><text x="70.3951%" y="255.50">1brc.exe`core::cmp::impls:..</text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (103,633 samples, 16.68%)</title><rect x="70.1451%" y="229" width="16.6772%" height="15" fill="rgb(254,173,49)" fg:x="435885" fg:w="103633"/><text x="70.3951%" y="239.50">1brc.exe`core::slice::cmp:..</text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (103,633 samples, 16.68%)</title><rect x="70.1451%" y="213" width="16.6772%" height="15" fill="rgb(221,1,38)" fg:x="435885" fg:w="103633"/><text x="70.3951%" y="223.50">1brc.exe`core::slice::cmp:..</text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (106,524 samples, 17.14%)</title><rect x="70.1209%" y="293" width="17.1424%" height="15" fill="rgb(206,124,46)" fg:x="435735" fg:w="106524"/><text x="70.3709%" y="303.50">1brc.exe`hashbrown::raw::im..</text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ref (2,741 samples, 0.44%)</title><rect x="86.8223%" y="277" width="0.4411%" height="15" fill="rgb(249,21,11)" fg:x="539518" fg:w="2741"/><text x="87.0723%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ptr (2,741 samples, 0.44%)</title><rect x="86.8223%" y="261" width="0.4411%" height="15" fill="rgb(222,201,40)" fg:x="539518" fg:w="2741"/><text x="87.0723%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (2,741 samples, 0.44%)</title><rect x="86.8223%" y="245" width="0.4411%" height="15" fill="rgb(235,61,29)" fg:x="539518" fg:w="2741"/><text x="87.0723%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (2,741 samples, 0.44%)</title><rect x="86.8223%" y="229" width="0.4411%" height="15" fill="rgb(219,207,3)" fg:x="539518" fg:w="2741"/><text x="87.0723%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::load (643 samples, 0.10%)</title><rect x="87.2634%" y="293" width="0.1035%" height="15" fill="rgb(222,56,46)" fg:x="542259" fg:w="643"/><text x="87.5134%" y="303.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (643 samples, 0.10%)</title><rect x="87.2634%" y="277" width="0.1035%" height="15" fill="rgb(239,76,54)" fg:x="542259" fg:w="643"/><text x="87.5134%" y="287.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (643 samples, 0.10%)</title><rect x="87.2634%" y="261" width="0.1035%" height="15" fill="rgb(231,124,27)" fg:x="542259" fg:w="643"/><text x="87.5134%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (6,792 samples, 1.09%)</title><rect x="87.3669%" y="293" width="1.0930%" height="15" fill="rgb(249,195,6)" fg:x="542902" fg:w="6792"/><text x="87.6169%" y="303.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (6,792 samples, 1.09%)</title><rect x="87.3669%" y="277" width="1.0930%" height="15" fill="rgb(237,174,47)" fg:x="542902" fg:w="6792"/><text x="87.6169%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global,slice2$&lt;u8&gt; &gt;(ref$&lt;slice2$ (239,274 samples, 38.51%)</title><rect x="50.1422%" y="373" width="38.5053%" height="15" fill="rgb(206,201,31)" fg:x="311586" fg:w="239274"/><text x="50.3922%" y="383.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::Stati..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_inner_mut(ref$&lt;slice2$ (204,685 samples, 32.94%)</title><rect x="55.7084%" y="357" width="32.9391%" height="15" fill="rgb(231,57,52)" fg:x="346175" fg:w="204685"/><text x="55.9584%" y="367.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (154,902 samples, 24.93%)</title><rect x="63.7198%" y="341" width="24.9277%" height="15" fill="rgb(248,177,22)" fg:x="395958" fg:w="154902"/><text x="63.9698%" y="351.50">1brc.exe`hashbrown::raw::RawTable&lt;tuple$..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (150,430 samples, 24.21%)</title><rect x="64.4395%" y="325" width="24.2080%" height="15" fill="rgb(215,211,37)" fg:x="400430" fg:w="150430"/><text x="64.6895%" y="335.50">1brc.exe`hashbrown::raw::RawTable&lt;tuple..</text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (146,815 samples, 23.63%)</title><rect x="65.0212%" y="309" width="23.6263%" height="15" fill="rgb(241,128,51)" fg:x="404045" fg:w="146815"/><text x="65.2712%" y="319.50">1brc.exe`hashbrown::raw::RawTableInner..</text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_empty (1,166 samples, 0.19%)</title><rect x="88.4599%" y="293" width="0.1876%" height="15" fill="rgb(227,165,31)" fg:x="549694" fg:w="1166"/><text x="88.7099%" y="303.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (1,166 samples, 0.19%)</title><rect x="88.4599%" y="277" width="0.1876%" height="15" fill="rgb(228,167,24)" fg:x="549694" fg:w="1166"/><text x="88.7099%" y="287.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1,166 samples, 0.19%)</title><rect x="88.4599%" y="261" width="0.1876%" height="15" fill="rgb(228,143,12)" fg:x="549694" fg:w="1166"/><text x="88.7099%" y="271.50"></text></g><g><title>`0x7FFDA1A7B44D (97 samples, 0.02%)</title><rect x="88.6745%" y="165" width="0.0156%" height="15" fill="rgb(249,149,8)" fg:x="551028" fg:w="97"/><text x="88.9245%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::alloc::inner::do_alloc (173 samples, 0.03%)</title><rect x="88.6626%" y="229" width="0.0278%" height="15" fill="rgb(243,35,44)" fg:x="550954" fg:w="173"/><text x="88.9126%" y="239.50"></text></g><g><title>1brc.exe`allocator_api2::stable::alloc::global::impl$1::allocate (173 samples, 0.03%)</title><rect x="88.6626%" y="213" width="0.0278%" height="15" fill="rgb(246,89,9)" fg:x="550954" fg:w="173"/><text x="88.9126%" y="223.50"></text></g><g><title>1brc.exe`allocator_api2::stable::alloc::global::Global::alloc_impl (173 samples, 0.03%)</title><rect x="88.6626%" y="197" width="0.0278%" height="15" fill="rgb(233,213,13)" fg:x="550954" fg:w="173"/><text x="88.9126%" y="207.50"></text></g><g><title>1brc.exe`alloc::alloc::alloc (173 samples, 0.03%)</title><rect x="88.6626%" y="181" width="0.0278%" height="15" fill="rgb(233,141,41)" fg:x="550954" fg:w="173"/><text x="88.9126%" y="191.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0&lt;allocator_api2::stable::alloc::global::Global&gt; &gt;,enum2$ (185 samples, 0.03%)</title><rect x="88.6620%" y="293" width="0.0298%" height="15" fill="rgb(239,167,4)" fg:x="550950" fg:w="185"/><text x="88.9120%" y="303.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_resize&lt;allocator_api2::stable::alloc::global::Global&gt; (185 samples, 0.03%)</title><rect x="88.6620%" y="277" width="0.0298%" height="15" fill="rgb(209,217,16)" fg:x="550950" fg:w="185"/><text x="88.9120%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (182 samples, 0.03%)</title><rect x="88.6625%" y="261" width="0.0293%" height="15" fill="rgb(219,88,35)" fg:x="550953" fg:w="182"/><text x="88.9125%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::new_uninitialized (182 samples, 0.03%)</title><rect x="88.6625%" y="245" width="0.0293%" height="15" fill="rgb(220,193,23)" fg:x="550953" fg:w="182"/><text x="88.9125%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt; &gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault (338 samples, 0.05%)</title><rect x="88.6531%" y="341" width="0.0544%" height="15" fill="rgb(230,90,52)" fg:x="550895" fg:w="338"/><text x="88.9031%" y="351.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(allocator_api2::stable::alloc::global::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (335 samples, 0.05%)</title><rect x="88.6536%" y="325" width="0.0539%" height="15" fill="rgb(252,106,19)" fg:x="550898" fg:w="335"/><text x="88.9036%" y="335.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::resize_inner(allocator_api2::stable::alloc::global::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (335 samples, 0.05%)</title><rect x="88.6536%" y="309" width="0.0539%" height="15" fill="rgb(206,74,20)" fg:x="550898" fg:w="335"/><text x="88.9036%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,allocator_api2::stable::alloc::global::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault (399 samples, 0.06%)</title><rect x="88.6525%" y="357" width="0.0642%" height="15" fill="rgb(230,138,44)" fg:x="550891" fg:w="399"/><text x="88.9025%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::insert(ref$&lt;slice2$ (436 samples, 0.07%)</title><rect x="88.6475%" y="373" width="0.0702%" height="15" fill="rgb(235,182,43)" fg:x="550860" fg:w="436"/><text x="88.8975%" y="383.50"></text></g><g><title>`0x7FFDA1A7D357 (117 samples, 0.02%)</title><rect x="88.7201%" y="293" width="0.0188%" height="15" fill="rgb(242,16,51)" fg:x="551311" fg:w="117"/><text x="88.9701%" y="303.50"></text></g><g><title>`0x7FFDA1A7FAE2 (116 samples, 0.02%)</title><rect x="88.7202%" y="277" width="0.0187%" height="15" fill="rgb(248,9,4)" fg:x="551312" fg:w="116"/><text x="88.9702%" y="287.50"></text></g><g><title>`0x7FFDA1A7B44D (208 samples, 0.03%)</title><rect x="88.7196%" y="309" width="0.0335%" height="15" fill="rgb(210,31,22)" fg:x="551308" fg:w="208"/><text x="88.9696%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::len (221 samples, 0.04%)</title><rect x="88.7177%" y="373" width="0.0356%" height="15" fill="rgb(239,54,39)" fg:x="551296" fg:w="221"/><text x="88.9677%" y="383.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (221 samples, 0.04%)</title><rect x="88.7177%" y="357" width="0.0356%" height="15" fill="rgb(230,99,41)" fg:x="551296" fg:w="221"/><text x="88.9677%" y="367.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (221 samples, 0.04%)</title><rect x="88.7177%" y="341" width="0.0356%" height="15" fill="rgb(253,106,12)" fg:x="551296" fg:w="221"/><text x="88.9677%" y="351.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::try_allocate_in (221 samples, 0.04%)</title><rect x="88.7177%" y="325" width="0.0356%" height="15" fill="rgb(213,46,41)" fg:x="551296" fg:w="221"/><text x="88.9677%" y="335.50"></text></g><g><title>`0x7FFDA1A738E3 (68 samples, 0.01%)</title><rect x="88.7600%" y="37" width="0.0109%" height="15" fill="rgb(215,133,35)" fg:x="551559" fg:w="68"/><text x="89.0100%" y="47.50"></text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path::closure$1 (73 samples, 0.01%)</title><rect x="88.7595%" y="181" width="0.0117%" height="15" fill="rgb(213,28,5)" fg:x="551556" fg:w="73"/><text x="89.0095%" y="191.50"></text></g><g><title>1brc.exe`alloc::vec::Vec::reserve_exact (72 samples, 0.01%)</title><rect x="88.7597%" y="165" width="0.0116%" height="15" fill="rgb(215,77,49)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="175.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::reserve_exact (72 samples, 0.01%)</title><rect x="88.7597%" y="149" width="0.0116%" height="15" fill="rgb(248,100,22)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="159.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::try_reserve_exact (72 samples, 0.01%)</title><rect x="88.7597%" y="133" width="0.0116%" height="15" fill="rgb(208,67,9)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="143.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::grow_exact (72 samples, 0.01%)</title><rect x="88.7597%" y="117" width="0.0116%" height="15" fill="rgb(219,133,21)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="127.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (72 samples, 0.01%)</title><rect x="88.7597%" y="101" width="0.0116%" height="15" fill="rgb(246,46,29)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="111.50"></text></g><g><title>1brc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (72 samples, 0.01%)</title><rect x="88.7597%" y="85" width="0.0116%" height="15" fill="rgb(246,185,52)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="95.50"></text></g><g><title>1brc.exe`core::result::Result::map_err (72 samples, 0.01%)</title><rect x="88.7597%" y="69" width="0.0116%" height="15" fill="rgb(252,136,11)" fg:x="551557" fg:w="72"/><text x="89.0097%" y="79.50"></text></g><g><title>`0x7FFDA1A736BD (70 samples, 0.01%)</title><rect x="88.7600%" y="53" width="0.0113%" height="15" fill="rgb(219,138,53)" fg:x="551559" fg:w="70"/><text x="89.0100%" y="63.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (96 samples, 0.02%)</title><rect x="88.7560%" y="229" width="0.0154%" height="15" fill="rgb(211,51,23)" fg:x="551534" fg:w="96"/><text x="89.0060%" y="239.50"></text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path (95 samples, 0.02%)</title><rect x="88.7561%" y="213" width="0.0153%" height="15" fill="rgb(247,221,28)" fg:x="551535" fg:w="95"/><text x="89.0061%" y="223.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fill_utf16_buf (94 samples, 0.02%)</title><rect x="88.7563%" y="197" width="0.0151%" height="15" fill="rgb(251,222,45)" fg:x="551536" fg:w="94"/><text x="89.0063%" y="207.50"></text></g><g><title>`0x7FFD9F541A09 (2,643 samples, 0.43%)</title><rect x="88.7753%" y="181" width="0.4253%" height="15" fill="rgb(217,162,53)" fg:x="551654" fg:w="2643"/><text x="89.0253%" y="191.50"></text></g><g><title>`0x7FFDA1AEE004 (2,638 samples, 0.42%)</title><rect x="88.7761%" y="165" width="0.4245%" height="15" fill="rgb(229,93,14)" fg:x="551659" fg:w="2638"/><text x="89.0261%" y="175.50"></text></g><g><title>`0x7FFD9F541476 (2,682 samples, 0.43%)</title><rect x="88.7717%" y="197" width="0.4316%" height="15" fill="rgb(209,67,49)" fg:x="551632" fg:w="2682"/><text x="89.0217%" y="207.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (2,685 samples, 0.43%)</title><rect x="88.7714%" y="229" width="0.4321%" height="15" fill="rgb(213,87,29)" fg:x="551630" fg:w="2685"/><text x="89.0214%" y="239.50"></text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (2,684 samples, 0.43%)</title><rect x="88.7716%" y="213" width="0.4319%" height="15" fill="rgb(205,151,52)" fg:x="551631" fg:w="2684"/><text x="89.0216%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (2,798 samples, 0.45%)</title><rect x="88.7544%" y="357" width="0.4503%" height="15" fill="rgb(253,215,39)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="367.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (2,798 samples, 0.45%)</title><rect x="88.7544%" y="341" width="0.4503%" height="15" fill="rgb(221,220,41)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="351.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (2,798 samples, 0.45%)</title><rect x="88.7544%" y="325" width="0.4503%" height="15" fill="rgb(218,133,21)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="335.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (2,798 samples, 0.45%)</title><rect x="88.7544%" y="309" width="0.4503%" height="15" fill="rgb(221,193,43)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::Vec (2,798 samples, 0.45%)</title><rect x="88.7544%" y="293" width="0.4503%" height="15" fill="rgb(240,128,52)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="303.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (2,798 samples, 0.45%)</title><rect x="88.7544%" y="277" width="0.4503%" height="15" fill="rgb(253,114,12)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="287.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (2,798 samples, 0.45%)</title><rect x="88.7544%" y="261" width="0.4503%" height="15" fill="rgb(215,223,47)" fg:x="551524" fg:w="2798"/><text x="89.0044%" y="271.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (2,794 samples, 0.45%)</title><rect x="88.7550%" y="245" width="0.4496%" height="15" fill="rgb(248,225,23)" fg:x="551528" fg:w="2794"/><text x="89.0050%" y="255.50"></text></g><g><title>1brc.exe`std::fs::File::open (2,799 samples, 0.45%)</title><rect x="88.7544%" y="373" width="0.4504%" height="15" fill="rgb(250,108,0)" fg:x="551524" fg:w="2799"/><text x="89.0044%" y="383.50"></text></g><g><title>`0x7FFDA1A6F43F (75 samples, 0.01%)</title><rect x="89.2082%" y="229" width="0.0121%" height="15" fill="rgb(228,208,7)" fg:x="554344" fg:w="75"/><text x="89.4582%" y="239.50"></text></g><g><title>`0x7FFDA1A7FAE2 (75 samples, 0.01%)</title><rect x="89.2082%" y="213" width="0.0121%" height="15" fill="rgb(244,45,10)" fg:x="554344" fg:w="75"/><text x="89.4582%" y="223.50"></text></g><g><title>`0x7FFDA1A7BEDA (114 samples, 0.02%)</title><rect x="89.2080%" y="261" width="0.0183%" height="15" fill="rgb(207,125,25)" fg:x="554343" fg:w="114"/><text x="89.4580%" y="271.50"></text></g><g><title>`0x7FFDA1A70B31 (113 samples, 0.02%)</title><rect x="89.2082%" y="245" width="0.0182%" height="15" fill="rgb(210,195,18)" fg:x="554344" fg:w="113"/><text x="89.4582%" y="255.50"></text></g><g><title>`0x7FFDA1A5A16F (104 samples, 0.02%)</title><rect x="89.2265%" y="245" width="0.0167%" height="15" fill="rgb(249,80,12)" fg:x="554458" fg:w="104"/><text x="89.4765%" y="255.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;::new (242 samples, 0.04%)</title><rect x="89.2048%" y="373" width="0.0389%" height="15" fill="rgb(221,65,9)" fg:x="554323" fg:w="242"/><text x="89.4548%" y="383.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;::with_capacity (242 samples, 0.04%)</title><rect x="89.2048%" y="357" width="0.0389%" height="15" fill="rgb(235,49,36)" fg:x="554323" fg:w="242"/><text x="89.4548%" y="367.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::with_capacity (242 samples, 0.04%)</title><rect x="89.2048%" y="341" width="0.0389%" height="15" fill="rgb(225,32,20)" fg:x="554323" fg:w="242"/><text x="89.4548%" y="351.50"></text></g><g><title>1brc.exe`alloc::boxed::impl$2::new_uninit_slice (242 samples, 0.04%)</title><rect x="89.2048%" y="325" width="0.0389%" height="15" fill="rgb(215,141,46)" fg:x="554323" fg:w="242"/><text x="89.4548%" y="335.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity (242 samples, 0.04%)</title><rect x="89.2048%" y="309" width="0.0389%" height="15" fill="rgb(250,160,47)" fg:x="554323" fg:w="242"/><text x="89.4548%" y="319.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (242 samples, 0.04%)</title><rect x="89.2048%" y="293" width="0.0389%" height="15" fill="rgb(216,222,40)" fg:x="554323" fg:w="242"/><text x="89.4548%" y="303.50"></text></g><g><title>`0x7FFDA1A7B3C7 (238 samples, 0.04%)</title><rect x="89.2054%" y="277" width="0.0383%" height="15" fill="rgb(234,217,39)" fg:x="554327" fg:w="238"/><text x="89.4554%" y="287.50"></text></g><g><title>`0x7FFDA1A7BF5E (107 samples, 0.02%)</title><rect x="89.2265%" y="261" width="0.0172%" height="15" fill="rgb(207,178,40)" fg:x="554458" fg:w="107"/><text x="89.4765%" y="271.50"></text></g><g><title>1brc.exe`std::io::default_read_exact&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (64,947 samples, 10.45%)</title><rect x="89.2466%" y="373" width="10.4516%" height="15" fill="rgb(221,136,13)" fg:x="554583" fg:w="64947"/><text x="89.4966%" y="383.50">1brc.exe`std::i..</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (64,946 samples, 10.45%)</title><rect x="89.2468%" y="357" width="10.4515%" height="15" fill="rgb(249,199,10)" fg:x="554584" fg:w="64946"/><text x="89.4968%" y="367.50">1brc.exe`std::i..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read (64,945 samples, 10.45%)</title><rect x="89.2469%" y="341" width="10.4513%" height="15" fill="rgb(249,222,13)" fg:x="554585" fg:w="64945"/><text x="89.4969%" y="351.50">1brc.exe`std::s..</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (64,943 samples, 10.45%)</title><rect x="89.2473%" y="325" width="10.4510%" height="15" fill="rgb(244,185,38)" fg:x="554587" fg:w="64943"/><text x="89.4973%" y="335.50">1brc.exe`std::s..</text></g><g><title>`0x7FFDA1AED624 (64,942 samples, 10.45%)</title><rect x="89.2474%" y="309" width="10.4508%" height="15" fill="rgb(236,202,9)" fg:x="554588" fg:w="64942"/><text x="89.4974%" y="319.50">`0x7FFDA1AED624</text></g><g><title>`0x7FFD9F541075 (768 samples, 0.12%)</title><rect x="99.7031%" y="373" width="0.1236%" height="15" fill="rgb(250,229,37)" fg:x="619560" fg:w="768"/><text x="99.9531%" y="383.50"></text></g><g><title>`0x7FFDA1AED744 (765 samples, 0.12%)</title><rect x="99.7036%" y="357" width="0.1231%" height="15" fill="rgb(206,174,23)" fg:x="619563" fg:w="765"/><text x="99.9536%" y="367.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (618,520 samples, 99.54%)</title><rect x="0.2982%" y="453" width="99.5357%" height="15" fill="rgb(211,33,43)" fg:x="1853" fg:w="618520"/><text x="0.5482%" y="463.50">1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded..</text></g><g><title>1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (618,520 samples, 99.54%)</title><rect x="0.2982%" y="437" width="99.5357%" height="15" fill="rgb(245,58,50)" fg:x="1853" fg:w="618520"/><text x="0.5482%" y="447.50">1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multithreaded::clo..</text></g><g><title>1brc.exe`std::panicking::try::do_call (618,520 samples, 99.54%)</title><rect x="0.2982%" y="421" width="99.5357%" height="15" fill="rgb(244,68,36)" fg:x="1853" fg:w="618520"/><text x="0.5482%" y="431.50">1brc.exe`std::panicking::try::do_call</text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (618,518 samples, 99.54%)</title><rect x="0.2985%" y="405" width="99.5354%" height="15" fill="rgb(232,229,15)" fg:x="1855" fg:w="618518"/><text x="0.5485%" y="415.50">1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationS..</text></g><g><title>1brc.exe`1brc::input_block (618,514 samples, 99.53%)</title><rect x="0.2992%" y="389" width="99.5348%" height="15" fill="rgb(254,30,23)" fg:x="1859" fg:w="618514"/><text x="0.5492%" y="399.50">1brc.exe`1brc::input_block</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (618,552 samples, 99.54%)</title><rect x="0.2964%" y="549" width="99.5409%" height="15" fill="rgb(235,160,14)" fg:x="1842" fg:w="618552"/><text x="0.5464%" y="559.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`alloc::boxed::impl$8::drop (618,552 samples, 99.54%)</title><rect x="0.2964%" y="533" width="99.5409%" height="15" fill="rgb(212,155,44)" fg:x="1842" fg:w="618552"/><text x="0.5464%" y="543.50">1brc.exe`alloc::boxed::impl$8::drop</text></g><g><title>1brc.exe`core::alloc::layout::Layout::for_value_raw (618,552 samples, 99.54%)</title><rect x="0.2964%" y="517" width="99.5409%" height="15" fill="rgb(226,2,50)" fg:x="1842" fg:w="618552"/><text x="0.5464%" y="527.50">1brc.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>1brc.exe`core::mem::size_of_val_raw (618,552 samples, 99.54%)</title><rect x="0.2964%" y="501" width="99.5409%" height="15" fill="rgb(234,177,6)" fg:x="1842" fg:w="618552"/><text x="0.5464%" y="511.50">1brc.exe`core::mem::size_of_val_raw</text></g><g><title>1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (618,551 samples, 99.54%)</title><rect x="0.2966%" y="485" width="99.5407%" height="15" fill="rgb(217,24,9)" fg:x="1843" fg:w="618551"/><text x="0.5466%" y="495.50">1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;a..</text></g><g><title>1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (618,550 samples, 99.54%)</title><rect x="0.2967%" y="469" width="99.5406%" height="15" fill="rgb(220,13,46)" fg:x="1844" fg:w="618550"/><text x="0.5467%" y="479.50">1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multithreaded::closure_env$0,alloc::vec::Ve..</text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (618,638 samples, 99.55%)</title><rect x="0.2955%" y="565" width="99.5547%" height="15" fill="rgb(239,221,27)" fg:x="1836" fg:w="618638"/><text x="0.5455%" y="575.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (618,642 samples, 99.56%)</title><rect x="0.2955%" y="581" width="99.5554%" height="15" fill="rgb(222,198,25)" fg:x="1836" fg:w="618642"/><text x="0.5455%" y="591.50">1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>`0x7FFDA0747374 (620,420 samples, 99.84%)</title><rect x="0.0109%" y="597" width="99.8415%" height="15" fill="rgb(211,99,13)" fg:x="68" fg:w="620420"/><text x="0.2609%" y="607.50">`0x7FFDA0747374</text></g><g><title>`0x7FFDA1A67498 (65 samples, 0.01%)</title><rect x="99.8539%" y="565" width="0.0105%" height="15" fill="rgb(232,111,31)" fg:x="620497" fg:w="65"/><text x="100.1039%" y="575.50"></text></g><g><title>`0x7FFDA1A9EC6E (201 samples, 0.03%)</title><rect x="99.8531%" y="581" width="0.0323%" height="15" fill="rgb(245,82,37)" fg:x="620492" fg:w="201"/><text x="100.1031%" y="591.50"></text></g><g><title>`0x7FFDA1A9CC91 (620,630 samples, 99.88%)</title><rect x="0.0106%" y="613" width="99.8753%" height="15" fill="rgb(227,149,46)" fg:x="66" fg:w="620630"/><text x="0.2606%" y="623.50">`0x7FFDA1A9CC91</text></g><g><title>`0x7FFDA074737D (208 samples, 0.03%)</title><rect x="99.8524%" y="597" width="0.0335%" height="15" fill="rgb(218,36,50)" fg:x="620488" fg:w="208"/><text x="100.1024%" y="607.50"></text></g><g><title>`0x7FFDA1AC5C20 (99 samples, 0.02%)</title><rect x="99.8859%" y="613" width="0.0159%" height="15" fill="rgb(226,80,48)" fg:x="620696" fg:w="99"/><text x="100.1359%" y="623.50"></text></g><g><title>`0x7FFDA1AA4CDF (75 samples, 0.01%)</title><rect x="99.9081%" y="533" width="0.0121%" height="15" fill="rgb(238,224,15)" fg:x="620834" fg:w="75"/><text x="100.1581%" y="543.50"></text></g><g><title>`0x7FFDA1AA4B2D (77 samples, 0.01%)</title><rect x="99.9080%" y="549" width="0.0124%" height="15" fill="rgb(241,136,10)" fg:x="620833" fg:w="77"/><text x="100.1580%" y="559.50"></text></g><g><title>`0x7FFDA1A677A7 (93 samples, 0.01%)</title><rect x="99.9076%" y="565" width="0.0150%" height="15" fill="rgb(208,32,45)" fg:x="620831" fg:w="93"/><text x="100.1576%" y="575.50"></text></g><g><title>`0x7FFD9F569EB1 (207 samples, 0.03%)</title><rect x="99.9401%" y="469" width="0.0333%" height="15" fill="rgb(207,135,9)" fg:x="621033" fg:w="207"/><text x="100.1901%" y="479.50"></text></g><g><title>`0x7FFDA1AED644 (204 samples, 0.03%)</title><rect x="99.9406%" y="453" width="0.0328%" height="15" fill="rgb(206,86,44)" fg:x="621036" fg:w="204"/><text x="100.1906%" y="463.50"></text></g><g><title>`0x7FFD9F569968 (243 samples, 0.04%)</title><rect x="99.9350%" y="501" width="0.0391%" height="15" fill="rgb(245,177,15)" fg:x="621001" fg:w="243"/><text x="100.1850%" y="511.50"></text></g><g><title>`0x7FFD9F569B80 (241 samples, 0.04%)</title><rect x="99.9353%" y="485" width="0.0388%" height="15" fill="rgb(206,64,50)" fg:x="621003" fg:w="241"/><text x="100.1853%" y="495.50"></text></g><g><title>`0x7FFD9F568E0D (256 samples, 0.04%)</title><rect x="99.9331%" y="533" width="0.0412%" height="15" fill="rgb(234,36,40)" fg:x="620989" fg:w="256"/><text x="100.1831%" y="543.50"></text></g><g><title>`0x7FFD9F569074 (251 samples, 0.04%)</title><rect x="99.9339%" y="517" width="0.0404%" height="15" fill="rgb(213,64,8)" fg:x="620994" fg:w="251"/><text x="100.1839%" y="527.50"></text></g><g><title>`0x7FFDA1A69A1D (354 samples, 0.06%)</title><rect x="99.9310%" y="549" width="0.0570%" height="15" fill="rgb(210,75,36)" fg:x="620976" fg:w="354"/><text x="100.1810%" y="559.50"></text></g><g><title>`0x7FFDA1A6789F (358 samples, 0.06%)</title><rect x="99.9310%" y="565" width="0.0576%" height="15" fill="rgb(229,88,21)" fg:x="620976" fg:w="358"/><text x="100.1810%" y="575.50"></text></g><g><title>`0x7FFDA1AC60A4 (568 samples, 0.09%)</title><rect x="99.9070%" y="581" width="0.0914%" height="15" fill="rgb(252,204,47)" fg:x="620827" fg:w="568"/><text x="100.1570%" y="591.50"></text></g><g><title>`0x7FFDA1AC5C83 (596 samples, 0.10%)</title><rect x="99.9030%" y="597" width="0.0959%" height="15" fill="rgb(208,77,27)" fg:x="620802" fg:w="596"/><text x="100.1530%" y="607.50"></text></g><g><title>`0x7FFDA1AC5C2E (605 samples, 0.10%)</title><rect x="99.9020%" y="613" width="0.0974%" height="15" fill="rgb(221,76,26)" fg:x="620796" fg:w="605"/><text x="100.1520%" y="623.50"></text></g><g><title>all (621,405 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="621405"/><text x="0.2500%" y="639.50"></text></g></svg></svg>