<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="894492"><g><title>`0x7FFDA1A9CC70 (583 samples, 0.07%)</title><rect x="0.0000%" y="597" width="0.0652%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="583"/><text x="0.2500%" y="607.50"></text></g><g><title>`0x7FFD9F54BBAF (5,321 samples, 0.59%)</title><rect x="0.1116%" y="229" width="0.5949%" height="15" fill="rgb(217,0,24)" fg:x="998" fg:w="5321"/><text x="0.3616%" y="239.50"></text></g><g><title>`0x7FFDA1AEED94 (5,311 samples, 0.59%)</title><rect x="0.1127%" y="213" width="0.5937%" height="15" fill="rgb(221,193,54)" fg:x="1008" fg:w="5311"/><text x="0.3627%" y="223.50"></text></g><g><title>`0x7FFDA074B91D (5,374 samples, 0.60%)</title><rect x="0.1068%" y="245" width="0.6008%" height="15" fill="rgb(248,212,6)" fg:x="955" fg:w="5374"/><text x="0.3568%" y="255.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (5,429 samples, 0.61%)</title><rect x="0.1007%" y="277" width="0.6069%" height="15" fill="rgb(208,68,35)" fg:x="901" fg:w="5429"/><text x="0.3507%" y="287.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread::Thread::new (5,427 samples, 0.61%)</title><rect x="0.1010%" y="261" width="0.6067%" height="15" fill="rgb(232,128,0)" fg:x="903" fg:w="5427"/><text x="0.3510%" y="271.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::clear (5,568 samples, 0.62%)</title><rect x="0.0928%" y="357" width="0.6225%" height="15" fill="rgb(207,160,47)" fg:x="830" fg:w="5568"/><text x="0.3428%" y="367.50"></text></g><g><title>1brc.exe`std::thread::spawn&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (5,568 samples, 0.62%)</title><rect x="0.0928%" y="341" width="0.6225%" height="15" fill="rgb(228,23,34)" fg:x="830" fg:w="5568"/><text x="0.3428%" y="351.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn (5,566 samples, 0.62%)</title><rect x="0.0930%" y="325" width="0.6223%" height="15" fill="rgb(218,30,26)" fg:x="832" fg:w="5566"/><text x="0.3430%" y="335.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked (5,566 samples, 0.62%)</title><rect x="0.0930%" y="309" width="0.6223%" height="15" fill="rgb(220,122,19)" fg:x="832" fg:w="5566"/><text x="0.3430%" y="319.50"></text></g><g><title>1brc.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, 1brc::input_multitreaded::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (5,566 samples, 0.62%)</title><rect x="0.0930%" y="293" width="0.6223%" height="15" fill="rgb(250,228,42)" fg:x="832" fg:w="5566"/><text x="0.3430%" y="303.50"></text></g><g><title>`0x7FFDA1A6ED55 (802 samples, 0.09%)</title><rect x="0.7289%" y="133" width="0.0897%" height="15" fill="rgb(240,193,28)" fg:x="6520" fg:w="802"/><text x="0.9789%" y="143.50"></text></g><g><title>`0x7FFDA1A6EA31 (968 samples, 0.11%)</title><rect x="0.7286%" y="165" width="0.1082%" height="15" fill="rgb(216,20,37)" fg:x="6517" fg:w="968"/><text x="0.9786%" y="175.50"></text></g><g><title>`0x7FFDA1A6E2A9 (968 samples, 0.11%)</title><rect x="0.7286%" y="149" width="0.1082%" height="15" fill="rgb(206,188,39)" fg:x="6517" fg:w="968"/><text x="0.9786%" y="159.50"></text></g><g><title>`0x7FFDA1A6E3AD (979 samples, 0.11%)</title><rect x="0.7278%" y="181" width="0.1094%" height="15" fill="rgb(217,207,13)" fg:x="6510" fg:w="979"/><text x="0.9778%" y="191.50"></text></g><g><title>`0x7FFDA1A7095C (237 samples, 0.03%)</title><rect x="0.8389%" y="149" width="0.0265%" height="15" fill="rgb(231,73,38)" fg:x="7504" fg:w="237"/><text x="1.0889%" y="159.50"></text></g><g><title>`0x7FFDA1A59B1A (237 samples, 0.03%)</title><rect x="0.8389%" y="133" width="0.0265%" height="15" fill="rgb(225,20,46)" fg:x="7504" fg:w="237"/><text x="1.0889%" y="143.50"></text></g><g><title>`0x7FFDA1AED924 (236 samples, 0.03%)</title><rect x="0.8390%" y="117" width="0.0264%" height="15" fill="rgb(210,31,41)" fg:x="7505" fg:w="236"/><text x="1.0890%" y="127.50"></text></g><g><title>`0x7FFDA1A6E412 (254 samples, 0.03%)</title><rect x="0.8372%" y="181" width="0.0284%" height="15" fill="rgb(221,200,47)" fg:x="7489" fg:w="254"/><text x="1.0872%" y="191.50"></text></g><g><title>`0x7FFDA1A6F35E (241 samples, 0.03%)</title><rect x="0.8387%" y="165" width="0.0269%" height="15" fill="rgb(226,26,5)" fg:x="7502" fg:w="241"/><text x="1.0887%" y="175.50"></text></g><g><title>`0x7FFDA1A765F6 (1,252 samples, 0.14%)</title><rect x="0.7266%" y="197" width="0.1400%" height="15" fill="rgb(249,33,26)" fg:x="6499" fg:w="1252"/><text x="0.9766%" y="207.50"></text></g><g><title>`0x7FFDA1A75B74 (1,347 samples, 0.15%)</title><rect x="0.7164%" y="213" width="0.1506%" height="15" fill="rgb(235,183,28)" fg:x="6408" fg:w="1347"/><text x="0.9664%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::IntoIter&lt;tuple$ (1,351 samples, 0.15%)</title><rect x="0.7164%" y="357" width="0.1510%" height="15" fill="rgb(221,5,38)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="367.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop(alloc::vec::into_iter::IntoIter&lt;tuple$ (1,351 samples, 0.15%)</title><rect x="0.7164%" y="341" width="0.1510%" height="15" fill="rgb(247,18,42)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="351.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (1,351 samples, 0.15%)</title><rect x="0.7164%" y="325" width="0.1510%" height="15" fill="rgb(241,131,45)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="335.50"></text></g><g><title>1brc.exe`alloc::vec::into_iter::impl$15::drop::impl$0::drop(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (1,351 samples, 0.15%)</title><rect x="0.7164%" y="309" width="0.1510%" height="15" fill="rgb(249,31,29)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,351 samples, 0.15%)</title><rect x="0.7164%" y="293" width="0.1510%" height="15" fill="rgb(225,111,53)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="303.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,351 samples, 0.15%)</title><rect x="0.7164%" y="277" width="0.1510%" height="15" fill="rgb(238,160,17)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="287.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,351 samples, 0.15%)</title><rect x="0.7164%" y="261" width="0.1510%" height="15" fill="rgb(214,148,48)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="271.50"></text></g><g><title>1brc.exe`alloc::alloc::dealloc (1,351 samples, 0.15%)</title><rect x="0.7164%" y="245" width="0.1510%" height="15" fill="rgb(232,36,49)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="255.50"></text></g><g><title>`0x7FFDA1A747B1 (1,351 samples, 0.15%)</title><rect x="0.7164%" y="229" width="0.1510%" height="15" fill="rgb(209,103,24)" fg:x="6408" fg:w="1351"/><text x="0.9664%" y="239.50"></text></g><g><title>`0x7FFD9F541075 (355 samples, 0.04%)</title><rect x="0.8789%" y="261" width="0.0397%" height="15" fill="rgb(229,88,8)" fg:x="7862" fg:w="355"/><text x="1.1289%" y="271.50"></text></g><g><title>`0x7FFDA1AED744 (351 samples, 0.04%)</title><rect x="0.8794%" y="245" width="0.0392%" height="15" fill="rgb(213,181,19)" fg:x="7866" fg:w="351"/><text x="1.1294%" y="255.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::is_unique (453 samples, 0.05%)</title><rect x="0.8681%" y="309" width="0.0506%" height="15" fill="rgb(254,191,54)" fg:x="7765" fg:w="453"/><text x="1.1181%" y="319.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::inner (453 samples, 0.05%)</title><rect x="0.8681%" y="293" width="0.0506%" height="15" fill="rgb(241,83,37)" fg:x="7765" fg:w="453"/><text x="1.1181%" y="303.50"></text></g><g><title>1brc.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; &gt; &gt;::as_ref (447 samples, 0.05%)</title><rect x="0.8688%" y="277" width="0.0500%" height="15" fill="rgb(233,36,39)" fg:x="7771" fg:w="447"/><text x="1.1188%" y="287.50"></text></g><g><title>1brc.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::get_mut (455 samples, 0.05%)</title><rect x="0.8681%" y="325" width="0.0509%" height="15" fill="rgb(226,3,54)" fg:x="7765" fg:w="455"/><text x="1.1181%" y="335.50"></text></g><g><title>1brc.exe`enum2$&lt;core::result::Result&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::any::Any,core::marker::Send&gt;,alloc::alloc::Global&gt; &gt; &gt;::expect(enum2$&lt;core::result::Result&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::any::Any,core::marker::Send&gt;,alloc::alloc::Global&gt; &gt; &gt;, ref$ (468 samples, 0.05%)</title><rect x="0.8674%" y="357" width="0.0523%" height="15" fill="rgb(245,192,40)" fg:x="7759" fg:w="468"/><text x="1.1174%" y="367.50"></text></g><g><title>1brc.exe`std::thread::JoinInner&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;::join&lt;alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;(std::thread::JoinInner&lt;alloc::vec::Vec&lt;tuple$ (468 samples, 0.05%)</title><rect x="0.8674%" y="341" width="0.0523%" height="15" fill="rgb(238,167,29)" fg:x="7759" fg:w="468"/><text x="1.1174%" y="351.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (488 samples, 0.05%)</title><rect x="0.9887%" y="133" width="0.0546%" height="15" fill="rgb(232,182,51)" fg:x="8844" fg:w="488"/><text x="1.2387%" y="143.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (411 samples, 0.05%)</title><rect x="1.0433%" y="133" width="0.0459%" height="15" fill="rgb(231,60,39)" fg:x="9332" fg:w="411"/><text x="1.2933%" y="143.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (217 samples, 0.02%)</title><rect x="1.0650%" y="117" width="0.0243%" height="15" fill="rgb(208,69,12)" fg:x="9526" fg:w="217"/><text x="1.3150%" y="127.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash (1,247 samples, 0.14%)</title><rect x="0.9499%" y="261" width="0.1394%" height="15" fill="rgb(235,93,37)" fg:x="8497" fg:w="1247"/><text x="1.1999%" y="271.50"></text></g><g><title>1brc.exe`alloc::string::impl$23::hash (1,149 samples, 0.13%)</title><rect x="0.9609%" y="245" width="0.1285%" height="15" fill="rgb(213,116,39)" fg:x="8595" fg:w="1149"/><text x="1.2109%" y="255.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$2::hash(ref$ (1,149 samples, 0.13%)</title><rect x="0.9609%" y="229" width="0.1285%" height="15" fill="rgb(222,207,29)" fg:x="8595" fg:w="1149"/><text x="1.2109%" y="239.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (1,149 samples, 0.13%)</title><rect x="0.9609%" y="213" width="0.1285%" height="15" fill="rgb(206,96,30)" fg:x="8595" fg:w="1149"/><text x="1.2109%" y="223.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (1,149 samples, 0.13%)</title><rect x="0.9609%" y="197" width="0.1285%" height="15" fill="rgb(218,138,4)" fg:x="8595" fg:w="1149"/><text x="1.2109%" y="207.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (1,149 samples, 0.13%)</title><rect x="0.9609%" y="181" width="0.1285%" height="15" fill="rgb(250,191,14)" fg:x="8595" fg:w="1149"/><text x="1.2109%" y="191.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (1,148 samples, 0.13%)</title><rect x="0.9610%" y="165" width="0.1283%" height="15" fill="rgb(239,60,40)" fg:x="8596" fg:w="1148"/><text x="1.2110%" y="175.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1,121 samples, 0.13%)</title><rect x="0.9640%" y="149" width="0.1253%" height="15" fill="rgb(206,27,48)" fg:x="8623" fg:w="1121"/><text x="1.2140%" y="159.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (217 samples, 0.02%)</title><rect x="1.1149%" y="213" width="0.0243%" height="15" fill="rgb(225,35,8)" fg:x="9973" fg:w="217"/><text x="1.3649%" y="223.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (126 samples, 0.01%)</title><rect x="1.1509%" y="197" width="0.0141%" height="15" fill="rgb(250,213,24)" fg:x="10295" fg:w="126"/><text x="1.4009%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (2,030 samples, 0.23%)</title><rect x="0.9458%" y="293" width="0.2269%" height="15" fill="rgb(247,123,22)" fg:x="8460" fg:w="2030"/><text x="1.1958%" y="303.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (2,008 samples, 0.22%)</title><rect x="0.9482%" y="277" width="0.2245%" height="15" fill="rgb(231,138,38)" fg:x="8482" fg:w="2008"/><text x="1.1982%" y="287.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (684 samples, 0.08%)</title><rect x="1.0963%" y="261" width="0.0765%" height="15" fill="rgb(231,145,46)" fg:x="9806" fg:w="684"/><text x="1.3463%" y="271.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (684 samples, 0.08%)</title><rect x="1.0963%" y="245" width="0.0765%" height="15" fill="rgb(251,118,11)" fg:x="9806" fg:w="684"/><text x="1.3463%" y="255.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (684 samples, 0.08%)</title><rect x="1.0963%" y="229" width="0.0765%" height="15" fill="rgb(217,147,25)" fg:x="9806" fg:w="684"/><text x="1.3463%" y="239.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (234 samples, 0.03%)</title><rect x="1.1466%" y="213" width="0.0262%" height="15" fill="rgb(247,81,37)" fg:x="10256" fg:w="234"/><text x="1.3966%" y="223.50"></text></g><g><title>`0x7FFD7EDB1132 (154 samples, 0.02%)</title><rect x="1.2126%" y="197" width="0.0172%" height="15" fill="rgb(209,12,38)" fg:x="10847" fg:w="154"/><text x="1.4626%" y="207.50"></text></g><g><title>`0x7FFD7EDB1193 (93 samples, 0.01%)</title><rect x="1.2450%" y="197" width="0.0104%" height="15" fill="rgb(227,1,9)" fg:x="11136" fg:w="93"/><text x="1.4950%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0 (741 samples, 0.08%)</title><rect x="1.1727%" y="293" width="0.0828%" height="15" fill="rgb(248,47,43)" fg:x="10490" fg:w="741"/><text x="1.4227%" y="303.50"></text></g><g><title>1brc.exe`hashbrown::rustc_entry::impl$0::rustc_entry::closure$0(hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;*, tuple$ (671 samples, 0.08%)</title><rect x="1.1806%" y="277" width="0.0750%" height="15" fill="rgb(221,10,30)" fg:x="10560" fg:w="671"/><text x="1.4306%" y="287.50"></text></g><g><title>1brc.exe`alloc::string::impl$71::eq (671 samples, 0.08%)</title><rect x="1.1806%" y="261" width="0.0750%" height="15" fill="rgb(210,229,1)" fg:x="10560" fg:w="671"/><text x="1.4306%" y="271.50"></text></g><g><title>1brc.exe`alloc::vec::partial_eq::impl$0::eq(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, alloc::vec::Vec (671 samples, 0.08%)</title><rect x="1.1806%" y="245" width="0.0750%" height="15" fill="rgb(222,148,37)" fg:x="10560" fg:w="671"/><text x="1.4306%" y="255.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (671 samples, 0.08%)</title><rect x="1.1806%" y="229" width="0.0750%" height="15" fill="rgb(234,67,33)" fg:x="10560" fg:w="671"/><text x="1.4306%" y="239.50"></text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (671 samples, 0.08%)</title><rect x="1.1806%" y="213" width="0.0750%" height="15" fill="rgb(247,98,35)" fg:x="10560" fg:w="671"/><text x="1.4306%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0 (2,966 samples, 0.33%)</title><rect x="0.9273%" y="325" width="0.3316%" height="15" fill="rgb(247,138,52)" fg:x="8295" fg:w="2966"/><text x="1.1773%" y="335.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (2,966 samples, 0.33%)</title><rect x="0.9273%" y="309" width="0.3316%" height="15" fill="rgb(213,79,30)" fg:x="8295" fg:w="2966"/><text x="1.1773%" y="319.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState&gt;::entry (2,978 samples, 0.33%)</title><rect x="0.9261%" y="357" width="0.3329%" height="15" fill="rgb(246,177,23)" fg:x="8284" fg:w="2978"/><text x="1.1761%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;alloc::string::String,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::rustc_entry (2,978 samples, 0.33%)</title><rect x="0.9261%" y="341" width="0.3329%" height="15" fill="rgb(230,62,27)" fg:x="8284" fg:w="2978"/><text x="1.1761%" y="351.50"></text></g><g><title>1brc.exe`std::io::BufRead::has_data_left(std::io::buffered::bufreader::BufReader (2,600 samples, 0.29%)</title><rect x="1.2624%" y="357" width="0.2907%" height="15" fill="rgb(216,154,8)" fg:x="11292" fg:w="2600"/><text x="1.5124%" y="367.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$5::fill_buf(std::io::buffered::bufreader::BufReader (2,600 samples, 0.29%)</title><rect x="1.2624%" y="341" width="0.2907%" height="15" fill="rgb(244,35,45)" fg:x="11292" fg:w="2600"/><text x="1.5124%" y="351.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (2,600 samples, 0.29%)</title><rect x="1.2624%" y="325" width="0.2907%" height="15" fill="rgb(251,115,12)" fg:x="11292" fg:w="2600"/><text x="1.5124%" y="335.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (2,599 samples, 0.29%)</title><rect x="1.2625%" y="309" width="0.2906%" height="15" fill="rgb(240,54,50)" fg:x="11293" fg:w="2599"/><text x="1.5125%" y="319.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read_buf (2,592 samples, 0.29%)</title><rect x="1.2633%" y="293" width="0.2898%" height="15" fill="rgb(233,84,52)" fg:x="11300" fg:w="2592"/><text x="1.5133%" y="303.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (2,586 samples, 0.29%)</title><rect x="1.2640%" y="277" width="0.2891%" height="15" fill="rgb(207,117,47)" fg:x="11306" fg:w="2586"/><text x="1.5140%" y="287.50"></text></g><g><title>`0x7FFDA1AED624 (2,569 samples, 0.29%)</title><rect x="1.2659%" y="261" width="0.2872%" height="15" fill="rgb(249,43,39)" fg:x="11323" fg:w="2569"/><text x="1.5159%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$7::seek(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, enum2$ (135 samples, 0.02%)</title><rect x="1.5573%" y="357" width="0.0151%" height="15" fill="rgb(209,38,44)" fg:x="13930" fg:w="135"/><text x="1.8073%" y="367.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (134 samples, 0.01%)</title><rect x="1.5574%" y="341" width="0.0150%" height="15" fill="rgb(236,212,23)" fg:x="13931" fg:w="134"/><text x="1.8074%" y="351.50"></text></g><g><title>1brc.exe`std::fs::impl$10::seek (133 samples, 0.01%)</title><rect x="1.5575%" y="325" width="0.0149%" height="15" fill="rgb(242,79,21)" fg:x="13932" fg:w="133"/><text x="1.8075%" y="335.50"></text></g><g><title>1brc.exe`std::fs::impl$7::seek (133 samples, 0.01%)</title><rect x="1.5575%" y="309" width="0.0149%" height="15" fill="rgb(211,96,35)" fg:x="13932" fg:w="133"/><text x="1.8075%" y="319.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::seek (133 samples, 0.01%)</title><rect x="1.5575%" y="293" width="0.0149%" height="15" fill="rgb(253,215,40)" fg:x="13932" fg:w="133"/><text x="1.8075%" y="303.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::cvt (133 samples, 0.01%)</title><rect x="1.5575%" y="277" width="0.0149%" height="15" fill="rgb(211,81,21)" fg:x="13932" fg:w="133"/><text x="1.8075%" y="287.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::impl$3::is_zero (133 samples, 0.01%)</title><rect x="1.5575%" y="261" width="0.0149%" height="15" fill="rgb(208,190,38)" fg:x="13932" fg:w="133"/><text x="1.8075%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$7::stream_position(std::io::buffered::bufreader::BufReader (148 samples, 0.02%)</title><rect x="1.5724%" y="357" width="0.0165%" height="15" fill="rgb(235,213,38)" fg:x="14065" fg:w="148"/><text x="1.8224%" y="367.50"></text></g><g><title>1brc.exe`std::fs::impl$10::seek (148 samples, 0.02%)</title><rect x="1.5724%" y="341" width="0.0165%" height="15" fill="rgb(237,122,38)" fg:x="14065" fg:w="148"/><text x="1.8224%" y="351.50"></text></g><g><title>1brc.exe`std::fs::impl$7::seek (147 samples, 0.02%)</title><rect x="1.5725%" y="325" width="0.0164%" height="15" fill="rgb(244,218,35)" fg:x="14066" fg:w="147"/><text x="1.8225%" y="335.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::seek (147 samples, 0.02%)</title><rect x="1.5725%" y="309" width="0.0164%" height="15" fill="rgb(240,68,47)" fg:x="14066" fg:w="147"/><text x="1.8225%" y="319.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::cvt (144 samples, 0.02%)</title><rect x="1.5728%" y="293" width="0.0161%" height="15" fill="rgb(210,16,53)" fg:x="14069" fg:w="144"/><text x="1.8228%" y="303.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::impl$3::is_zero (144 samples, 0.02%)</title><rect x="1.5728%" y="277" width="0.0161%" height="15" fill="rgb(235,124,12)" fg:x="14069" fg:w="144"/><text x="1.8228%" y="287.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (94 samples, 0.01%)</title><rect x="1.5892%" y="229" width="0.0105%" height="15" fill="rgb(224,169,11)" fg:x="14215" fg:w="94"/><text x="1.8392%" y="239.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (94 samples, 0.01%)</title><rect x="1.5892%" y="213" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="14215" fg:w="94"/><text x="1.8392%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (94 samples, 0.01%)</title><rect x="1.5892%" y="197" width="0.0105%" height="15" fill="rgb(242,216,29)" fg:x="14215" fg:w="94"/><text x="1.8392%" y="207.50"></text></g><g><title>1brc.exe`std::path::impl$30::clone (102 samples, 0.01%)</title><rect x="1.5889%" y="357" width="0.0114%" height="15" fill="rgb(230,116,27)" fg:x="14213" fg:w="102"/><text x="1.8389%" y="367.50"></text></g><g><title>1brc.exe`std::ffi::os_str::impl$10::clone (102 samples, 0.01%)</title><rect x="1.5889%" y="341" width="0.0114%" height="15" fill="rgb(228,99,48)" fg:x="14213" fg:w="102"/><text x="1.8389%" y="351.50"></text></g><g><title>1brc.exe`std::sys::os_str::wtf8::impl$9::clone (102 samples, 0.01%)</title><rect x="1.5889%" y="325" width="0.0114%" height="15" fill="rgb(253,11,6)" fg:x="14213" fg:w="102"/><text x="1.8389%" y="335.50"></text></g><g><title>1brc.exe`std::sys_common::wtf8::impl$34::clone (102 samples, 0.01%)</title><rect x="1.5889%" y="309" width="0.0114%" height="15" fill="rgb(247,143,39)" fg:x="14213" fg:w="102"/><text x="1.8389%" y="319.50"></text></g><g><title>1brc.exe`alloc::vec::impl$11::clone(alloc::vec::Vec (101 samples, 0.01%)</title><rect x="1.5891%" y="293" width="0.0113%" height="15" fill="rgb(236,97,10)" fg:x="14214" fg:w="101"/><text x="1.8391%" y="303.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (100 samples, 0.01%)</title><rect x="1.5892%" y="277" width="0.0112%" height="15" fill="rgb(233,208,19)" fg:x="14215" fg:w="100"/><text x="1.8392%" y="287.50"></text></g><g><title>1brc.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (100 samples, 0.01%)</title><rect x="1.5892%" y="261" width="0.0112%" height="15" fill="rgb(216,164,2)" fg:x="14215" fg:w="100"/><text x="1.8392%" y="271.50"></text></g><g><title>1brc.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (100 samples, 0.01%)</title><rect x="1.5892%" y="245" width="0.0112%" height="15" fill="rgb(220,129,5)" fg:x="14215" fg:w="100"/><text x="1.8392%" y="255.50"></text></g><g><title>`0x7FFDA1AF74BA (95 samples, 0.01%)</title><rect x="1.6539%" y="341" width="0.0106%" height="15" fill="rgb(242,17,10)" fg:x="14794" fg:w="95"/><text x="1.9039%" y="351.50"></text></g><g><title>`0x7FFDA1AF75FA (124 samples, 0.01%)</title><rect x="1.7144%" y="341" width="0.0139%" height="15" fill="rgb(242,107,0)" fg:x="15335" fg:w="124"/><text x="1.9644%" y="351.50"></text></g><g><title>`0x7FFDA1A6ED55 (235 samples, 0.03%)</title><rect x="1.7352%" y="197" width="0.0263%" height="15" fill="rgb(251,28,31)" fg:x="15521" fg:w="235"/><text x="1.9852%" y="207.50"></text></g><g><title>`0x7FFDA1A6E2A9 (272 samples, 0.03%)</title><rect x="1.7352%" y="213" width="0.0304%" height="15" fill="rgb(233,223,10)" fg:x="15521" fg:w="272"/><text x="1.9852%" y="223.50"></text></g><g><title>`0x7FFDA1A6E3AD (273 samples, 0.03%)</title><rect x="1.7352%" y="245" width="0.0305%" height="15" fill="rgb(215,21,27)" fg:x="15521" fg:w="273"/><text x="1.9852%" y="255.50"></text></g><g><title>`0x7FFDA1A6EA31 (273 samples, 0.03%)</title><rect x="1.7352%" y="229" width="0.0305%" height="15" fill="rgb(232,23,21)" fg:x="15521" fg:w="273"/><text x="1.9852%" y="239.50"></text></g><g><title>`0x7FFDA1A6E412 (91 samples, 0.01%)</title><rect x="1.7657%" y="245" width="0.0102%" height="15" fill="rgb(244,5,23)" fg:x="15794" fg:w="91"/><text x="2.0157%" y="255.50"></text></g><g><title>`0x7FFDA1A544AF (411 samples, 0.05%)</title><rect x="1.7316%" y="309" width="0.0459%" height="15" fill="rgb(226,81,46)" fg:x="15489" fg:w="411"/><text x="1.9816%" y="319.50"></text></g><g><title>`0x7FFDA1A747B1 (411 samples, 0.05%)</title><rect x="1.7316%" y="293" width="0.0459%" height="15" fill="rgb(247,70,30)" fg:x="15489" fg:w="411"/><text x="1.9816%" y="303.50"></text></g><g><title>`0x7FFDA1A75B74 (411 samples, 0.05%)</title><rect x="1.7316%" y="277" width="0.0459%" height="15" fill="rgb(212,68,19)" fg:x="15489" fg:w="411"/><text x="1.9816%" y="287.50"></text></g><g><title>`0x7FFDA1A765F6 (382 samples, 0.04%)</title><rect x="1.7348%" y="261" width="0.0427%" height="15" fill="rgb(240,187,13)" fg:x="15518" fg:w="382"/><text x="1.9848%" y="271.50"></text></g><g><title>`0x7FFDA1A70F01 (420 samples, 0.05%)</title><rect x="1.7316%" y="325" width="0.0470%" height="15" fill="rgb(223,113,26)" fg:x="15489" fg:w="420"/><text x="1.9816%" y="335.50"></text></g><g><title>`0x7FFDA1A6ED55 (202 samples, 0.02%)</title><rect x="1.7816%" y="197" width="0.0226%" height="15" fill="rgb(206,192,2)" fg:x="15936" fg:w="202"/><text x="2.0316%" y="207.50"></text></g><g><title>`0x7FFDA1A6EA31 (238 samples, 0.03%)</title><rect x="1.7815%" y="229" width="0.0266%" height="15" fill="rgb(241,108,4)" fg:x="15935" fg:w="238"/><text x="2.0315%" y="239.50"></text></g><g><title>`0x7FFDA1A6E2A9 (238 samples, 0.03%)</title><rect x="1.7815%" y="213" width="0.0266%" height="15" fill="rgb(247,173,49)" fg:x="15935" fg:w="238"/><text x="2.0315%" y="223.50"></text></g><g><title>`0x7FFDA1A6E3AD (239 samples, 0.03%)</title><rect x="1.7815%" y="245" width="0.0267%" height="15" fill="rgb(224,114,35)" fg:x="15935" fg:w="239"/><text x="2.0315%" y="255.50"></text></g><g><title>`0x7FFDA1A544AF (328 samples, 0.04%)</title><rect x="1.7789%" y="309" width="0.0367%" height="15" fill="rgb(245,159,27)" fg:x="15912" fg:w="328"/><text x="2.0289%" y="319.50"></text></g><g><title>`0x7FFDA1A747B1 (327 samples, 0.04%)</title><rect x="1.7790%" y="293" width="0.0366%" height="15" fill="rgb(245,172,44)" fg:x="15913" fg:w="327"/><text x="2.0290%" y="303.50"></text></g><g><title>`0x7FFDA1A75B74 (327 samples, 0.04%)</title><rect x="1.7790%" y="277" width="0.0366%" height="15" fill="rgb(236,23,11)" fg:x="15913" fg:w="327"/><text x="2.0290%" y="287.50"></text></g><g><title>`0x7FFDA1A765F6 (306 samples, 0.03%)</title><rect x="1.7813%" y="261" width="0.0342%" height="15" fill="rgb(205,117,38)" fg:x="15934" fg:w="306"/><text x="2.0313%" y="271.50"></text></g><g><title>`0x7FFDA1AF776F (758 samples, 0.08%)</title><rect x="1.7316%" y="341" width="0.0847%" height="15" fill="rgb(237,72,25)" fg:x="15489" fg:w="758"/><text x="1.9816%" y="351.50"></text></g><g><title>`0x7FFDA1A70F76 (335 samples, 0.04%)</title><rect x="1.7789%" y="325" width="0.0375%" height="15" fill="rgb(244,70,9)" fg:x="15912" fg:w="335"/><text x="2.0289%" y="335.50"></text></g><g><title>`0x7FFDA1A747B1 (1,885 samples, 0.21%)</title><rect x="1.6075%" y="357" width="0.2107%" height="15" fill="rgb(217,125,39)" fg:x="14379" fg:w="1885"/><text x="1.8575%" y="367.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded(std::collections::hash::map::HashMap (15,686 samples, 1.75%)</title><rect x="0.0671%" y="373" width="1.7536%" height="15" fill="rgb(235,36,10)" fg:x="600" fg:w="15686"/><text x="0.3171%" y="383.50"></text></g><g><title>1brc.exe`invoke_main() (15,696 samples, 1.75%)</title><rect x="0.0669%" y="549" width="1.7547%" height="15" fill="rgb(251,123,47)" fg:x="598" fg:w="15696"/><text x="0.3169%" y="559.50"></text></g><g><title>1brc.exe`main (15,696 samples, 1.75%)</title><rect x="0.0669%" y="533" width="1.7547%" height="15" fill="rgb(221,13,13)" fg:x="598" fg:w="15696"/><text x="0.3169%" y="543.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal (15,696 samples, 1.75%)</title><rect x="0.0669%" y="517" width="1.7547%" height="15" fill="rgb(238,131,9)" fg:x="598" fg:w="15696"/><text x="0.3169%" y="527.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (15,696 samples, 1.75%)</title><rect x="0.0669%" y="501" width="1.7547%" height="15" fill="rgb(211,50,8)" fg:x="598" fg:w="15696"/><text x="0.3169%" y="511.50"></text></g><g><title>1brc.exe`std::panicking::try (15,696 samples, 1.75%)</title><rect x="0.0669%" y="485" width="1.7547%" height="15" fill="rgb(245,182,24)" fg:x="598" fg:w="15696"/><text x="0.3169%" y="495.50"></text></g><g><title>1brc.exe`std::panicking::try::do_call (15,696 samples, 1.75%)</title><rect x="0.0669%" y="469" width="1.7547%" height="15" fill="rgb(242,14,37)" fg:x="598" fg:w="15696"/><text x="0.3169%" y="479.50"></text></g><g><title>1brc.exe`std::rt::lang_start_internal::closure$2 (15,695 samples, 1.75%)</title><rect x="0.0670%" y="453" width="1.7546%" height="15" fill="rgb(246,228,12)" fg:x="599" fg:w="15695"/><text x="0.3170%" y="463.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind (15,695 samples, 1.75%)</title><rect x="0.0670%" y="437" width="1.7546%" height="15" fill="rgb(213,55,15)" fg:x="599" fg:w="15695"/><text x="0.3170%" y="447.50"></text></g><g><title>1brc.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (15,695 samples, 1.75%)</title><rect x="0.0670%" y="421" width="1.7546%" height="15" fill="rgb(209,9,3)" fg:x="599" fg:w="15695"/><text x="0.3170%" y="431.50"></text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (15,695 samples, 1.75%)</title><rect x="0.0670%" y="405" width="1.7546%" height="15" fill="rgb(230,59,30)" fg:x="599" fg:w="15695"/><text x="0.3170%" y="415.50"></text></g><g><title>1brc.exe`1brc::main (15,695 samples, 1.75%)</title><rect x="0.0670%" y="389" width="1.7546%" height="15" fill="rgb(209,121,21)" fg:x="599" fg:w="15695"/><text x="0.3170%" y="399.50"></text></g><g><title>1brc.exe`__scrt_common_main_seh() (15,705 samples, 1.76%)</title><rect x="0.0669%" y="565" width="1.7557%" height="15" fill="rgb(220,109,13)" fg:x="598" fg:w="15705"/><text x="0.3169%" y="575.50"></text></g><g><title>1brc.exe`1brc::impl$0::default (113 samples, 0.01%)</title><rect x="6.0396%" y="357" width="0.0126%" height="15" fill="rgb(232,18,1)" fg:x="54024" fg:w="113"/><text x="6.2896%" y="367.50"></text></g><g><title>1brc.exe`std::alloc::__default_lib_allocator::__rdl_alloc (127 samples, 0.01%)</title><rect x="6.0593%" y="245" width="0.0142%" height="15" fill="rgb(215,41,42)" fg:x="54200" fg:w="127"/><text x="6.3093%" y="255.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::alloc::impl$0::alloc (95 samples, 0.01%)</title><rect x="6.0629%" y="229" width="0.0106%" height="15" fill="rgb(224,123,36)" fg:x="54232" fg:w="95"/><text x="6.3129%" y="239.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::alloc::allocate (95 samples, 0.01%)</title><rect x="6.0629%" y="213" width="0.0106%" height="15" fill="rgb(240,125,3)" fg:x="54232" fg:w="95"/><text x="6.3129%" y="223.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::alloc::process_heap_alloc (95 samples, 0.01%)</title><rect x="6.0735%" y="245" width="0.0106%" height="15" fill="rgb(205,98,50)" fg:x="54327" fg:w="95"/><text x="6.3235%" y="255.50"></text></g><g><title>`0x7FFDA1A7B304 (114 samples, 0.01%)</title><rect x="6.1476%" y="245" width="0.0127%" height="15" fill="rgb(205,185,37)" fg:x="54990" fg:w="114"/><text x="6.3976%" y="255.50"></text></g><g><title>`0x7FFDA1A7B748 (121 samples, 0.01%)</title><rect x="6.2404%" y="229" width="0.0135%" height="15" fill="rgb(238,207,15)" fg:x="55820" fg:w="121"/><text x="6.4904%" y="239.50"></text></g><g><title>`0x7FFDA1A7B7A2 (104 samples, 0.01%)</title><rect x="6.2610%" y="229" width="0.0116%" height="15" fill="rgb(213,199,42)" fg:x="56004" fg:w="104"/><text x="6.5110%" y="239.50"></text></g><g><title>`0x7FFDA1A7B86B (404 samples, 0.05%)</title><rect x="6.3054%" y="229" width="0.0452%" height="15" fill="rgb(235,201,11)" fg:x="56401" fg:w="404"/><text x="6.5554%" y="239.50"></text></g><g><title>`0x7FFDA1A7B8A4 (874 samples, 0.10%)</title><rect x="6.3699%" y="229" width="0.0977%" height="15" fill="rgb(207,46,11)" fg:x="56978" fg:w="874"/><text x="6.6199%" y="239.50"></text></g><g><title>`0x7FFDA1A7BEDA (431 samples, 0.05%)</title><rect x="6.4886%" y="229" width="0.0482%" height="15" fill="rgb(241,35,35)" fg:x="58040" fg:w="431"/><text x="6.7386%" y="239.50"></text></g><g><title>`0x7FFDA1A70B31 (426 samples, 0.05%)</title><rect x="6.4892%" y="213" width="0.0476%" height="15" fill="rgb(243,32,47)" fg:x="58045" fg:w="426"/><text x="6.7392%" y="223.50"></text></g><g><title>`0x7FFDA1A6F525 (288 samples, 0.03%)</title><rect x="6.5046%" y="197" width="0.0322%" height="15" fill="rgb(247,202,23)" fg:x="58183" fg:w="288"/><text x="6.7546%" y="207.50"></text></g><g><title>`0x7FFDA1AEDF64 (287 samples, 0.03%)</title><rect x="6.5047%" y="181" width="0.0321%" height="15" fill="rgb(219,102,11)" fg:x="58184" fg:w="287"/><text x="6.7547%" y="191.50"></text></g><g><title>`0x7FFDA1A5A16F (191 samples, 0.02%)</title><rect x="6.5423%" y="213" width="0.0214%" height="15" fill="rgb(243,110,44)" fg:x="58520" fg:w="191"/><text x="6.7923%" y="223.50"></text></g><g><title>`0x7FFDA1A7BF5E (443 samples, 0.05%)</title><rect x="6.5369%" y="229" width="0.0495%" height="15" fill="rgb(222,74,54)" fg:x="58472" fg:w="443"/><text x="6.7869%" y="239.50"></text></g><g><title>`0x7FFDA1A7B3C7 (3,611 samples, 0.40%)</title><rect x="6.1840%" y="245" width="0.4037%" height="15" fill="rgb(216,99,12)" fg:x="55315" fg:w="3611"/><text x="6.4340%" y="255.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (4,933 samples, 0.55%)</title><rect x="6.0523%" y="293" width="0.5515%" height="15" fill="rgb(226,22,26)" fg:x="54137" fg:w="4933"/><text x="6.3023%" y="303.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (4,933 samples, 0.55%)</title><rect x="6.0523%" y="277" width="0.5515%" height="15" fill="rgb(217,163,10)" fg:x="54137" fg:w="4933"/><text x="6.3023%" y="287.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (4,933 samples, 0.55%)</title><rect x="6.0523%" y="261" width="0.5515%" height="15" fill="rgb(213,25,53)" fg:x="54137" fg:w="4933"/><text x="6.3023%" y="271.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (4,963 samples, 0.55%)</title><rect x="6.0523%" y="357" width="0.5548%" height="15" fill="rgb(252,105,26)" fg:x="54137" fg:w="4963"/><text x="6.3023%" y="367.50"></text></g><g><title>1brc.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (4,963 samples, 0.55%)</title><rect x="6.0523%" y="341" width="0.5548%" height="15" fill="rgb(220,39,43)" fg:x="54137" fg:w="4963"/><text x="6.3023%" y="351.50"></text></g><g><title>1brc.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (4,963 samples, 0.55%)</title><rect x="6.0523%" y="325" width="0.5548%" height="15" fill="rgb(229,68,48)" fg:x="54137" fg:w="4963"/><text x="6.3023%" y="335.50"></text></g><g><title>1brc.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (4,963 samples, 0.55%)</title><rect x="6.0523%" y="309" width="0.5548%" height="15" fill="rgb(252,8,32)" fg:x="54137" fg:w="4963"/><text x="6.3023%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::write(tuple$&lt;alloc::string::String,1brc::StationStats&gt;*, tuple$ (291 samples, 0.03%)</title><rect x="6.6172%" y="341" width="0.0325%" height="15" fill="rgb(223,20,43)" fg:x="59190" fg:w="291"/><text x="6.8672%" y="351.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::push(tuple$ (901 samples, 0.10%)</title><rect x="6.6071%" y="357" width="0.1007%" height="15" fill="rgb(229,81,49)" fg:x="59100" fg:w="901"/><text x="6.8571%" y="367.50"></text></g><g><title>`0x7FFDA1A7FBC3 (131 samples, 0.01%)</title><rect x="6.7126%" y="245" width="0.0146%" height="15" fill="rgb(236,28,36)" fg:x="60044" fg:w="131"/><text x="6.9626%" y="255.50"></text></g><g><title>`0x7FFDA1A7FBCA (118 samples, 0.01%)</title><rect x="6.7286%" y="245" width="0.0132%" height="15" fill="rgb(249,185,26)" fg:x="60187" fg:w="118"/><text x="6.9786%" y="255.50"></text></g><g><title>`0x7FFDA1A7FBD2 (549 samples, 0.06%)</title><rect x="6.7422%" y="245" width="0.0614%" height="15" fill="rgb(249,174,33)" fg:x="60308" fg:w="549"/><text x="6.9922%" y="255.50"></text></g><g><title>`0x7FFDA1A7FBD4 (224 samples, 0.03%)</title><rect x="6.8035%" y="245" width="0.0250%" height="15" fill="rgb(233,201,37)" fg:x="60857" fg:w="224"/><text x="7.0535%" y="255.50"></text></g><g><title>`0x7FFDA1AB4A4D (113 samples, 0.01%)</title><rect x="6.8307%" y="229" width="0.0126%" height="15" fill="rgb(221,78,26)" fg:x="61100" fg:w="113"/><text x="7.0807%" y="239.50"></text></g><g><title>`0x7FFDA1A7FCB4 (124 samples, 0.01%)</title><rect x="6.8302%" y="245" width="0.0139%" height="15" fill="rgb(250,127,30)" fg:x="61096" fg:w="124"/><text x="7.0802%" y="255.50"></text></g><g><title>`0x7FFDA1A7D357 (1,193 samples, 0.13%)</title><rect x="6.7108%" y="277" width="0.1334%" height="15" fill="rgb(230,49,44)" fg:x="60028" fg:w="1193"/><text x="6.9608%" y="287.50"></text></g><g><title>`0x7FFDA1A7FAE2 (1,190 samples, 0.13%)</title><rect x="6.7112%" y="261" width="0.1330%" height="15" fill="rgb(229,67,23)" fg:x="60031" fg:w="1190"/><text x="6.9612%" y="271.50"></text></g><g><title>`0x7FFDA1A7D7C1 (93 samples, 0.01%)</title><rect x="6.8476%" y="277" width="0.0104%" height="15" fill="rgb(249,83,47)" fg:x="61251" fg:w="93"/><text x="7.0976%" y="287.50"></text></g><g><title>`0x7FFDA1A5ED8A (248 samples, 0.03%)</title><rect x="6.8610%" y="261" width="0.0277%" height="15" fill="rgb(215,43,3)" fg:x="61371" fg:w="248"/><text x="7.1110%" y="271.50"></text></g><g><title>`0x7FFDA1AED864 (246 samples, 0.03%)</title><rect x="6.8612%" y="245" width="0.0275%" height="15" fill="rgb(238,154,13)" fg:x="61373" fg:w="246"/><text x="7.1112%" y="255.50"></text></g><g><title>`0x7FFDA1A7DB07 (255 samples, 0.03%)</title><rect x="6.8607%" y="277" width="0.0285%" height="15" fill="rgb(219,56,2)" fg:x="61368" fg:w="255"/><text x="7.1107%" y="287.50"></text></g><g><title>`0x7FFDA1A5E715 (129 samples, 0.01%)</title><rect x="6.8898%" y="245" width="0.0144%" height="15" fill="rgb(233,0,4)" fg:x="61629" fg:w="129"/><text x="7.1398%" y="255.50"></text></g><g><title>`0x7FFDA1AED864 (129 samples, 0.01%)</title><rect x="6.8898%" y="229" width="0.0144%" height="15" fill="rgb(235,30,7)" fg:x="61629" fg:w="129"/><text x="7.1398%" y="239.50"></text></g><g><title>`0x7FFDA1A5E37B (192 samples, 0.02%)</title><rect x="6.8892%" y="261" width="0.0215%" height="15" fill="rgb(250,79,13)" fg:x="61623" fg:w="192"/><text x="7.1392%" y="271.50"></text></g><g><title>`0x7FFDA1A7DBFA (212 samples, 0.02%)</title><rect x="6.8892%" y="277" width="0.0237%" height="15" fill="rgb(211,146,34)" fg:x="61623" fg:w="212"/><text x="7.1392%" y="287.50"></text></g><g><title>`0x7FFDA1A7DF4C (108 samples, 0.01%)</title><rect x="6.9135%" y="277" width="0.0121%" height="15" fill="rgb(228,22,38)" fg:x="61841" fg:w="108"/><text x="7.1635%" y="287.50"></text></g><g><title>`0x7FFDA1A7F2C7 (107 samples, 0.01%)</title><rect x="6.9136%" y="261" width="0.0120%" height="15" fill="rgb(235,168,5)" fg:x="61842" fg:w="107"/><text x="7.1636%" y="271.50"></text></g><g><title>`0x7FFDA1A7B44D (2,024 samples, 0.23%)</title><rect x="6.7098%" y="293" width="0.2263%" height="15" fill="rgb(221,155,16)" fg:x="60019" fg:w="2024"/><text x="6.9598%" y="303.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity (2,051 samples, 0.23%)</title><rect x="6.7078%" y="357" width="0.2293%" height="15" fill="rgb(215,215,53)" fg:x="60001" fg:w="2051"/><text x="6.9578%" y="367.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (2,051 samples, 0.23%)</title><rect x="6.7078%" y="341" width="0.2293%" height="15" fill="rgb(223,4,10)" fg:x="60001" fg:w="2051"/><text x="6.9578%" y="351.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (2,051 samples, 0.23%)</title><rect x="6.7078%" y="325" width="0.2293%" height="15" fill="rgb(234,103,6)" fg:x="60001" fg:w="2051"/><text x="6.9578%" y="335.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (2,051 samples, 0.23%)</title><rect x="6.7078%" y="309" width="0.2293%" height="15" fill="rgb(227,97,0)" fg:x="60001" fg:w="2051"/><text x="6.9578%" y="319.50"></text></g><g><title>1brc.exe`core::num::impl$2::checked_add (1,625 samples, 0.18%)</title><rect x="6.9371%" y="357" width="0.1817%" height="15" fill="rgb(234,150,53)" fg:x="62052" fg:w="1625"/><text x="7.1871%" y="367.50"></text></g><g><title>1brc.exe`core::num::impl$2::overflowing_add (692 samples, 0.08%)</title><rect x="7.0414%" y="341" width="0.0774%" height="15" fill="rgb(228,201,54)" fg:x="62985" fg:w="692"/><text x="7.2914%" y="351.50"></text></g><g><title>`0x7FFDA1A59B1A (3,656 samples, 0.41%)</title><rect x="7.1422%" y="245" width="0.4087%" height="15" fill="rgb(222,22,37)" fg:x="63886" fg:w="3656"/><text x="7.3922%" y="255.50"></text></g><g><title>`0x7FFDA1AED924 (3,653 samples, 0.41%)</title><rect x="7.1425%" y="229" width="0.4084%" height="15" fill="rgb(237,53,32)" fg:x="63889" fg:w="3653"/><text x="7.3925%" y="239.50"></text></g><g><title>`0x7FFDA1A7095C (3,657 samples, 0.41%)</title><rect x="7.1422%" y="261" width="0.4088%" height="15" fill="rgb(233,25,53)" fg:x="63886" fg:w="3657"/><text x="7.3922%" y="271.50"></text></g><g><title>`0x7FFDA1A6F35E (3,670 samples, 0.41%)</title><rect x="7.1420%" y="277" width="0.4103%" height="15" fill="rgb(210,40,34)" fg:x="63885" fg:w="3670"/><text x="7.3920%" y="287.50"></text></g><g><title>`0x7FFDA1A6E412 (3,701 samples, 0.41%)</title><rect x="7.1387%" y="293" width="0.4138%" height="15" fill="rgb(241,220,44)" fg:x="63855" fg:w="3701"/><text x="7.3887%" y="303.50"></text></g><g><title>`0x7FFDA1A6E574 (486 samples, 0.05%)</title><rect x="7.5559%" y="293" width="0.0543%" height="15" fill="rgb(235,28,35)" fg:x="67587" fg:w="486"/><text x="7.8059%" y="303.50"></text></g><g><title>`0x7FFDA1A59B1A (485 samples, 0.05%)</title><rect x="7.5560%" y="277" width="0.0542%" height="15" fill="rgb(210,56,17)" fg:x="67588" fg:w="485"/><text x="7.8060%" y="287.50"></text></g><g><title>`0x7FFDA1AED924 (485 samples, 0.05%)</title><rect x="7.5560%" y="261" width="0.0542%" height="15" fill="rgb(224,130,29)" fg:x="67588" fg:w="485"/><text x="7.8060%" y="271.50"></text></g><g><title>`0x7FFDA1A765F6 (4,369 samples, 0.49%)</title><rect x="7.1310%" y="309" width="0.4884%" height="15" fill="rgb(235,212,8)" fg:x="63786" fg:w="4369"/><text x="7.3810%" y="319.50"></text></g><g><title>`0x7FFDA1A75B74 (4,502 samples, 0.50%)</title><rect x="7.1206%" y="325" width="0.5033%" height="15" fill="rgb(223,33,50)" fg:x="63693" fg:w="4502"/><text x="7.3706%" y="335.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(std::io::buffered::bufreader::BufReader (4,613 samples, 0.52%)</title><rect x="7.1192%" y="357" width="0.5157%" height="15" fill="rgb(219,149,13)" fg:x="63681" fg:w="4613"/><text x="7.3692%" y="367.50"></text></g><g><title>`0x7FFDA1A747B1 (4,604 samples, 0.51%)</title><rect x="7.1202%" y="341" width="0.5147%" height="15" fill="rgb(250,156,29)" fg:x="63690" fg:w="4604"/><text x="7.3702%" y="351.50"></text></g><g><title>`0x7FFD9F541075 (5,963 samples, 0.67%)</title><rect x="7.6477%" y="229" width="0.6666%" height="15" fill="rgb(216,193,19)" fg:x="68408" fg:w="5963"/><text x="7.8977%" y="239.50"></text></g><g><title>`0x7FFDA1AED744 (5,925 samples, 0.66%)</title><rect x="7.6519%" y="213" width="0.6624%" height="15" fill="rgb(216,135,14)" fg:x="68446" fg:w="5925"/><text x="7.9019%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (6,089 samples, 0.68%)</title><rect x="7.6349%" y="357" width="0.6807%" height="15" fill="rgb(241,47,5)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="367.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (6,089 samples, 0.68%)</title><rect x="7.6349%" y="341" width="0.6807%" height="15" fill="rgb(233,42,35)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="351.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (6,089 samples, 0.68%)</title><rect x="7.6349%" y="325" width="0.6807%" height="15" fill="rgb(231,13,6)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="335.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (6,089 samples, 0.68%)</title><rect x="7.6349%" y="309" width="0.6807%" height="15" fill="rgb(207,181,40)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place (6,089 samples, 0.68%)</title><rect x="7.6349%" y="293" width="0.6807%" height="15" fill="rgb(254,173,49)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="303.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::vec::Vec (6,089 samples, 0.68%)</title><rect x="7.6349%" y="277" width="0.6807%" height="15" fill="rgb(221,1,38)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="287.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (6,089 samples, 0.68%)</title><rect x="7.6349%" y="261" width="0.6807%" height="15" fill="rgb(206,124,46)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="271.50"></text></g><g><title>1brc.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (6,089 samples, 0.68%)</title><rect x="7.6349%" y="245" width="0.6807%" height="15" fill="rgb(249,21,11)" fg:x="68294" fg:w="6089"/><text x="7.8849%" y="255.50"></text></g><g><title>1brc.exe`core::slice::impl$0::iter(ref$&lt;slice2$ (10,422 samples, 1.17%)</title><rect x="8.3157%" y="341" width="1.1651%" height="15" fill="rgb(222,201,40)" fg:x="74383" fg:w="10422"/><text x="8.5657%" y="351.50"></text></g><g><title>1brc.exe`core::slice::iter::Iter&lt;u8&gt;::new(ref$&lt;slice2$ (10,422 samples, 1.17%)</title><rect x="8.3157%" y="325" width="1.1651%" height="15" fill="rgb(235,61,29)" fg:x="74383" fg:w="10422"/><text x="8.5657%" y="335.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::add (10,422 samples, 1.17%)</title><rect x="8.3157%" y="309" width="1.1651%" height="15" fill="rgb(219,207,3)" fg:x="74383" fg:w="10422"/><text x="8.5657%" y="319.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (11,711 samples, 1.31%)</title><rect x="9.4808%" y="341" width="1.3092%" height="15" fill="rgb(222,56,46)" fg:x="84805" fg:w="11711"/><text x="9.7308%" y="351.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (11,711 samples, 1.31%)</title><rect x="9.4808%" y="325" width="1.3092%" height="15" fill="rgb(239,76,54)" fg:x="84805" fg:w="11711"/><text x="9.7308%" y="335.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$1 (4,155 samples, 0.46%)</title><rect x="15.2169%" y="325" width="0.4645%" height="15" fill="rgb(231,124,27)" fg:x="136114" fg:w="4155"/><text x="15.4669%" y="335.50"></text></g><g><title>1brc.exe`core::slice::impl$0::rsplit_once(ref$&lt;slice2$ (81,119 samples, 9.07%)</title><rect x="8.3157%" y="357" width="9.0687%" height="15" fill="rgb(249,195,6)" fg:x="74383" fg:w="81119"/><text x="8.5657%" y="367.50">1brc.exe`core..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::rposition(core::slice::iter::Iter (58,986 samples, 6.59%)</title><rect x="10.7900%" y="341" width="6.5944%" height="15" fill="rgb(237,174,47)" fg:x="96516" fg:w="58986"/><text x="11.0400%" y="351.50">1brc.exe`..</text></g><g><title>1brc.exe`core::slice::iter::impl$182::next_back(core::slice::iter::Iter (15,233 samples, 1.70%)</title><rect x="15.6814%" y="325" width="1.7030%" height="15" fill="rgb(206,201,31)" fg:x="140269" fg:w="15233"/><text x="15.9314%" y="335.50"></text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (14,040 samples, 1.57%)</title><rect x="15.8148%" y="309" width="1.5696%" height="15" fill="rgb(231,57,52)" fg:x="141462" fg:w="14040"/><text x="16.0648%" y="319.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::filter_fold::closure$0(core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multitreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;u8&gt;,1brc::input_multitreaded::closure$0::closure_env$3&gt; &gt;*, tuple$ (47,003 samples, 5.25%)</title><rect x="19.6261%" y="309" width="5.2547%" height="15" fill="rgb(248,177,22)" fg:x="175554" fg:w="47003"/><text x="19.8761%" y="319.50">1brc.e..</text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$2 (4,182 samples, 0.47%)</title><rect x="24.4133%" y="293" width="0.4675%" height="15" fill="rgb(215,211,37)" fg:x="218375" fg:w="4182"/><text x="24.6633%" y="303.50"></text></g><g><title>1brc.exe`core::num::impl$11::unchecked_add (3,149 samples, 0.35%)</title><rect x="24.8808%" y="309" width="0.3520%" height="15" fill="rgb(241,128,51)" fg:x="222557" fg:w="3149"/><text x="25.1308%" y="319.50"></text></g><g><title>1brc.exe`core::iter::adapters::filter::impl$2::fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u8&gt;,1brc::input_multitreaded::closure$0::closure_env$2&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (70,785 samples, 7.91%)</title><rect x="17.3844%" y="341" width="7.9134%" height="15" fill="rgb(227,165,31)" fg:x="155502" fg:w="70785"/><text x="17.6344%" y="351.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::filter::filter_fold::closure_env$0&lt;ref$&lt;u8&gt;,tuple$&lt;&gt;,1brc::input_multitreaded::closure$0::closure_env$2,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$ (70,785 samples, 7.91%)</title><rect x="17.3844%" y="325" width="7.9134%" height="15" fill="rgb(228,167,24)" fg:x="155502" fg:w="70785"/><text x="17.6344%" y="335.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (581 samples, 0.06%)</title><rect x="25.2329%" y="309" width="0.0650%" height="15" fill="rgb(228,143,12)" fg:x="225706" fg:w="581"/><text x="25.4829%" y="319.50"></text></g><g><title>1brc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (73,458 samples, 8.21%)</title><rect x="17.3844%" y="357" width="8.2123%" height="15" fill="rgb(249,149,8)" fg:x="155502" fg:w="73458"/><text x="17.6344%" y="367.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::slice::index::impl$6::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$&lt;slice2$ (2,673 samples, 0.30%)</title><rect x="25.2978%" y="341" width="0.2988%" height="15" fill="rgb(243,35,44)" fg:x="226287" fg:w="2673"/><text x="25.5478%" y="351.50"></text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (2,673 samples, 0.30%)</title><rect x="25.2978%" y="325" width="0.2988%" height="15" fill="rgb(246,89,9)" fg:x="226287" fg:w="2673"/><text x="25.5478%" y="335.50"></text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (2,673 samples, 0.30%)</title><rect x="25.2978%" y="309" width="0.2988%" height="15" fill="rgb(233,213,13)" fg:x="226287" fg:w="2673"/><text x="25.5478%" y="319.50"></text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (2,673 samples, 0.30%)</title><rect x="25.2978%" y="293" width="0.2988%" height="15" fill="rgb(233,141,41)" fg:x="226287" fg:w="2673"/><text x="25.5478%" y="303.50"></text></g><g><title>1brc.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeFrom (35,000 samples, 3.91%)</title><rect x="26.4485%" y="341" width="3.9128%" height="15" fill="rgb(239,167,4)" fg:x="236580" fg:w="35000"/><text x="26.6985%" y="351.50">1brc..</text></g><g><title>1brc.exe`core::slice::index::impl$6::get_unchecked(core::ops::range::RangeFrom&lt;usize&gt;, ptr_const$&lt;slice2$ (35,000 samples, 3.91%)</title><rect x="26.4485%" y="325" width="3.9128%" height="15" fill="rgb(209,217,16)" fg:x="236580" fg:w="35000"/><text x="26.6985%" y="335.50">1brc..</text></g><g><title>1brc.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (35,000 samples, 3.91%)</title><rect x="26.4485%" y="309" width="3.9128%" height="15" fill="rgb(219,88,35)" fg:x="236580" fg:w="35000"/><text x="26.6985%" y="319.50">1brc..</text></g><g><title>1brc.exe`core::ptr::const_ptr::impl$0::add (35,000 samples, 3.91%)</title><rect x="26.4485%" y="293" width="3.9128%" height="15" fill="rgb(220,193,23)" fg:x="236580" fg:w="35000"/><text x="26.6985%" y="303.50">1brc..</text></g><g><title>1brc.exe`core::slice::iter::impl$16::next::closure$0(core::slice::iter::impl$16::next::closure_env$0 (894 samples, 0.10%)</title><rect x="37.5314%" y="325" width="0.0999%" height="15" fill="rgb(230,90,52)" fg:x="335715" fg:w="894"/><text x="37.7814%" y="335.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0::closure$0 (894 samples, 0.10%)</title><rect x="37.5314%" y="309" width="0.0999%" height="15" fill="rgb(252,106,19)" fg:x="335715" fg:w="894"/><text x="37.7814%" y="319.50"></text></g><g><title>1brc.exe`core::slice::iter::impl$16::next(core::slice::iter::Split (128,503 samples, 14.37%)</title><rect x="25.5967%" y="357" width="14.3660%" height="15" fill="rgb(206,74,20)" fg:x="228960" fg:w="128503"/><text x="25.8467%" y="367.50">1brc.exe`core::slice::..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::position(core::slice::iter::Iter&lt;u8&gt;*, core::slice::iter::impl$16::next::closure_env$0 (85,883 samples, 9.60%)</title><rect x="30.3614%" y="341" width="9.6013%" height="15" fill="rgb(230,138,44)" fg:x="271580" fg:w="85883"/><text x="30.6114%" y="351.50">1brc.exe`core:..</text></g><g><title>1brc.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (20,854 samples, 2.33%)</title><rect x="37.6313%" y="325" width="2.3314%" height="15" fill="rgb(235,182,43)" fg:x="336609" fg:w="20854"/><text x="37.8813%" y="335.50">1..</text></g><g><title>1brc.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;u8&gt;*, core::ptr::non_null::NonNull (11,073 samples, 1.24%)</title><rect x="38.7248%" y="309" width="1.2379%" height="15" fill="rgb(242,16,51)" fg:x="346390" fg:w="11073"/><text x="38.9748%" y="319.50"></text></g><g><title>1brc.exe`enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;::expect(enum2$&lt;core::option::Option&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt; &gt;, ref$ (765 samples, 0.09%)</title><rect x="39.9627%" y="357" width="0.0855%" height="15" fill="rgb(248,9,4)" fg:x="357463" fg:w="765"/><text x="40.2127%" y="367.50"></text></g><g><title>1brc.exe`core::num::impl$11::to_ne_bytes (3,500 samples, 0.39%)</title><rect x="43.6658%" y="229" width="0.3913%" height="15" fill="rgb(210,31,22)" fg:x="390587" fg:w="3500"/><text x="43.9158%" y="239.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_length_prefix (5,017 samples, 0.56%)</title><rect x="43.6658%" y="261" width="0.5609%" height="15" fill="rgb(239,54,39)" fg:x="390587" fg:w="5017"/><text x="43.9158%" y="271.50"></text></g><g><title>1brc.exe`core::hash::Hasher::write_usize (5,017 samples, 0.56%)</title><rect x="43.6658%" y="245" width="0.5609%" height="15" fill="rgb(230,99,41)" fg:x="390587" fg:w="5017"/><text x="43.9158%" y="255.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1,517 samples, 0.17%)</title><rect x="44.0571%" y="229" width="0.1696%" height="15" fill="rgb(253,106,12)" fg:x="394087" fg:w="1517"/><text x="44.3071%" y="239.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1,517 samples, 0.17%)</title><rect x="44.0571%" y="213" width="0.1696%" height="15" fill="rgb(213,46,41)" fg:x="394087" fg:w="1517"/><text x="44.3071%" y="223.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (6,664 samples, 0.75%)</title><rect x="49.4512%" y="181" width="0.7450%" height="15" fill="rgb(215,133,35)" fg:x="442337" fg:w="6664"/><text x="49.7012%" y="191.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (19,358 samples, 2.16%)</title><rect x="48.4724%" y="197" width="2.1641%" height="15" fill="rgb(213,28,5)" fg:x="433582" fg:w="19358"/><text x="48.7224%" y="207.50">1..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (3,939 samples, 0.44%)</title><rect x="50.1962%" y="181" width="0.4404%" height="15" fill="rgb(215,77,49)" fg:x="449001" fg:w="3939"/><text x="50.4462%" y="191.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (8,312 samples, 0.93%)</title><rect x="50.6366%" y="197" width="0.9292%" height="15" fill="rgb(248,100,22)" fg:x="452940" fg:w="8312"/><text x="50.8866%" y="207.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (71,260 samples, 7.97%)</title><rect x="43.6658%" y="293" width="7.9665%" height="15" fill="rgb(208,67,9)" fg:x="390587" fg:w="71260"/><text x="43.9158%" y="303.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (71,260 samples, 7.97%)</title><rect x="43.6658%" y="277" width="7.9665%" height="15" fill="rgb(219,133,21)" fg:x="390587" fg:w="71260"/><text x="43.9158%" y="287.50">1brc.exe`co..</text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (66,243 samples, 7.41%)</title><rect x="44.2267%" y="261" width="7.4057%" height="15" fill="rgb(246,46,29)" fg:x="395604" fg:w="66243"/><text x="44.4767%" y="271.50">1brc.exe`c..</text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (66,243 samples, 7.41%)</title><rect x="44.2267%" y="245" width="7.4057%" height="15" fill="rgb(246,185,52)" fg:x="395604" fg:w="66243"/><text x="44.4767%" y="255.50">1brc.exe`s..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (66,243 samples, 7.41%)</title><rect x="44.2267%" y="229" width="7.4057%" height="15" fill="rgb(252,136,11)" fg:x="395604" fg:w="66243"/><text x="44.4767%" y="239.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (63,730 samples, 7.12%)</title><rect x="44.5076%" y="213" width="7.1247%" height="15" fill="rgb(219,138,53)" fg:x="398117" fg:w="63730"/><text x="44.7576%" y="223.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (595 samples, 0.07%)</title><rect x="51.5658%" y="197" width="0.0665%" height="15" fill="rgb(211,51,23)" fg:x="461252" fg:w="595"/><text x="51.8158%" y="207.50"></text></g><g><title>1brc.exe`std::hash::random::impl$1::build_hasher (17,065 samples, 1.91%)</title><rect x="51.6323%" y="293" width="1.9078%" height="15" fill="rgb(247,221,28)" fg:x="461847" fg:w="17065"/><text x="51.8823%" y="303.50">1..</text></g><g><title>1brc.exe`core::hash::sip::SipHasher13::new_with_keys (8,203 samples, 0.92%)</title><rect x="52.6231%" y="277" width="0.9171%" height="15" fill="rgb(251,222,45)" fg:x="470709" fg:w="8203"/><text x="52.8731%" y="287.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (8,203 samples, 0.92%)</title><rect x="52.6231%" y="261" width="0.9171%" height="15" fill="rgb(217,162,53)" fg:x="470709" fg:w="8203"/><text x="52.8731%" y="271.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (8,203 samples, 0.92%)</title><rect x="52.6231%" y="245" width="0.9171%" height="15" fill="rgb(229,93,14)" fg:x="470709" fg:w="8203"/><text x="52.8731%" y="255.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (4,862 samples, 0.54%)</title><rect x="60.4705%" y="213" width="0.5435%" height="15" fill="rgb(209,67,49)" fg:x="540904" fg:w="4862"/><text x="60.7205%" y="223.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (12,876 samples, 1.44%)</title><rect x="59.8318%" y="229" width="1.4395%" height="15" fill="rgb(213,87,29)" fg:x="535191" fg:w="12876"/><text x="60.0818%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (2,301 samples, 0.26%)</title><rect x="61.0141%" y="213" width="0.2572%" height="15" fill="rgb(205,151,52)" fg:x="545766" fg:w="2301"/><text x="61.2641%" y="223.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (2,961 samples, 0.33%)</title><rect x="63.4830%" y="213" width="0.3310%" height="15" fill="rgb(253,215,39)" fg:x="567850" fg:w="2961"/><text x="63.7330%" y="223.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (22,780 samples, 2.55%)</title><rect x="61.2713%" y="229" width="2.5467%" height="15" fill="rgb(221,220,41)" fg:x="548067" fg:w="22780"/><text x="61.5213%" y="239.50">1b..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (67,700 samples, 7.57%)</title><rect x="56.2848%" y="245" width="7.5685%" height="15" fill="rgb(218,133,21)" fg:x="503463" fg:w="67700"/><text x="56.5348%" y="255.50">1brc.exe`c..</text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (316 samples, 0.04%)</title><rect x="63.8180%" y="229" width="0.0353%" height="15" fill="rgb(221,193,43)" fg:x="570847" fg:w="316"/><text x="64.0680%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (5,862 samples, 0.66%)</title><rect x="64.4222%" y="229" width="0.6553%" height="15" fill="rgb(240,128,52)" fg:x="576251" fg:w="5862"/><text x="64.6722%" y="239.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (16,722 samples, 1.87%)</title><rect x="63.8533%" y="245" width="1.8694%" height="15" fill="rgb(253,114,12)" fg:x="571163" fg:w="16722"/><text x="64.1033%" y="255.50">1..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (5,772 samples, 0.65%)</title><rect x="65.0775%" y="229" width="0.6453%" height="15" fill="rgb(215,223,47)" fg:x="582113" fg:w="5772"/><text x="65.3275%" y="239.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (28,074 samples, 3.14%)</title><rect x="66.9333%" y="229" width="3.1385%" height="15" fill="rgb(248,225,23)" fg:x="598713" fg:w="28074"/><text x="67.1833%" y="239.50">1br..</text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;slice2$&lt;u8&gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (268,418 samples, 30.01%)</title><rect x="41.6033%" y="309" width="30.0079%" height="15" fill="rgb(250,108,0)" fg:x="372138" fg:w="268418"/><text x="41.8533%" y="319.50">1brc.exe`core::hash::BuildHasher::hash_one&lt;std::..</text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (161,644 samples, 18.07%)</title><rect x="53.5401%" y="293" width="18.0710%" height="15" fill="rgb(228,208,7)" fg:x="478912" fg:w="161644"/><text x="53.7901%" y="303.50">1brc.exe`std::hash::random::..</text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (161,644 samples, 18.07%)</title><rect x="53.5401%" y="277" width="18.0710%" height="15" fill="rgb(244,45,10)" fg:x="478912" fg:w="161644"/><text x="53.7901%" y="287.50">1brc.exe`core::hash::sip::im..</text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (161,644 samples, 18.07%)</title><rect x="53.5401%" y="261" width="18.0710%" height="15" fill="rgb(207,125,25)" fg:x="478912" fg:w="161644"/><text x="53.7901%" y="271.50">1brc.exe`core::hash::sip::im..</text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (52,671 samples, 5.89%)</title><rect x="65.7228%" y="245" width="5.8884%" height="15" fill="rgb(210,195,18)" fg:x="587885" fg:w="52671"/><text x="65.9728%" y="255.50">1brc.ex..</text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (13,769 samples, 1.54%)</title><rect x="70.0718%" y="229" width="1.5393%" height="15" fill="rgb(249,80,12)" fg:x="626787" fg:w="13769"/><text x="70.3218%" y="239.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (127 samples, 0.01%)</title><rect x="71.6894%" y="149" width="0.0142%" height="15" fill="rgb(221,65,9)" fg:x="641256" fg:w="127"/><text x="71.9394%" y="159.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (482 samples, 0.05%)</title><rect x="71.6562%" y="261" width="0.0539%" height="15" fill="rgb(235,49,36)" fg:x="640959" fg:w="482"/><text x="71.9062%" y="271.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (465 samples, 0.05%)</title><rect x="71.6581%" y="245" width="0.0520%" height="15" fill="rgb(225,32,20)" fg:x="640976" fg:w="465"/><text x="71.9081%" y="255.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (465 samples, 0.05%)</title><rect x="71.6581%" y="229" width="0.0520%" height="15" fill="rgb(215,141,46)" fg:x="640976" fg:w="465"/><text x="71.9081%" y="239.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (443 samples, 0.05%)</title><rect x="71.6606%" y="213" width="0.0495%" height="15" fill="rgb(250,160,47)" fg:x="640998" fg:w="443"/><text x="71.9106%" y="223.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (443 samples, 0.05%)</title><rect x="71.6606%" y="197" width="0.0495%" height="15" fill="rgb(216,222,40)" fg:x="640998" fg:w="443"/><text x="71.9106%" y="207.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (443 samples, 0.05%)</title><rect x="71.6606%" y="181" width="0.0495%" height="15" fill="rgb(234,217,39)" fg:x="640998" fg:w="443"/><text x="71.9106%" y="191.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (436 samples, 0.05%)</title><rect x="71.6613%" y="165" width="0.0487%" height="15" fill="rgb(207,178,40)" fg:x="641005" fg:w="436"/><text x="71.9113%" y="175.50"></text></g><g><title>1brc.exe`std::hash::random::impl$1::build_hasher (187 samples, 0.02%)</title><rect x="71.7101%" y="261" width="0.0209%" height="15" fill="rgb(221,136,13)" fg:x="641441" fg:w="187"/><text x="71.9601%" y="271.50"></text></g><g><title>1brc.exe`core::hash::sip::SipHasher13::new_with_keys (106 samples, 0.01%)</title><rect x="71.7191%" y="245" width="0.0119%" height="15" fill="rgb(249,199,10)" fg:x="641522" fg:w="106"/><text x="71.9691%" y="255.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (106 samples, 0.01%)</title><rect x="71.7191%" y="229" width="0.0119%" height="15" fill="rgb(249,222,13)" fg:x="641522" fg:w="106"/><text x="71.9691%" y="239.50"></text></g><g><title>1brc.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (106 samples, 0.01%)</title><rect x="71.7191%" y="213" width="0.0119%" height="15" fill="rgb(244,185,38)" fg:x="641522" fg:w="106"/><text x="71.9691%" y="223.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (212 samples, 0.02%)</title><rect x="71.7810%" y="197" width="0.0237%" height="15" fill="rgb(236,202,9)" fg:x="642075" fg:w="212"/><text x="72.0310%" y="207.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (503 samples, 0.06%)</title><rect x="71.7487%" y="213" width="0.0562%" height="15" fill="rgb(250,229,37)" fg:x="641786" fg:w="503"/><text x="71.9987%" y="223.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (92 samples, 0.01%)</title><rect x="71.8049%" y="213" width="0.0103%" height="15" fill="rgb(206,174,23)" fg:x="642289" fg:w="92"/><text x="72.0549%" y="223.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (155 samples, 0.02%)</title><rect x="71.8229%" y="197" width="0.0173%" height="15" fill="rgb(211,33,43)" fg:x="642450" fg:w="155"/><text x="72.0729%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$&lt;slice2$ (1,896 samples, 0.21%)</title><rect x="71.6361%" y="293" width="0.2120%" height="15" fill="rgb(245,58,50)" fg:x="640779" fg:w="1896"/><text x="71.8861%" y="303.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (1,887 samples, 0.21%)</title><rect x="71.6371%" y="277" width="0.2110%" height="15" fill="rgb(244,68,36)" fg:x="640788" fg:w="1887"/><text x="71.8871%" y="287.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (1,047 samples, 0.12%)</title><rect x="71.7310%" y="261" width="0.1170%" height="15" fill="rgb(232,229,15)" fg:x="641628" fg:w="1047"/><text x="71.9810%" y="271.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (1,047 samples, 0.12%)</title><rect x="71.7310%" y="245" width="0.1170%" height="15" fill="rgb(254,30,23)" fg:x="641628" fg:w="1047"/><text x="71.9810%" y="255.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1,047 samples, 0.12%)</title><rect x="71.7310%" y="229" width="0.1170%" height="15" fill="rgb(235,160,14)" fg:x="641628" fg:w="1047"/><text x="71.9810%" y="239.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (294 samples, 0.03%)</title><rect x="71.8152%" y="213" width="0.0329%" height="15" fill="rgb(212,155,44)" fg:x="642381" fg:w="294"/><text x="72.0652%" y="223.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (261 samples, 0.03%)</title><rect x="71.8616%" y="213" width="0.0292%" height="15" fill="rgb(226,2,50)" fg:x="642796" fg:w="261"/><text x="72.1116%" y="223.50"></text></g><g><title>`0x7FFDA1A747B1 (118 samples, 0.01%)</title><rect x="71.8960%" y="117" width="0.0132%" height="15" fill="rgb(234,177,6)" fg:x="643104" fg:w="118"/><text x="72.1460%" y="127.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (165 samples, 0.02%)</title><rect x="71.8912%" y="149" width="0.0184%" height="15" fill="rgb(217,24,9)" fg:x="643061" fg:w="165"/><text x="72.1412%" y="159.50"></text></g><g><title>1brc.exe`alloc::alloc::dealloc (164 samples, 0.02%)</title><rect x="71.8913%" y="133" width="0.0183%" height="15" fill="rgb(220,13,46)" fg:x="643062" fg:w="164"/><text x="72.1413%" y="143.50"></text></g><g><title>1brc.exe`core::ptr::drop_in_place(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0 (166 samples, 0.02%)</title><rect x="71.8912%" y="213" width="0.0186%" height="15" fill="rgb(239,221,27)" fg:x="643061" fg:w="166"/><text x="72.1412%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::scopeguard::impl$3::drop(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0 (166 samples, 0.02%)</title><rect x="71.8912%" y="197" width="0.0186%" height="15" fill="rgb(222,198,25)" fg:x="643061" fg:w="166"/><text x="72.1412%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$12::prepare_resize::closure$0(hashbrown::raw::impl$12::prepare_resize::closure_env$0 (166 samples, 0.02%)</title><rect x="71.8912%" y="181" width="0.0186%" height="15" fill="rgb(211,99,13)" fg:x="643061" fg:w="166"/><text x="72.1412%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::free_buckets (166 samples, 0.02%)</title><rect x="71.8912%" y="165" width="0.0186%" height="15" fill="rgb(232,111,31)" fg:x="643061" fg:w="166"/><text x="72.1412%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (112 samples, 0.01%)</title><rect x="71.9222%" y="181" width="0.0125%" height="15" fill="rgb(245,82,37)" fg:x="643338" fg:w="112"/><text x="72.1722%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fix_insert_slot (104 samples, 0.01%)</title><rect x="71.9347%" y="181" width="0.0116%" height="15" fill="rgb(227,149,46)" fg:x="643450" fg:w="104"/><text x="72.1847%" y="191.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (161 samples, 0.02%)</title><rect x="72.0050%" y="37" width="0.0180%" height="15" fill="rgb(218,36,50)" fg:x="644079" fg:w="161"/><text x="72.2550%" y="47.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (803 samples, 0.09%)</title><rect x="72.0230%" y="37" width="0.0898%" height="15" fill="rgb(226,80,48)" fg:x="644240" fg:w="803"/><text x="72.2730%" y="47.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (1,409 samples, 0.16%)</title><rect x="71.9560%" y="149" width="0.1575%" height="15" fill="rgb(238,224,15)" fg:x="643641" fg:w="1409"/><text x="72.2060%" y="159.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$5::hash(ref$&lt;slice2$ (1,384 samples, 0.15%)</title><rect x="71.9588%" y="133" width="0.1547%" height="15" fill="rgb(241,136,10)" fg:x="643666" fg:w="1384"/><text x="72.2088%" y="143.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$4::hash(ref$&lt;slice2$ (1,384 samples, 0.15%)</title><rect x="71.9588%" y="117" width="0.1547%" height="15" fill="rgb(208,32,45)" fg:x="643666" fg:w="1384"/><text x="72.2088%" y="127.50"></text></g><g><title>1brc.exe`core::hash::impls::impl$9::hash_slice(ref$&lt;slice2$ (1,367 samples, 0.15%)</title><rect x="71.9607%" y="101" width="0.1528%" height="15" fill="rgb(207,135,9)" fg:x="643683" fg:w="1367"/><text x="72.2107%" y="111.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1,367 samples, 0.15%)</title><rect x="71.9607%" y="85" width="0.1528%" height="15" fill="rgb(206,86,44)" fg:x="643683" fg:w="1367"/><text x="72.2107%" y="95.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1,367 samples, 0.15%)</title><rect x="71.9607%" y="69" width="0.1528%" height="15" fill="rgb(245,177,15)" fg:x="643683" fg:w="1367"/><text x="72.2107%" y="79.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1,361 samples, 0.15%)</title><rect x="71.9614%" y="53" width="0.1522%" height="15" fill="rgb(206,64,50)" fg:x="643689" fg:w="1361"/><text x="72.2114%" y="63.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (122 samples, 0.01%)</title><rect x="72.1857%" y="85" width="0.0136%" height="15" fill="rgb(234,36,40)" fg:x="645695" fg:w="122"/><text x="72.4357%" y="95.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (109 samples, 0.01%)</title><rect x="72.2335%" y="69" width="0.0122%" height="15" fill="rgb(213,64,8)" fg:x="646123" fg:w="109"/><text x="72.4835%" y="79.50"></text></g><g><title>1brc.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (417 samples, 0.05%)</title><rect x="72.1993%" y="85" width="0.0466%" height="15" fill="rgb(210,75,36)" fg:x="645817" fg:w="417"/><text x="72.4493%" y="95.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (942 samples, 0.11%)</title><rect x="72.1412%" y="101" width="0.1053%" height="15" fill="rgb(229,88,21)" fg:x="645297" fg:w="942"/><text x="72.3912%" y="111.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::c_rounds (107 samples, 0.01%)</title><rect x="72.2465%" y="101" width="0.0120%" height="15" fill="rgb(252,204,47)" fg:x="646239" fg:w="107"/><text x="72.4965%" y="111.50"></text></g><g><title>1brc.exe`core::num::impl$9::rotate_left (166 samples, 0.02%)</title><rect x="72.2658%" y="85" width="0.0186%" height="15" fill="rgb(208,77,27)" fg:x="646412" fg:w="166"/><text x="72.5158%" y="95.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::probe_seq (3,121 samples, 0.35%)</title><rect x="71.9463%" y="181" width="0.3489%" height="15" fill="rgb(221,76,26)" fg:x="643554" fg:w="3121"/><text x="72.1963%" y="191.50"></text></g><g><title>1brc.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;ref$&lt;slice2$&lt;u8&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, ref$&lt;slice2$ (3,111 samples, 0.35%)</title><rect x="71.9474%" y="165" width="0.3478%" height="15" fill="rgb(225,139,18)" fg:x="643564" fg:w="3111"/><text x="72.1974%" y="175.50"></text></g><g><title>1brc.exe`std::hash::random::impl$4::finish (1,553 samples, 0.17%)</title><rect x="72.1216%" y="149" width="0.1736%" height="15" fill="rgb(230,137,11)" fg:x="645122" fg:w="1553"/><text x="72.3716%" y="159.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$4::finish (1,553 samples, 0.17%)</title><rect x="72.1216%" y="133" width="0.1736%" height="15" fill="rgb(212,28,1)" fg:x="645122" fg:w="1553"/><text x="72.3716%" y="143.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1,553 samples, 0.17%)</title><rect x="72.1216%" y="117" width="0.1736%" height="15" fill="rgb(248,164,17)" fg:x="645122" fg:w="1553"/><text x="72.3716%" y="127.50"></text></g><g><title>1brc.exe`core::hash::sip::impl$8::d_rounds (329 samples, 0.04%)</title><rect x="72.2584%" y="101" width="0.0368%" height="15" fill="rgb(222,171,42)" fg:x="646346" fg:w="329"/><text x="72.5084%" y="111.50"></text></g><g><title>1brc.exe`core::num::impl$9::wrapping_add (97 samples, 0.01%)</title><rect x="72.2844%" y="85" width="0.0108%" height="15" fill="rgb(243,84,45)" fg:x="646578" fg:w="97"/><text x="72.5344%" y="95.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_insert_slot (3,413 samples, 0.38%)</title><rect x="71.9144%" y="197" width="0.3816%" height="15" fill="rgb(252,49,23)" fg:x="643269" fg:w="3413"/><text x="72.1644%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (3,438 samples, 0.38%)</title><rect x="71.9144%" y="213" width="0.3844%" height="15" fill="rgb(215,19,7)" fg:x="643269" fg:w="3438"/><text x="72.1644%" y="223.50"></text></g><g><title>`0x7FFDA1A7B73C (106 samples, 0.01%)</title><rect x="72.3105%" y="85" width="0.0119%" height="15" fill="rgb(238,81,41)" fg:x="646812" fg:w="106"/><text x="72.5605%" y="95.50"></text></g><g><title>`0x7FFDA1A7B748 (154 samples, 0.02%)</title><rect x="72.3225%" y="85" width="0.0172%" height="15" fill="rgb(210,199,37)" fg:x="646919" fg:w="154"/><text x="72.5725%" y="95.50"></text></g><g><title>`0x7FFDA1A543E2 (166 samples, 0.02%)</title><rect x="72.3434%" y="69" width="0.0186%" height="15" fill="rgb(244,192,49)" fg:x="647106" fg:w="166"/><text x="72.5934%" y="79.50"></text></g><g><title>`0x7FFDA1A7B86B (183 samples, 0.02%)</title><rect x="72.3434%" y="85" width="0.0205%" height="15" fill="rgb(226,211,11)" fg:x="647106" fg:w="183"/><text x="72.5934%" y="95.50"></text></g><g><title>`0x7FFDA1A7B8A4 (120 samples, 0.01%)</title><rect x="72.3653%" y="85" width="0.0134%" height="15" fill="rgb(236,162,54)" fg:x="647302" fg:w="120"/><text x="72.6153%" y="95.50"></text></g><g><title>`0x7FFDA1A7B3C7 (747 samples, 0.08%)</title><rect x="72.3062%" y="101" width="0.0835%" height="15" fill="rgb(220,229,9)" fg:x="646773" fg:w="747"/><text x="72.5562%" y="111.50"></text></g><g><title>`0x7FFDA1A7FBD2 (316 samples, 0.04%)</title><rect x="72.4105%" y="53" width="0.0353%" height="15" fill="rgb(250,87,22)" fg:x="647706" fg:w="316"/><text x="72.6605%" y="63.50"></text></g><g><title>`0x7FFDA1A7FBD4 (122 samples, 0.01%)</title><rect x="72.4458%" y="53" width="0.0136%" height="15" fill="rgb(239,43,17)" fg:x="648022" fg:w="122"/><text x="72.6958%" y="63.50"></text></g><g><title>`0x7FFDA1A7D357 (643 samples, 0.07%)</title><rect x="72.3933%" y="85" width="0.0719%" height="15" fill="rgb(231,177,25)" fg:x="647552" fg:w="643"/><text x="72.6433%" y="95.50"></text></g><g><title>`0x7FFDA1A7FAE2 (643 samples, 0.07%)</title><rect x="72.3933%" y="69" width="0.0719%" height="15" fill="rgb(219,179,1)" fg:x="647552" fg:w="643"/><text x="72.6433%" y="79.50"></text></g><g><title>`0x7FFDA1A7DFDF (119 samples, 0.01%)</title><rect x="72.4840%" y="85" width="0.0133%" height="15" fill="rgb(238,219,53)" fg:x="648364" fg:w="119"/><text x="72.7340%" y="95.50"></text></g><g><title>`0x7FFDA1A7B44D (975 samples, 0.11%)</title><rect x="72.3923%" y="101" width="0.1090%" height="15" fill="rgb(232,167,36)" fg:x="647543" fg:w="975"/><text x="72.6423%" y="111.50"></text></g><g><title>1brc.exe`hashbrown::raw::alloc::inner::do_alloc (1,815 samples, 0.20%)</title><rect x="72.2990%" y="165" width="0.2029%" height="15" fill="rgb(244,19,51)" fg:x="646709" fg:w="1815"/><text x="72.5490%" y="175.50"></text></g><g><title>1brc.exe`alloc::alloc::impl$1::allocate (1,815 samples, 0.20%)</title><rect x="72.2990%" y="149" width="0.2029%" height="15" fill="rgb(224,6,22)" fg:x="646709" fg:w="1815"/><text x="72.5490%" y="159.50"></text></g><g><title>1brc.exe`alloc::alloc::Global::alloc_impl (1,815 samples, 0.20%)</title><rect x="72.2990%" y="133" width="0.2029%" height="15" fill="rgb(224,145,5)" fg:x="646709" fg:w="1815"/><text x="72.5490%" y="143.50"></text></g><g><title>1brc.exe`alloc::alloc::alloc (1,815 samples, 0.20%)</title><rect x="72.2990%" y="117" width="0.2029%" height="15" fill="rgb(234,130,49)" fg:x="646709" fg:w="1815"/><text x="72.5490%" y="127.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::new_uninitialized (1,819 samples, 0.20%)</title><rect x="72.2988%" y="181" width="0.2034%" height="15" fill="rgb(254,6,2)" fg:x="646707" fg:w="1819"/><text x="72.5488%" y="191.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::prepare_resize (1,824 samples, 0.20%)</title><rect x="72.2988%" y="213" width="0.2039%" height="15" fill="rgb(208,96,46)" fg:x="646707" fg:w="1824"/><text x="72.5488%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (1,824 samples, 0.20%)</title><rect x="72.2988%" y="197" width="0.2039%" height="15" fill="rgb(239,3,39)" fg:x="646707" fg:w="1824"/><text x="72.5488%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$32::next (129 samples, 0.01%)</title><rect x="72.5027%" y="213" width="0.0144%" height="15" fill="rgb(233,210,1)" fg:x="648531" fg:w="129"/><text x="72.7527%" y="223.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (5,882 samples, 0.66%)</title><rect x="71.8615%" y="229" width="0.6576%" height="15" fill="rgb(244,137,37)" fg:x="642795" fg:w="5882"/><text x="72.1115%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (5,957 samples, 0.67%)</title><rect x="71.8533%" y="277" width="0.6660%" height="15" fill="rgb(240,136,2)" fg:x="642722" fg:w="5957"/><text x="72.1033%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (5,902 samples, 0.66%)</title><rect x="71.8594%" y="261" width="0.6598%" height="15" fill="rgb(239,18,37)" fg:x="642777" fg:w="5902"/><text x="72.1094%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (5,887 samples, 0.66%)</title><rect x="71.8611%" y="245" width="0.6581%" height="15" fill="rgb(218,185,22)" fg:x="642792" fg:w="5887"/><text x="72.1111%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::fix_insert_slot (217 samples, 0.02%)</title><rect x="72.5326%" y="261" width="0.0243%" height="15" fill="rgb(225,218,4)" fg:x="648798" fg:w="217"/><text x="72.7826%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::is_bucket_full (216 samples, 0.02%)</title><rect x="72.5327%" y="245" width="0.0241%" height="15" fill="rgb(230,182,32)" fg:x="648799" fg:w="216"/><text x="72.7827%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;, hashbrown::map::make_hasher::closure_env$0&lt;ref$&lt;slice2$ (6,599 samples, 0.74%)</title><rect x="71.8511%" y="293" width="0.7377%" height="15" fill="rgb(242,56,43)" fg:x="642702" fg:w="6599"/><text x="72.1011%" y="303.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (622 samples, 0.07%)</title><rect x="72.5193%" y="277" width="0.0695%" height="15" fill="rgb(233,99,24)" fg:x="648679" fg:w="622"/><text x="72.7693%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;(ref$&lt;slice2$ (8,876 samples, 0.99%)</title><rect x="71.6111%" y="309" width="0.9923%" height="15" fill="rgb(234,209,42)" fg:x="640556" fg:w="8876"/><text x="71.8611%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$&lt;ref$&lt;slice2$ (131 samples, 0.01%)</title><rect x="72.5888%" y="293" width="0.0146%" height="15" fill="rgb(227,7,12)" fg:x="649301" fg:w="131"/><text x="72.8388%" y="303.50"></text></g><g><title>1brc.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$&lt;slice2$ (4,002 samples, 0.45%)</title><rect x="72.6034%" y="309" width="0.4474%" height="15" fill="rgb(245,203,43)" fg:x="649432" fg:w="4002"/><text x="72.8534%" y="319.50"></text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::bucket (4,364 samples, 0.49%)</title><rect x="73.0508%" y="277" width="0.4879%" height="15" fill="rgb(238,205,33)" fg:x="653434" fg:w="4364"/><text x="73.3008%" y="287.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;ref$&lt;slice2$ (4,364 samples, 0.49%)</title><rect x="73.0508%" y="261" width="0.4879%" height="15" fill="rgb(231,56,7)" fg:x="653434" fg:w="4364"/><text x="73.3008%" y="271.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (4,364 samples, 0.49%)</title><rect x="73.0508%" y="245" width="0.4879%" height="15" fill="rgb(244,186,29)" fg:x="653434" fg:w="4364"/><text x="73.3008%" y="255.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (4,364 samples, 0.49%)</title><rect x="73.0508%" y="229" width="0.4879%" height="15" fill="rgb(234,111,31)" fg:x="653434" fg:w="4364"/><text x="73.3008%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::ProbeSeq::move_next (380 samples, 0.04%)</title><rect x="74.2064%" y="261" width="0.0425%" height="15" fill="rgb(241,149,10)" fg:x="663770" fg:w="380"/><text x="74.4564%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::impl$3::next (13,244 samples, 1.48%)</title><rect x="74.2488%" y="261" width="1.4806%" height="15" fill="rgb(249,206,44)" fg:x="664150" fg:w="13244"/><text x="74.4988%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (13,244 samples, 1.48%)</title><rect x="74.2488%" y="245" width="1.4806%" height="15" fill="rgb(251,153,30)" fg:x="664150" fg:w="13244"/><text x="74.4988%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::h2 (10,590 samples, 1.18%)</title><rect x="75.7295%" y="261" width="1.1839%" height="15" fill="rgb(239,152,38)" fg:x="677394" fg:w="10590"/><text x="75.9795%" y="271.50"></text></g><g><title>`0x7FFD7EDB1100 (151 samples, 0.02%)</title><rect x="82.0237%" y="165" width="0.0169%" height="15" fill="rgb(249,139,47)" fg:x="733695" fg:w="151"/><text x="82.2737%" y="175.50"></text></g><g><title>`0x7FFD7EDB1103 (1,818 samples, 0.20%)</title><rect x="82.0405%" y="165" width="0.2032%" height="15" fill="rgb(244,64,35)" fg:x="733846" fg:w="1818"/><text x="82.2905%" y="175.50"></text></g><g><title>`0x7FFD7EDB1107 (1,906 samples, 0.21%)</title><rect x="82.2438%" y="165" width="0.2131%" height="15" fill="rgb(216,46,15)" fg:x="735664" fg:w="1906"/><text x="82.4938%" y="175.50"></text></g><g><title>`0x7FFD7EDB1112 (2,066 samples, 0.23%)</title><rect x="82.4660%" y="165" width="0.2310%" height="15" fill="rgb(250,74,19)" fg:x="737652" fg:w="2066"/><text x="82.7160%" y="175.50"></text></g><g><title>`0x7FFD7EDB1115 (13,927 samples, 1.56%)</title><rect x="82.6970%" y="165" width="1.5570%" height="15" fill="rgb(249,42,33)" fg:x="739718" fg:w="13927"/><text x="82.9470%" y="175.50"></text></g><g><title>`0x7FFD7EDB111A (262 samples, 0.03%)</title><rect x="84.2542%" y="165" width="0.0293%" height="15" fill="rgb(242,149,17)" fg:x="753647" fg:w="262"/><text x="84.5042%" y="175.50"></text></g><g><title>`0x7FFD7EDB111D (399 samples, 0.04%)</title><rect x="84.2835%" y="165" width="0.0446%" height="15" fill="rgb(244,29,21)" fg:x="753909" fg:w="399"/><text x="84.5335%" y="175.50"></text></g><g><title>`0x7FFD7EDB1120 (857 samples, 0.10%)</title><rect x="84.3281%" y="165" width="0.0958%" height="15" fill="rgb(220,130,37)" fg:x="754308" fg:w="857"/><text x="84.5781%" y="175.50"></text></g><g><title>`0x7FFD7EDB1125 (3,212 samples, 0.36%)</title><rect x="84.4246%" y="165" width="0.3591%" height="15" fill="rgb(211,67,2)" fg:x="755171" fg:w="3212"/><text x="84.6746%" y="175.50"></text></g><g><title>`0x7FFD7EDB1129 (599 samples, 0.07%)</title><rect x="84.7837%" y="165" width="0.0670%" height="15" fill="rgb(235,68,52)" fg:x="758383" fg:w="599"/><text x="85.0337%" y="175.50"></text></g><g><title>`0x7FFD7EDB112B (629 samples, 0.07%)</title><rect x="84.8506%" y="165" width="0.0703%" height="15" fill="rgb(246,142,3)" fg:x="758982" fg:w="629"/><text x="85.1006%" y="175.50"></text></g><g><title>`0x7FFD7EDB112E (955 samples, 0.11%)</title><rect x="84.9209%" y="165" width="0.1068%" height="15" fill="rgb(241,25,7)" fg:x="759611" fg:w="955"/><text x="85.1709%" y="175.50"></text></g><g><title>`0x7FFD7EDB1130 (2,484 samples, 0.28%)</title><rect x="85.0277%" y="165" width="0.2777%" height="15" fill="rgb(242,119,39)" fg:x="760566" fg:w="2484"/><text x="85.2777%" y="175.50"></text></g><g><title>`0x7FFD7EDB1132 (6,513 samples, 0.73%)</title><rect x="85.3054%" y="165" width="0.7281%" height="15" fill="rgb(241,98,45)" fg:x="763050" fg:w="6513"/><text x="85.5554%" y="175.50"></text></g><g><title>`0x7FFD7EDB1135 (24,538 samples, 2.74%)</title><rect x="86.0335%" y="165" width="2.7432%" height="15" fill="rgb(254,28,30)" fg:x="769563" fg:w="24538"/><text x="86.2835%" y="175.50">`0..</text></g><g><title>`0x7FFD7EDB1137 (94 samples, 0.01%)</title><rect x="88.7768%" y="165" width="0.0105%" height="15" fill="rgb(241,142,54)" fg:x="794101" fg:w="94"/><text x="89.0268%" y="175.50"></text></g><g><title>`0x7FFD7EDB113A (970 samples, 0.11%)</title><rect x="88.7873%" y="165" width="0.1084%" height="15" fill="rgb(222,85,15)" fg:x="794195" fg:w="970"/><text x="89.0373%" y="175.50"></text></g><g><title>`0x7FFD7EDB113D (478 samples, 0.05%)</title><rect x="88.8957%" y="165" width="0.0534%" height="15" fill="rgb(210,85,47)" fg:x="795165" fg:w="478"/><text x="89.1457%" y="175.50"></text></g><g><title>`0x7FFD7EDB113F (658 samples, 0.07%)</title><rect x="88.9491%" y="165" width="0.0736%" height="15" fill="rgb(224,206,25)" fg:x="795643" fg:w="658"/><text x="89.1991%" y="175.50"></text></g><g><title>`0x7FFD7EDB1142 (1,121 samples, 0.13%)</title><rect x="89.0227%" y="165" width="0.1253%" height="15" fill="rgb(243,201,19)" fg:x="796301" fg:w="1121"/><text x="89.2727%" y="175.50"></text></g><g><title>`0x7FFD7EDB1145 (112 samples, 0.01%)</title><rect x="89.1480%" y="165" width="0.0125%" height="15" fill="rgb(236,59,4)" fg:x="797422" fg:w="112"/><text x="89.3980%" y="175.50"></text></g><g><title>`0x7FFD7EDB114A (365 samples, 0.04%)</title><rect x="89.1614%" y="165" width="0.0408%" height="15" fill="rgb(254,179,45)" fg:x="797542" fg:w="365"/><text x="89.4114%" y="175.50"></text></g><g><title>`0x7FFD7EDB114E (282 samples, 0.03%)</title><rect x="89.2023%" y="165" width="0.0315%" height="15" fill="rgb(226,14,10)" fg:x="797907" fg:w="282"/><text x="89.4523%" y="175.50"></text></g><g><title>`0x7FFD7EDB1187 (430 samples, 0.05%)</title><rect x="89.2338%" y="165" width="0.0481%" height="15" fill="rgb(244,27,41)" fg:x="798189" fg:w="430"/><text x="89.4838%" y="175.50"></text></g><g><title>`0x7FFD7EDB118A (91 samples, 0.01%)</title><rect x="89.2818%" y="165" width="0.0102%" height="15" fill="rgb(235,35,32)" fg:x="798619" fg:w="91"/><text x="89.5318%" y="175.50"></text></g><g><title>`0x7FFD7EDB118E (141 samples, 0.02%)</title><rect x="89.2920%" y="165" width="0.0158%" height="15" fill="rgb(218,68,31)" fg:x="798710" fg:w="141"/><text x="89.5420%" y="175.50"></text></g><g><title>`0x7FFD7EDB1190 (436 samples, 0.05%)</title><rect x="89.3078%" y="165" width="0.0487%" height="15" fill="rgb(207,120,37)" fg:x="798851" fg:w="436"/><text x="89.5578%" y="175.50"></text></g><g><title>`0x7FFD7EDB1193 (1,187 samples, 0.13%)</title><rect x="89.3565%" y="165" width="0.1327%" height="15" fill="rgb(227,98,0)" fg:x="799287" fg:w="1187"/><text x="89.6065%" y="175.50"></text></g><g><title>`0x7FFD7EDB1197 (1,767 samples, 0.20%)</title><rect x="89.4892%" y="165" width="0.1975%" height="15" fill="rgb(207,7,3)" fg:x="800474" fg:w="1767"/><text x="89.7392%" y="175.50"></text></g><g><title>`0x7FFD7EDB11A2 (192 samples, 0.02%)</title><rect x="89.6908%" y="165" width="0.0215%" height="15" fill="rgb(206,98,19)" fg:x="802277" fg:w="192"/><text x="89.9408%" y="175.50"></text></g><g><title>1brc.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;*, tuple$&lt;ref$&lt;slice2$ (114,549 samples, 12.81%)</title><rect x="76.9134%" y="245" width="12.8060%" height="15" fill="rgb(217,5,26)" fg:x="687984" fg:w="114549"/><text x="77.1634%" y="255.50">1brc.exe`hashbrown:..</text></g><g><title>1brc.exe`hashbrown::impl$0::equivalent(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (114,549 samples, 12.81%)</title><rect x="76.9134%" y="229" width="12.8060%" height="15" fill="rgb(235,190,38)" fg:x="687984" fg:w="114549"/><text x="77.1634%" y="239.50">1brc.exe`hashbrown:..</text></g><g><title>1brc.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (114,433 samples, 12.79%)</title><rect x="76.9263%" y="213" width="12.7931%" height="15" fill="rgb(247,86,24)" fg:x="688100" fg:w="114433"/><text x="77.1763%" y="223.50">1brc.exe`core::cmp:..</text></g><g><title>1brc.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (114,433 samples, 12.79%)</title><rect x="76.9263%" y="197" width="12.7931%" height="15" fill="rgb(205,101,16)" fg:x="688100" fg:w="114433"/><text x="77.1763%" y="207.50">1brc.exe`core::slic..</text></g><g><title>1brc.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (114,433 samples, 12.79%)</title><rect x="76.9263%" y="181" width="12.7931%" height="15" fill="rgb(246,168,33)" fg:x="688100" fg:w="114433"/><text x="77.1763%" y="191.50">1brc.exe`core::slic..</text></g><g><title>1brc.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (117,621 samples, 13.15%)</title><rect x="76.9134%" y="261" width="13.1495%" height="15" fill="rgb(231,114,1)" fg:x="687984" fg:w="117621"/><text x="77.1634%" y="271.50">1brc.exe`hashbrown::..</text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ref (3,072 samples, 0.34%)</title><rect x="89.7194%" y="245" width="0.3434%" height="15" fill="rgb(207,184,53)" fg:x="802533" fg:w="3072"/><text x="89.9694%" y="255.50"></text></g><g><title>1brc.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt; &gt;::as_ptr (3,072 samples, 0.34%)</title><rect x="89.7194%" y="229" width="0.3434%" height="15" fill="rgb(224,95,51)" fg:x="802533" fg:w="3072"/><text x="89.9694%" y="239.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$&lt;slice2$ (3,072 samples, 0.34%)</title><rect x="89.7194%" y="213" width="0.3434%" height="15" fill="rgb(212,188,45)" fg:x="802533" fg:w="3072"/><text x="89.9694%" y="223.50"></text></g><g><title>1brc.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;ref$&lt;slice2$ (3,072 samples, 0.34%)</title><rect x="89.7194%" y="197" width="0.3434%" height="15" fill="rgb(223,154,38)" fg:x="802533" fg:w="3072"/><text x="89.9694%" y="207.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::load (1,705 samples, 0.19%)</title><rect x="90.0629%" y="261" width="0.1906%" height="15" fill="rgb(251,22,52)" fg:x="805605" fg:w="1705"/><text x="90.3129%" y="271.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (1,705 samples, 0.19%)</title><rect x="90.0629%" y="245" width="0.1906%" height="15" fill="rgb(229,209,22)" fg:x="805605" fg:w="1705"/><text x="90.3129%" y="255.50"></text></g><g><title>1brc.exe`core::intrinsics::copy_nonoverlapping (1,705 samples, 0.19%)</title><rect x="90.0629%" y="229" width="0.1906%" height="15" fill="rgb(234,138,34)" fg:x="805605" fg:w="1705"/><text x="90.3129%" y="239.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (6,778 samples, 0.76%)</title><rect x="90.2535%" y="261" width="0.7577%" height="15" fill="rgb(212,95,11)" fg:x="807310" fg:w="6778"/><text x="90.5035%" y="271.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (6,778 samples, 0.76%)</title><rect x="90.2535%" y="245" width="0.7577%" height="15" fill="rgb(240,179,47)" fg:x="807310" fg:w="6778"/><text x="90.5035%" y="255.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt;::get_mut(ref$&lt;slice2$ (457,363 samples, 51.13%)</title><rect x="40.0488%" y="357" width="51.1310%" height="15" fill="rgb(240,163,11)" fg:x="358233" fg:w="457363"/><text x="40.2988%" y="367.50">1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(ref$&lt;slice2$ (457,363 samples, 51.13%)</title><rect x="40.0488%" y="341" width="51.1310%" height="15" fill="rgb(236,37,12)" fg:x="358233" fg:w="457363"/><text x="40.2988%" y="351.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::ra..</text></g><g><title>1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(ref$&lt;slice2$ (457,363 samples, 51.13%)</title><rect x="40.0488%" y="325" width="51.1310%" height="15" fill="rgb(232,164,16)" fg:x="358233" fg:w="457363"/><text x="40.2988%" y="335.50">1brc.exe`hashbrown::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::ra..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (162,162 samples, 18.13%)</title><rect x="73.0508%" y="309" width="18.1289%" height="15" fill="rgb(244,205,15)" fg:x="653434" fg:w="162162"/><text x="73.3008%" y="319.50">1brc.exe`hashbrown::raw::Raw..</text></g><g><title>1brc.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;slice2$&lt;u8&gt;,ref$&lt;slice2$ (162,162 samples, 18.13%)</title><rect x="73.0508%" y="293" width="18.1289%" height="15" fill="rgb(223,117,47)" fg:x="653434" fg:w="162162"/><text x="73.3008%" y="303.50">1brc.exe`hashbrown::raw::Raw..</text></g><g><title>1brc.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (157,798 samples, 17.64%)</title><rect x="73.5387%" y="277" width="17.6411%" height="15" fill="rgb(244,107,35)" fg:x="657798" fg:w="157798"/><text x="73.7887%" y="287.50">1brc.exe`hashbrown::raw::Ra..</text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_empty (1,508 samples, 0.17%)</title><rect x="91.0112%" y="261" width="0.1686%" height="15" fill="rgb(205,140,8)" fg:x="814088" fg:w="1508"/><text x="91.2612%" y="271.50"></text></g><g><title>1brc.exe`hashbrown::raw::sse2::Group::match_byte (1,420 samples, 0.16%)</title><rect x="91.0210%" y="245" width="0.1587%" height="15" fill="rgb(228,84,46)" fg:x="814176" fg:w="1420"/><text x="91.2710%" y="255.50"></text></g><g><title>1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1,420 samples, 0.16%)</title><rect x="91.0210%" y="229" width="0.1587%" height="15" fill="rgb(254,188,9)" fg:x="814176" fg:w="1420"/><text x="91.2710%" y="239.50"></text></g><g><title>`0x7FFDA1A7FBD2 (321 samples, 0.04%)</title><rect x="91.2039%" y="245" width="0.0359%" height="15" fill="rgb(206,112,54)" fg:x="815812" fg:w="321"/><text x="91.4539%" y="255.50"></text></g><g><title>`0x7FFDA1A7FBD4 (138 samples, 0.02%)</title><rect x="91.2398%" y="245" width="0.0154%" height="15" fill="rgb(216,84,49)" fg:x="816133" fg:w="138"/><text x="91.4898%" y="255.50"></text></g><g><title>`0x7FFDA1A7D357 (666 samples, 0.07%)</title><rect x="91.1874%" y="277" width="0.0745%" height="15" fill="rgb(214,194,35)" fg:x="815664" fg:w="666"/><text x="91.4374%" y="287.50"></text></g><g><title>`0x7FFDA1A7FAE2 (666 samples, 0.07%)</title><rect x="91.1874%" y="261" width="0.0745%" height="15" fill="rgb(249,28,3)" fg:x="815664" fg:w="666"/><text x="91.4374%" y="271.50"></text></g><g><title>`0x7FFDA1A7DFDF (117 samples, 0.01%)</title><rect x="91.2801%" y="277" width="0.0131%" height="15" fill="rgb(222,56,52)" fg:x="816493" fg:w="117"/><text x="91.5301%" y="287.50"></text></g><g><title>`0x7FFDA1A7B44D (1,023 samples, 0.11%)</title><rect x="91.1862%" y="293" width="0.1144%" height="15" fill="rgb(245,217,50)" fg:x="815653" fg:w="1023"/><text x="91.4362%" y="303.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt;::len (1,085 samples, 0.12%)</title><rect x="91.1798%" y="357" width="0.1213%" height="15" fill="rgb(213,201,24)" fg:x="815596" fg:w="1085"/><text x="91.4298%" y="367.50"></text></g><g><title>1brc.exe`alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,085 samples, 0.12%)</title><rect x="91.1798%" y="341" width="0.1213%" height="15" fill="rgb(248,116,28)" fg:x="815596" fg:w="1085"/><text x="91.4298%" y="351.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,085 samples, 0.12%)</title><rect x="91.1798%" y="325" width="0.1213%" height="15" fill="rgb(219,72,43)" fg:x="815596" fg:w="1085"/><text x="91.4298%" y="335.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt;::try_allocate_in (1,085 samples, 0.12%)</title><rect x="91.1798%" y="309" width="0.1213%" height="15" fill="rgb(209,138,14)" fg:x="815596" fg:w="1085"/><text x="91.4298%" y="319.50"></text></g><g><title>1brc.exe`std::collections::hash::map::HashMap&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,1brc::StationStats,std::hash::random::RandomState&gt;::new (217 samples, 0.02%)</title><rect x="91.3011%" y="357" width="0.0243%" height="15" fill="rgb(222,18,33)" fg:x="816681" fg:w="217"/><text x="91.5511%" y="367.50"></text></g><g><title>1brc.exe`std::collections::hash::map::impl$8::default (217 samples, 0.02%)</title><rect x="91.3011%" y="341" width="0.0243%" height="15" fill="rgb(213,199,7)" fg:x="816681" fg:w="217"/><text x="91.5511%" y="351.50"></text></g><g><title>1brc.exe`std::hash::random::impl$5::default (217 samples, 0.02%)</title><rect x="91.3011%" y="325" width="0.0243%" height="15" fill="rgb(250,110,10)" fg:x="816681" fg:w="217"/><text x="91.5511%" y="335.50"></text></g><g><title>1brc.exe`std::hash::random::RandomState::new (216 samples, 0.02%)</title><rect x="91.3012%" y="309" width="0.0241%" height="15" fill="rgb(248,123,6)" fg:x="816682" fg:w="216"/><text x="91.5512%" y="319.50"></text></g><g><title>1brc.exe`std::thread::local::LocalKey&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::with (216 samples, 0.02%)</title><rect x="91.3012%" y="293" width="0.0241%" height="15" fill="rgb(206,91,31)" fg:x="816682" fg:w="216"/><text x="91.5512%" y="303.50"></text></g><g><title>1brc.exe`std::thread::local::LocalKey&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::try_with (216 samples, 0.02%)</title><rect x="91.3012%" y="277" width="0.0241%" height="15" fill="rgb(211,154,13)" fg:x="816682" fg:w="216"/><text x="91.5512%" y="287.50"></text></g><g><title>1brc.exe`std::hash::random::impl$0::new::closure$0(std::hash::random::impl$0::new::closure_env$0, core::cell::Cell&lt;tuple$ (131 samples, 0.01%)</title><rect x="91.3107%" y="261" width="0.0146%" height="15" fill="rgb(225,148,7)" fg:x="816767" fg:w="131"/><text x="91.5607%" y="271.50"></text></g><g><title>1brc.exe`core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt;::get (131 samples, 0.01%)</title><rect x="91.3107%" y="245" width="0.0146%" height="15" fill="rgb(220,160,43)" fg:x="816767" fg:w="131"/><text x="91.5607%" y="255.50"></text></g><g><title>1brc.exe`std::sys::thread_local::fast_local::Key&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::try_initialize&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt;,std::hash::random::impl$0::new::KEYS::__getit::closure_env$0&gt; (131 samples, 0.01%)</title><rect x="91.3107%" y="229" width="0.0146%" height="15" fill="rgb(213,52,39)" fg:x="816767" fg:w="131"/><text x="91.5607%" y="239.50"></text></g><g><title>1brc.exe`std::sys::thread_local::lazy::LazyKeyInner&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::initialize (128 samples, 0.01%)</title><rect x="91.3110%" y="213" width="0.0143%" height="15" fill="rgb(243,137,7)" fg:x="816770" fg:w="128"/><text x="91.5610%" y="223.50"></text></g><g><title>1brc.exe`std::hash::random::impl$0::new::KEYS::__getit::closure$0 (125 samples, 0.01%)</title><rect x="91.3114%" y="197" width="0.0140%" height="15" fill="rgb(230,79,13)" fg:x="816773" fg:w="125"/><text x="91.5614%" y="207.50"></text></g><g><title>1brc.exe`std::hash::random::impl$0::new::KEYS::__init (125 samples, 0.01%)</title><rect x="91.3114%" y="181" width="0.0140%" height="15" fill="rgb(247,105,23)" fg:x="816773" fg:w="125"/><text x="91.5614%" y="191.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::rand::hashmap_random_keys (125 samples, 0.01%)</title><rect x="91.3114%" y="165" width="0.0140%" height="15" fill="rgb(223,179,41)" fg:x="816773" fg:w="125"/><text x="91.5614%" y="175.50"></text></g><g><title>1brc.exe`std::collections::hash::map::impl$46::next(std::collections::hash::map::IntoIter&lt;ref$&lt;slice2$ (169 samples, 0.02%)</title><rect x="91.3256%" y="357" width="0.0189%" height="15" fill="rgb(218,9,34)" fg:x="816900" fg:w="169"/><text x="91.5756%" y="367.50"></text></g><g><title>1brc.exe`hashbrown::map::impl$67::next(hashbrown::map::IntoIter&lt;ref$&lt;slice2$ (169 samples, 0.02%)</title><rect x="91.3256%" y="341" width="0.0189%" height="15" fill="rgb(222,106,8)" fg:x="816900" fg:w="169"/><text x="91.5756%" y="351.50"></text></g><g><title>1brc.exe`hashbrown::raw::impl$39::next(hashbrown::raw::RawIntoIter&lt;tuple$&lt;ref$&lt;slice2$ (169 samples, 0.02%)</title><rect x="91.3256%" y="325" width="0.0189%" height="15" fill="rgb(211,220,0)" fg:x="816900" fg:w="169"/><text x="91.5756%" y="335.50"></text></g><g><title>`0x7FFDA1A7B3C7 (186 samples, 0.02%)</title><rect x="91.3491%" y="261" width="0.0208%" height="15" fill="rgb(229,52,16)" fg:x="817110" fg:w="186"/><text x="91.5991%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;::new (217 samples, 0.02%)</title><rect x="91.3460%" y="357" width="0.0243%" height="15" fill="rgb(212,155,18)" fg:x="817083" fg:w="217"/><text x="91.5960%" y="367.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;::with_capacity (217 samples, 0.02%)</title><rect x="91.3460%" y="341" width="0.0243%" height="15" fill="rgb(242,21,14)" fg:x="817083" fg:w="217"/><text x="91.5960%" y="351.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::buffer::Buffer::with_capacity (217 samples, 0.02%)</title><rect x="91.3460%" y="325" width="0.0243%" height="15" fill="rgb(222,19,48)" fg:x="817083" fg:w="217"/><text x="91.5960%" y="335.50"></text></g><g><title>1brc.exe`alloc::boxed::impl$2::new_uninit_slice (217 samples, 0.02%)</title><rect x="91.3460%" y="309" width="0.0243%" height="15" fill="rgb(232,45,27)" fg:x="817083" fg:w="217"/><text x="91.5960%" y="319.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity (217 samples, 0.02%)</title><rect x="91.3460%" y="293" width="0.0243%" height="15" fill="rgb(249,103,42)" fg:x="817083" fg:w="217"/><text x="91.5960%" y="303.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::try_allocate_in (217 samples, 0.02%)</title><rect x="91.3460%" y="277" width="0.0243%" height="15" fill="rgb(246,81,33)" fg:x="817083" fg:w="217"/><text x="91.5960%" y="287.50"></text></g><g><title>`0x7FFD9F57910B (111 samples, 0.01%)</title><rect x="91.3719%" y="245" width="0.0124%" height="15" fill="rgb(252,33,42)" fg:x="817314" fg:w="111"/><text x="91.6219%" y="255.50"></text></g><g><title>`0x7FFDA1AEDA44 (102 samples, 0.01%)</title><rect x="91.3729%" y="229" width="0.0114%" height="15" fill="rgb(209,212,41)" fg:x="817323" fg:w="102"/><text x="91.6229%" y="239.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (124 samples, 0.01%)</title><rect x="91.3709%" y="341" width="0.0139%" height="15" fill="rgb(207,154,6)" fg:x="817305" fg:w="124"/><text x="91.6209%" y="351.50"></text></g><g><title>1brc.exe`std::fs::impl$10::seek (124 samples, 0.01%)</title><rect x="91.3709%" y="325" width="0.0139%" height="15" fill="rgb(223,64,47)" fg:x="817305" fg:w="124"/><text x="91.6209%" y="335.50"></text></g><g><title>1brc.exe`std::fs::impl$7::seek (124 samples, 0.01%)</title><rect x="91.3709%" y="309" width="0.0139%" height="15" fill="rgb(211,161,38)" fg:x="817305" fg:w="124"/><text x="91.6209%" y="319.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::seek (124 samples, 0.01%)</title><rect x="91.3709%" y="293" width="0.0139%" height="15" fill="rgb(219,138,40)" fg:x="817305" fg:w="124"/><text x="91.6209%" y="303.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::cvt (122 samples, 0.01%)</title><rect x="91.3711%" y="277" width="0.0136%" height="15" fill="rgb(241,228,46)" fg:x="817307" fg:w="122"/><text x="91.6211%" y="287.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::impl$3::is_zero (120 samples, 0.01%)</title><rect x="91.3713%" y="261" width="0.0134%" height="15" fill="rgb(223,209,38)" fg:x="817309" fg:w="120"/><text x="91.6213%" y="271.50"></text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$7::seek(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, enum2$ (126 samples, 0.01%)</title><rect x="91.3709%" y="357" width="0.0141%" height="15" fill="rgb(236,164,45)" fg:x="817305" fg:w="126"/><text x="91.6209%" y="367.50"></text></g><g><title>1brc.exe`std::io::default_read_exact&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (40,418 samples, 4.52%)</title><rect x="91.3849%" y="357" width="4.5185%" height="15" fill="rgb(231,15,5)" fg:x="817431" fg:w="40418"/><text x="91.6349%" y="367.50">1brc...</text></g><g><title>1brc.exe`std::io::buffered::bufreader::impl$4::read(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, ref_mut$&lt;slice2$ (40,405 samples, 4.52%)</title><rect x="91.3864%" y="341" width="4.5171%" height="15" fill="rgb(252,35,15)" fg:x="817444" fg:w="40405"/><text x="91.6364%" y="351.50">1brc...</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::read (40,403 samples, 4.52%)</title><rect x="91.3866%" y="325" width="4.5169%" height="15" fill="rgb(248,181,18)" fg:x="817446" fg:w="40403"/><text x="91.6366%" y="335.50">1brc...</text></g><g><title>1brc.exe`std::sys::pal::windows::handle::Handle::synchronous_read (40,396 samples, 4.52%)</title><rect x="91.3874%" y="309" width="4.5161%" height="15" fill="rgb(233,39,42)" fg:x="817453" fg:w="40396"/><text x="91.6374%" y="319.50">1brc...</text></g><g><title>`0x7FFDA1AED624 (40,368 samples, 4.51%)</title><rect x="91.3905%" y="293" width="4.5130%" height="15" fill="rgb(238,110,33)" fg:x="817481" fg:w="40368"/><text x="91.6405%" y="303.50">`0x7F..</text></g><g><title>`0x7FFD9F560E67 (162 samples, 0.02%)</title><rect x="95.9105%" y="277" width="0.0181%" height="15" fill="rgb(233,195,10)" fg:x="857912" fg:w="162"/><text x="96.1605%" y="287.50"></text></g><g><title>`0x7FFDA1A6D85C (130 samples, 0.01%)</title><rect x="95.9141%" y="261" width="0.0145%" height="15" fill="rgb(254,105,3)" fg:x="857944" fg:w="130"/><text x="96.1641%" y="271.50"></text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path::closure$0 (178 samples, 0.02%)</title><rect x="95.9092%" y="293" width="0.0199%" height="15" fill="rgb(221,225,9)" fg:x="857900" fg:w="178"/><text x="96.1592%" y="303.50"></text></g><g><title>`0x7FFDA1A7B27B (97 samples, 0.01%)</title><rect x="95.9594%" y="117" width="0.0108%" height="15" fill="rgb(224,227,45)" fg:x="858349" fg:w="97"/><text x="96.2094%" y="127.50"></text></g><g><title>`0x7FFDA1A7B3C7 (174 samples, 0.02%)</title><rect x="95.9768%" y="117" width="0.0195%" height="15" fill="rgb(229,198,43)" fg:x="858505" fg:w="174"/><text x="96.2268%" y="127.50"></text></g><g><title>`0x7FFDA1A71BF2 (367 samples, 0.04%)</title><rect x="95.9555%" y="133" width="0.0410%" height="15" fill="rgb(206,209,35)" fg:x="858314" fg:w="367"/><text x="96.2055%" y="143.50"></text></g><g><title>`0x7FFDA1A738E3 (575 samples, 0.06%)</title><rect x="95.9358%" y="149" width="0.0643%" height="15" fill="rgb(245,195,53)" fg:x="858138" fg:w="575"/><text x="96.1858%" y="159.50"></text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path::closure$1 (637 samples, 0.07%)</title><rect x="95.9291%" y="293" width="0.0712%" height="15" fill="rgb(240,92,26)" fg:x="858078" fg:w="637"/><text x="96.1791%" y="303.50"></text></g><g><title>1brc.exe`alloc::vec::Vec::reserve_exact (607 samples, 0.07%)</title><rect x="95.9324%" y="277" width="0.0679%" height="15" fill="rgb(207,40,23)" fg:x="858108" fg:w="607"/><text x="96.1824%" y="287.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::reserve_exact (607 samples, 0.07%)</title><rect x="95.9324%" y="261" width="0.0679%" height="15" fill="rgb(223,111,35)" fg:x="858108" fg:w="607"/><text x="96.1824%" y="271.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::try_reserve_exact (607 samples, 0.07%)</title><rect x="95.9324%" y="245" width="0.0679%" height="15" fill="rgb(229,147,28)" fg:x="858108" fg:w="607"/><text x="96.1824%" y="255.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::grow_exact (607 samples, 0.07%)</title><rect x="95.9324%" y="229" width="0.0679%" height="15" fill="rgb(211,29,28)" fg:x="858108" fg:w="607"/><text x="96.1824%" y="239.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (605 samples, 0.07%)</title><rect x="95.9327%" y="213" width="0.0676%" height="15" fill="rgb(228,72,33)" fg:x="858110" fg:w="605"/><text x="96.1827%" y="223.50"></text></g><g><title>1brc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (605 samples, 0.07%)</title><rect x="95.9327%" y="197" width="0.0676%" height="15" fill="rgb(205,214,31)" fg:x="858110" fg:w="605"/><text x="96.1827%" y="207.50"></text></g><g><title>1brc.exe`core::result::Result::map_err (603 samples, 0.07%)</title><rect x="95.9329%" y="181" width="0.0674%" height="15" fill="rgb(224,111,15)" fg:x="858112" fg:w="603"/><text x="96.1829%" y="191.50"></text></g><g><title>`0x7FFDA1A736BD (584 samples, 0.07%)</title><rect x="95.9350%" y="165" width="0.0653%" height="15" fill="rgb(253,21,26)" fg:x="858131" fg:w="584"/><text x="96.1850%" y="175.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (844 samples, 0.09%)</title><rect x="95.9071%" y="341" width="0.0944%" height="15" fill="rgb(245,139,43)" fg:x="857881" fg:w="844"/><text x="96.1571%" y="351.50"></text></g><g><title>1brc.exe`std::sys::path::windows::get_long_path (843 samples, 0.09%)</title><rect x="95.9072%" y="325" width="0.0942%" height="15" fill="rgb(252,170,7)" fg:x="857882" fg:w="843"/><text x="96.1572%" y="335.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::fill_utf16_buf (833 samples, 0.09%)</title><rect x="95.9083%" y="309" width="0.0931%" height="15" fill="rgb(231,118,14)" fg:x="857892" fg:w="833"/><text x="96.1583%" y="319.50"></text></g><g><title>`0x7FFD9F5415C3 (92 samples, 0.01%)</title><rect x="96.0066%" y="293" width="0.0103%" height="15" fill="rgb(238,83,0)" fg:x="858771" fg:w="92"/><text x="96.2566%" y="303.50"></text></g><g><title>`0x7FFD9F541A09 (24,170 samples, 2.70%)</title><rect x="96.0220%" y="293" width="2.7021%" height="15" fill="rgb(221,39,39)" fg:x="858909" fg:w="24170"/><text x="96.2720%" y="303.50">`0..</text></g><g><title>`0x7FFDA1AEE004 (24,154 samples, 2.70%)</title><rect x="96.0238%" y="277" width="2.7003%" height="15" fill="rgb(222,119,46)" fg:x="858925" fg:w="24154"/><text x="96.2738%" y="287.50">`0..</text></g><g><title>1brc.exe`std::os::windows::io::handle::impl$13::try_from (24,515 samples, 2.74%)</title><rect x="96.0014%" y="341" width="2.7407%" height="15" fill="rgb(222,165,49)" fg:x="858725" fg:w="24515"/><text x="96.2514%" y="351.50">1b..</text></g><g><title>1brc.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (24,508 samples, 2.74%)</title><rect x="96.0022%" y="325" width="2.7399%" height="15" fill="rgb(219,113,52)" fg:x="858732" fg:w="24508"/><text x="96.2522%" y="335.50">1b..</text></g><g><title>`0x7FFD9F541476 (24,490 samples, 2.74%)</title><rect x="96.0042%" y="309" width="2.7379%" height="15" fill="rgb(214,7,15)" fg:x="858750" fg:w="24490"/><text x="96.2542%" y="319.50">`0..</text></g><g><title>1brc.exe`std::sys::pal::windows::fs::File::open (25,501 samples, 2.85%)</title><rect x="95.9035%" y="357" width="2.8509%" height="15" fill="rgb(235,32,4)" fg:x="857849" fg:w="25501"/><text x="96.1535%" y="367.50">1b..</text></g><g><title>1brc.exe`std::sys::path::windows::maybe_verbatim (105 samples, 0.01%)</title><rect x="98.7426%" y="341" width="0.0117%" height="15" fill="rgb(238,90,54)" fg:x="883245" fg:w="105"/><text x="98.9926%" y="351.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (105 samples, 0.01%)</title><rect x="98.7426%" y="325" width="0.0117%" height="15" fill="rgb(213,208,19)" fg:x="883245" fg:w="105"/><text x="98.9926%" y="335.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::to_u16s::inner (105 samples, 0.01%)</title><rect x="98.7426%" y="309" width="0.0117%" height="15" fill="rgb(233,156,4)" fg:x="883245" fg:w="105"/><text x="98.9926%" y="319.50"></text></g><g><title>`0x7FFDA1A75D87 (133 samples, 0.01%)</title><rect x="98.7588%" y="325" width="0.0149%" height="15" fill="rgb(207,194,5)" fg:x="883390" fg:w="133"/><text x="99.0088%" y="335.50"></text></g><g><title>`0x7FFDA1A7FAE2 (133 samples, 0.01%)</title><rect x="98.7588%" y="309" width="0.0149%" height="15" fill="rgb(206,111,30)" fg:x="883390" fg:w="133"/><text x="99.0088%" y="319.50"></text></g><g><title>`0x7FFDA1A6E412 (212 samples, 0.02%)</title><rect x="98.7851%" y="309" width="0.0237%" height="15" fill="rgb(243,70,54)" fg:x="883625" fg:w="212"/><text x="99.0351%" y="319.50"></text></g><g><title>`0x7FFDA1A6F35E (210 samples, 0.02%)</title><rect x="98.7853%" y="293" width="0.0235%" height="15" fill="rgb(242,28,8)" fg:x="883627" fg:w="210"/><text x="99.0353%" y="303.50"></text></g><g><title>`0x7FFDA1A7095C (210 samples, 0.02%)</title><rect x="98.7853%" y="277" width="0.0235%" height="15" fill="rgb(219,106,18)" fg:x="883627" fg:w="210"/><text x="99.0353%" y="287.50"></text></g><g><title>`0x7FFDA1A59B1A (210 samples, 0.02%)</title><rect x="98.7853%" y="261" width="0.0235%" height="15" fill="rgb(244,222,10)" fg:x="883627" fg:w="210"/><text x="99.0353%" y="271.50"></text></g><g><title>`0x7FFDA1AED924 (210 samples, 0.02%)</title><rect x="98.7853%" y="245" width="0.0235%" height="15" fill="rgb(236,179,52)" fg:x="883627" fg:w="210"/><text x="99.0353%" y="255.50"></text></g><g><title>`0x7FFDA1A765F6 (311 samples, 0.03%)</title><rect x="98.7790%" y="325" width="0.0348%" height="15" fill="rgb(213,23,39)" fg:x="883570" fg:w="311"/><text x="99.0290%" y="335.50"></text></g><g><title>`0x7FFDA1A75B74 (533 samples, 0.06%)</title><rect x="98.7569%" y="341" width="0.0596%" height="15" fill="rgb(238,48,10)" fg:x="883373" fg:w="533"/><text x="99.0069%" y="351.50"></text></g><g><title>1brc.exe`1brc::input_multitreaded::closure$0 (867,482 samples, 96.98%)</title><rect x="1.8369%" y="373" width="96.9804%" height="15" fill="rgb(251,196,23)" fg:x="16431" fg:w="867482"/><text x="2.0869%" y="383.50">1brc.exe`1brc::input_multitreaded::closure$0</text></g><g><title>`0x7FFDA1A747B1 (548 samples, 0.06%)</title><rect x="98.7561%" y="357" width="0.0613%" height="15" fill="rgb(250,152,24)" fg:x="883365" fg:w="548"/><text x="99.0061%" y="367.50"></text></g><g><title>1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (867,592 samples, 96.99%)</title><rect x="1.8348%" y="437" width="96.9927%" height="15" fill="rgb(209,150,17)" fg:x="16412" fg:w="867592"/><text x="2.0848%" y="447.50">1brc.exe`std::panic::catch_unwind(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitrea..</text></g><g><title>1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (867,592 samples, 96.99%)</title><rect x="1.8348%" y="421" width="96.9927%" height="15" fill="rgb(234,202,34)" fg:x="16412" fg:w="867592"/><text x="2.0848%" y="431.50">1brc.exe`std::panicking::try(core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::impl$0::spawn_unchecked_::closure$1::closure_env$0&lt;1brc::input_multitreaded::..</text></g><g><title>1brc.exe`std::panicking::try::do_call (867,592 samples, 96.99%)</title><rect x="1.8348%" y="405" width="96.9927%" height="15" fill="rgb(253,148,53)" fg:x="16412" fg:w="867592"/><text x="2.0848%" y="415.50">1brc.exe`std::panicking::try::do_call</text></g><g><title>1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt; (867,586 samples, 96.99%)</title><rect x="1.8355%" y="389" width="96.9920%" height="15" fill="rgb(218,129,16)" fg:x="16418" fg:w="867586"/><text x="2.0855%" y="399.50">1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::Stati..</text></g><g><title>1brc.exe`alloc::vec::Vec::push (108 samples, 0.01%)</title><rect x="98.8386%" y="293" width="0.0121%" height="15" fill="rgb(216,85,19)" fg:x="884103" fg:w="108"/><text x="99.0886%" y="303.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::grow_one&lt;tuple$&lt;ptr_mut$&lt;u8&gt;,void (*)(ptr_mut$&lt;u8&gt;)&gt;,alloc::alloc::Global&gt; (108 samples, 0.01%)</title><rect x="98.8386%" y="277" width="0.0121%" height="15" fill="rgb(235,228,7)" fg:x="884103" fg:w="108"/><text x="99.0886%" y="287.50"></text></g><g><title>1brc.exe`alloc::raw_vec::RawVec::grow_amortized (108 samples, 0.01%)</title><rect x="98.8386%" y="261" width="0.0121%" height="15" fill="rgb(245,175,0)" fg:x="884103" fg:w="108"/><text x="99.0886%" y="271.50"></text></g><g><title>1brc.exe`core::result::impl$26::branch (108 samples, 0.01%)</title><rect x="98.8386%" y="245" width="0.0121%" height="15" fill="rgb(208,168,36)" fg:x="884103" fg:w="108"/><text x="99.0886%" y="255.50"></text></g><g><title>1brc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (108 samples, 0.01%)</title><rect x="98.8386%" y="229" width="0.0121%" height="15" fill="rgb(246,171,24)" fg:x="884103" fg:w="108"/><text x="99.0886%" y="239.50"></text></g><g><title>1brc.exe`core::result::Result::map_err (108 samples, 0.01%)</title><rect x="98.8386%" y="213" width="0.0121%" height="15" fill="rgb(215,142,24)" fg:x="884103" fg:w="108"/><text x="99.0886%" y="223.50"></text></g><g><title>`0x7FFDA1A7B3C7 (91 samples, 0.01%)</title><rect x="98.8405%" y="197" width="0.0102%" height="15" fill="rgb(250,187,7)" fg:x="884120" fg:w="91"/><text x="99.0905%" y="207.50"></text></g><g><title>1brc.exe`std::thread::CURRENT::__getit (163 samples, 0.02%)</title><rect x="98.8325%" y="389" width="0.0182%" height="15" fill="rgb(228,66,33)" fg:x="884049" fg:w="163"/><text x="99.0825%" y="399.50"></text></g><g><title>1brc.exe`core::cell::Cell::set (109 samples, 0.01%)</title><rect x="98.8386%" y="373" width="0.0122%" height="15" fill="rgb(234,215,21)" fg:x="884103" fg:w="109"/><text x="99.0886%" y="383.50"></text></g><g><title>1brc.exe`core::cell::Cell::replace (109 samples, 0.01%)</title><rect x="98.8386%" y="357" width="0.0122%" height="15" fill="rgb(222,191,20)" fg:x="884103" fg:w="109"/><text x="99.0886%" y="367.50"></text></g><g><title>1brc.exe`core::mem::replace (109 samples, 0.01%)</title><rect x="98.8386%" y="341" width="0.0122%" height="15" fill="rgb(245,79,54)" fg:x="884103" fg:w="109"/><text x="99.0886%" y="351.50"></text></g><g><title>1brc.exe`core::ptr::write (109 samples, 0.01%)</title><rect x="98.8386%" y="325" width="0.0122%" height="15" fill="rgb(240,10,37)" fg:x="884103" fg:w="109"/><text x="99.0886%" y="335.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread_local_key::register_keyless_dtor (109 samples, 0.01%)</title><rect x="98.8386%" y="309" width="0.0122%" height="15" fill="rgb(214,192,32)" fg:x="884103" fg:w="109"/><text x="99.0886%" y="319.50"></text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (867,886 samples, 97.03%)</title><rect x="1.8253%" y="533" width="97.0256%" height="15" fill="rgb(209,36,54)" fg:x="16327" fg:w="867886"/><text x="2.0753%" y="543.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`alloc::boxed::impl$8::drop (867,886 samples, 97.03%)</title><rect x="1.8253%" y="517" width="97.0256%" height="15" fill="rgb(220,10,11)" fg:x="16327" fg:w="867886"/><text x="2.0753%" y="527.50">1brc.exe`alloc::boxed::impl$8::drop</text></g><g><title>1brc.exe`core::alloc::layout::Layout::for_value_raw (867,885 samples, 97.03%)</title><rect x="1.8254%" y="501" width="97.0255%" height="15" fill="rgb(221,106,17)" fg:x="16328" fg:w="867885"/><text x="2.0754%" y="511.50">1brc.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>1brc.exe`core::mem::size_of_val_raw (867,885 samples, 97.03%)</title><rect x="1.8254%" y="485" width="97.0255%" height="15" fill="rgb(251,142,44)" fg:x="16328" fg:w="867885"/><text x="2.0754%" y="495.50">1brc.exe`core::mem::size_of_val_raw</text></g><g><title>1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$&lt;alloc::string::String,1brc::StationStats&gt;,alloc::alloc::Global&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (867,881 samples, 97.03%)</title><rect x="1.8258%" y="469" width="97.0250%" height="15" fill="rgb(238,13,15)" fg:x="16332" fg:w="867881"/><text x="2.0758%" y="479.50">1brc.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple..</text></g><g><title>1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec::Vec&lt;tuple$ (867,869 samples, 97.02%)</title><rect x="1.8272%" y="453" width="97.0237%" height="15" fill="rgb(208,107,27)" fg:x="16344" fg:w="867869"/><text x="2.0772%" y="463.50">1brc.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;1brc::input_multitreaded::closure_env$0,alloc::vec:..</text></g><g><title>1brc.exe`std::thread::set_current (168 samples, 0.02%)</title><rect x="98.8321%" y="437" width="0.0188%" height="15" fill="rgb(205,136,37)" fg:x="884045" fg:w="168"/><text x="99.0821%" y="447.50"></text></g><g><title>1brc.exe`std::thread::local::LocalKey::with (164 samples, 0.02%)</title><rect x="98.8325%" y="421" width="0.0183%" height="15" fill="rgb(250,205,27)" fg:x="884049" fg:w="164"/><text x="99.0825%" y="431.50"></text></g><g><title>1brc.exe`std::thread::local::LocalKey::try_with (164 samples, 0.02%)</title><rect x="98.8325%" y="405" width="0.0183%" height="15" fill="rgb(210,80,43)" fg:x="884049" fg:w="164"/><text x="99.0825%" y="415.50"></text></g><g><title>`0x7FFD9F58694B (1,092 samples, 0.12%)</title><rect x="98.8605%" y="533" width="0.1221%" height="15" fill="rgb(247,160,36)" fg:x="884299" fg:w="1092"/><text x="99.1105%" y="543.50"></text></g><g><title>`0x7FFDA1AED864 (1,089 samples, 0.12%)</title><rect x="98.8608%" y="517" width="0.1217%" height="15" fill="rgb(234,13,49)" fg:x="884302" fg:w="1089"/><text x="99.1108%" y="527.50"></text></g><g><title>1brc.exe`alloc::boxed::impl$48::call_once (869,080 samples, 97.16%)</title><rect x="1.8238%" y="549" width="97.1591%" height="15" fill="rgb(234,122,0)" fg:x="16314" fg:w="869080"/><text x="2.0738%" y="559.50">1brc.exe`alloc::boxed::impl$48::call_once</text></g><g><title>1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (869,154 samples, 97.17%)</title><rect x="1.8226%" y="565" width="97.1673%" height="15" fill="rgb(207,146,38)" fg:x="16303" fg:w="869154"/><text x="2.0726%" y="575.50">1brc.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>`0x7FFDA0747374 (884,872 samples, 98.92%)</title><rect x="0.0669%" y="581" width="98.9245%" height="15" fill="rgb(207,177,25)" fg:x="598" fg:w="884872"/><text x="0.3169%" y="591.50">`0x7FFDA0747374</text></g><g><title>`0x7FFD9F96ECEE (165 samples, 0.02%)</title><rect x="99.0393%" y="485" width="0.0184%" height="15" fill="rgb(211,178,42)" fg:x="885899" fg:w="165"/><text x="99.2893%" y="495.50"></text></g><g><title>`0x7FFDA1A7FAE2 (161 samples, 0.02%)</title><rect x="99.0398%" y="469" width="0.0180%" height="15" fill="rgb(230,69,54)" fg:x="885903" fg:w="161"/><text x="99.2898%" y="479.50"></text></g><g><title>`0x7FFD9F96F957 (359 samples, 0.04%)</title><rect x="99.0258%" y="517" width="0.0401%" height="15" fill="rgb(214,135,41)" fg:x="885778" fg:w="359"/><text x="99.2758%" y="527.50"></text></g><g><title>`0x7FFD9F95D9DB (238 samples, 0.03%)</title><rect x="99.0393%" y="501" width="0.0266%" height="15" fill="rgb(237,67,25)" fg:x="885899" fg:w="238"/><text x="99.2893%" y="511.50"></text></g><g><title>`0x7FFD9F96F96C (95 samples, 0.01%)</title><rect x="99.0660%" y="517" width="0.0106%" height="15" fill="rgb(222,189,50)" fg:x="886137" fg:w="95"/><text x="99.3160%" y="527.50"></text></g><g><title>`0x7FFD9F95F05B (95 samples, 0.01%)</title><rect x="99.0660%" y="501" width="0.0106%" height="15" fill="rgb(245,148,34)" fg:x="886137" fg:w="95"/><text x="99.3160%" y="511.50"></text></g><g><title>`0x7FFDA1A747B1 (93 samples, 0.01%)</title><rect x="99.0662%" y="485" width="0.0104%" height="15" fill="rgb(222,29,6)" fg:x="886139" fg:w="93"/><text x="99.3162%" y="495.50"></text></g><g><title>`0x7FFDA1AAF3B5 (563 samples, 0.06%)</title><rect x="99.0141%" y="533" width="0.0629%" height="15" fill="rgb(221,189,43)" fg:x="885673" fg:w="563"/><text x="99.2641%" y="543.50"></text></g><g><title>`0x7FFDA1A67498 (666 samples, 0.07%)</title><rect x="99.0031%" y="549" width="0.0745%" height="15" fill="rgb(207,36,27)" fg:x="885575" fg:w="666"/><text x="99.2531%" y="559.50"></text></g><g><title>`0x7FFDA1A674ED (399 samples, 0.04%)</title><rect x="99.0778%" y="549" width="0.0446%" height="15" fill="rgb(217,90,24)" fg:x="886243" fg:w="399"/><text x="99.3278%" y="559.50"></text></g><g><title>`0x7FFDA1AB0032 (331 samples, 0.04%)</title><rect x="99.0854%" y="533" width="0.0370%" height="15" fill="rgb(224,66,35)" fg:x="886311" fg:w="331"/><text x="99.3354%" y="543.50"></text></g><g><title>`0x7FFDA1AED5E4 (279 samples, 0.03%)</title><rect x="99.0912%" y="517" width="0.0312%" height="15" fill="rgb(221,13,50)" fg:x="886363" fg:w="279"/><text x="99.3412%" y="527.50"></text></g><g><title>`0x7FFDA1A69A1D (165 samples, 0.02%)</title><rect x="99.1317%" y="533" width="0.0184%" height="15" fill="rgb(236,68,49)" fg:x="886725" fg:w="165"/><text x="99.3817%" y="543.50"></text></g><g><title>`0x7FFDA1A675B6 (174 samples, 0.02%)</title><rect x="99.1312%" y="549" width="0.0195%" height="15" fill="rgb(229,146,28)" fg:x="886721" fg:w="174"/><text x="99.3812%" y="559.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread_local_key::run_keyless_dtors (108 samples, 0.01%)</title><rect x="99.1537%" y="485" width="0.0121%" height="15" fill="rgb(225,31,38)" fg:x="886922" fg:w="108"/><text x="99.4037%" y="495.50"></text></g><g><title>`0x7FFDA1A6763B (192 samples, 0.02%)</title><rect x="99.1519%" y="549" width="0.0215%" height="15" fill="rgb(250,208,3)" fg:x="886906" fg:w="192"/><text x="99.4019%" y="559.50"></text></g><g><title>`0x7FFDA1A69AFF (179 samples, 0.02%)</title><rect x="99.1534%" y="533" width="0.0200%" height="15" fill="rgb(246,54,23)" fg:x="886919" fg:w="179"/><text x="99.4034%" y="543.50"></text></g><g><title>`0x7FFDA1A69A1D (179 samples, 0.02%)</title><rect x="99.1534%" y="517" width="0.0200%" height="15" fill="rgb(243,76,11)" fg:x="886919" fg:w="179"/><text x="99.4034%" y="527.50"></text></g><g><title>1brc.exe`std::sys::pal::windows::thread_local_key::on_tls_callback (179 samples, 0.02%)</title><rect x="99.1534%" y="501" width="0.0200%" height="15" fill="rgb(245,21,50)" fg:x="886919" fg:w="179"/><text x="99.4034%" y="511.50"></text></g><g><title>`0x7FFDA1A67660 (330 samples, 0.04%)</title><rect x="99.1744%" y="549" width="0.0369%" height="15" fill="rgb(228,9,43)" fg:x="887107" fg:w="330"/><text x="99.4244%" y="559.50"></text></g><g><title>`0x7FFDA1AED724 (321 samples, 0.04%)</title><rect x="99.1754%" y="533" width="0.0359%" height="15" fill="rgb(208,100,47)" fg:x="887116" fg:w="321"/><text x="99.4254%" y="543.50"></text></g><g><title>`0x7FFDA1AC154C (149 samples, 0.02%)</title><rect x="99.2170%" y="533" width="0.0167%" height="15" fill="rgb(232,26,8)" fg:x="887488" fg:w="149"/><text x="99.4670%" y="543.50"></text></g><g><title>`0x7FFDA1A747B1 (147 samples, 0.02%)</title><rect x="99.2172%" y="517" width="0.0164%" height="15" fill="rgb(216,166,38)" fg:x="887490" fg:w="147"/><text x="99.4672%" y="527.50"></text></g><g><title>`0x7FFDA1A67665 (274 samples, 0.03%)</title><rect x="99.2113%" y="549" width="0.0306%" height="15" fill="rgb(251,202,51)" fg:x="887437" fg:w="274"/><text x="99.4613%" y="559.50"></text></g><g><title>`0x7FFDA1A6767F (125 samples, 0.01%)</title><rect x="99.2419%" y="549" width="0.0140%" height="15" fill="rgb(254,216,34)" fg:x="887711" fg:w="125"/><text x="99.4919%" y="559.50"></text></g><g><title>`0x7FFDA1A9EC6E (2,294 samples, 0.26%)</title><rect x="99.0003%" y="565" width="0.2565%" height="15" fill="rgb(251,32,27)" fg:x="885550" fg:w="2294"/><text x="99.2503%" y="575.50"></text></g><g><title>`0x7FFDA1A9CC91 (887,282 samples, 99.19%)</title><rect x="0.0664%" y="597" width="99.1940%" height="15" fill="rgb(208,127,28)" fg:x="594" fg:w="887282"/><text x="0.3164%" y="607.50">`0x7FFDA1A9CC91</text></g><g><title>`0x7FFDA074737D (2,399 samples, 0.27%)</title><rect x="98.9922%" y="581" width="0.2682%" height="15" fill="rgb(224,137,22)" fg:x="885477" fg:w="2399"/><text x="99.2422%" y="591.50"></text></g><g><title>`0x7FFDA1AC5C20 (968 samples, 0.11%)</title><rect x="99.2604%" y="597" width="0.1082%" height="15" fill="rgb(254,70,32)" fg:x="887876" fg:w="968"/><text x="99.5104%" y="607.50"></text></g><g><title>`0x7FFDA1A7B27B (107 samples, 0.01%)</title><rect x="99.3871%" y="501" width="0.0120%" height="15" fill="rgb(229,75,37)" fg:x="889010" fg:w="107"/><text x="99.6371%" y="511.50"></text></g><g><title>`0x7FFDA1A7B3C7 (344 samples, 0.04%)</title><rect x="99.4041%" y="501" width="0.0385%" height="15" fill="rgb(252,64,23)" fg:x="889162" fg:w="344"/><text x="99.6541%" y="511.50"></text></g><g><title>`0x7FFDA1AA4CDF (535 samples, 0.06%)</title><rect x="99.3829%" y="517" width="0.0598%" height="15" fill="rgb(232,162,48)" fg:x="888972" fg:w="535"/><text x="99.6329%" y="527.50"></text></g><g><title>`0x7FFDA1AA4B2D (558 samples, 0.06%)</title><rect x="99.3808%" y="533" width="0.0624%" height="15" fill="rgb(246,160,12)" fg:x="888953" fg:w="558"/><text x="99.6308%" y="543.50"></text></g><g><title>`0x7FFDA1AA4BD5 (173 samples, 0.02%)</title><rect x="99.4443%" y="533" width="0.0193%" height="15" fill="rgb(247,166,0)" fg:x="889521" fg:w="173"/><text x="99.6943%" y="543.50"></text></g><g><title>`0x7FFDA1A7B3C7 (156 samples, 0.02%)</title><rect x="99.4462%" y="517" width="0.0174%" height="15" fill="rgb(249,219,21)" fg:x="889538" fg:w="156"/><text x="99.6962%" y="527.50"></text></g><g><title>`0x7FFDA1A677A7 (782 samples, 0.09%)</title><rect x="99.3780%" y="549" width="0.0874%" height="15" fill="rgb(205,209,3)" fg:x="888928" fg:w="782"/><text x="99.6280%" y="559.50"></text></g><g><title>`0x7FFDA1A677C3 (532 samples, 0.06%)</title><rect x="99.4654%" y="549" width="0.0595%" height="15" fill="rgb(243,44,1)" fg:x="889710" fg:w="532"/><text x="99.7154%" y="559.50"></text></g><g><title>`0x7FFDA1AB0032 (437 samples, 0.05%)</title><rect x="99.4760%" y="533" width="0.0489%" height="15" fill="rgb(206,159,16)" fg:x="889805" fg:w="437"/><text x="99.7260%" y="543.50"></text></g><g><title>`0x7FFDA1AED5E4 (379 samples, 0.04%)</title><rect x="99.4825%" y="517" width="0.0424%" height="15" fill="rgb(244,77,30)" fg:x="889863" fg:w="379"/><text x="99.7325%" y="527.50"></text></g><g><title>`0x7FFD7EDA53A9 (105 samples, 0.01%)</title><rect x="99.5384%" y="501" width="0.0117%" height="15" fill="rgb(218,69,12)" fg:x="890363" fg:w="105"/><text x="99.7884%" y="511.50"></text></g><g><title>`0x7FFD7EDAF44F (113 samples, 0.01%)</title><rect x="99.5377%" y="517" width="0.0126%" height="15" fill="rgb(212,87,7)" fg:x="890357" fg:w="113"/><text x="99.7877%" y="527.50"></text></g><g><title>`0x7FFD9F569963 (95 samples, 0.01%)</title><rect x="99.5565%" y="485" width="0.0106%" height="15" fill="rgb(245,114,25)" fg:x="890525" fg:w="95"/><text x="99.8065%" y="495.50"></text></g><g><title>`0x7FFD9F569E1E (138 samples, 0.02%)</title><rect x="99.5858%" y="453" width="0.0154%" height="15" fill="rgb(210,61,42)" fg:x="890787" fg:w="138"/><text x="99.8358%" y="463.50"></text></g><g><title>`0x7FFD9F569EB1 (2,031 samples, 0.23%)</title><rect x="99.6178%" y="453" width="0.2271%" height="15" fill="rgb(211,52,33)" fg:x="891073" fg:w="2031"/><text x="99.8678%" y="463.50"></text></g><g><title>`0x7FFDA1AED644 (2,017 samples, 0.23%)</title><rect x="99.6193%" y="437" width="0.2255%" height="15" fill="rgb(234,58,33)" fg:x="891087" fg:w="2017"/><text x="99.8693%" y="447.50"></text></g><g><title>`0x7FFD9F569B80 (2,399 samples, 0.27%)</title><rect x="99.5788%" y="469" width="0.2682%" height="15" fill="rgb(220,115,36)" fg:x="890724" fg:w="2399"/><text x="99.8288%" y="479.50"></text></g><g><title>`0x7FFD9F569968 (2,505 samples, 0.28%)</title><rect x="99.5671%" y="485" width="0.2800%" height="15" fill="rgb(243,153,54)" fg:x="890620" fg:w="2505"/><text x="99.8171%" y="495.50"></text></g><g><title>`0x7FFD9F568E0D (2,683 samples, 0.30%)</title><rect x="99.5519%" y="517" width="0.2999%" height="15" fill="rgb(251,47,18)" fg:x="890484" fg:w="2683"/><text x="99.8019%" y="527.50"></text></g><g><title>`0x7FFD9F569074 (2,646 samples, 0.30%)</title><rect x="99.5561%" y="501" width="0.2958%" height="15" fill="rgb(242,102,42)" fg:x="890521" fg:w="2646"/><text x="99.8061%" y="511.50"></text></g><g><title>`0x7FFDA1A9FBEF (90 samples, 0.01%)</title><rect x="99.8674%" y="469" width="0.0101%" height="15" fill="rgb(234,31,38)" fg:x="893306" fg:w="90"/><text x="100.1174%" y="479.50"></text></g><g><title>`0x7FFDA1A9FC14 (127 samples, 0.01%)</title><rect x="99.8778%" y="469" width="0.0142%" height="15" fill="rgb(221,117,51)" fg:x="893399" fg:w="127"/><text x="100.1278%" y="479.50"></text></g><g><title>`0x7FFDA1A7B3C7 (109 samples, 0.01%)</title><rect x="99.8798%" y="453" width="0.0122%" height="15" fill="rgb(212,20,18)" fg:x="893417" fg:w="109"/><text x="100.1298%" y="463.50"></text></g><g><title>`0x7FFD9F565C3B (251 samples, 0.03%)</title><rect x="99.8662%" y="485" width="0.0281%" height="15" fill="rgb(245,133,36)" fg:x="893295" fg:w="251"/><text x="100.1162%" y="495.50"></text></g><g><title>`0x7FFD9F96631F (264 samples, 0.03%)</title><rect x="99.8650%" y="501" width="0.0295%" height="15" fill="rgb(212,6,19)" fg:x="893284" fg:w="264"/><text x="100.1150%" y="511.50"></text></g><g><title>`0x7FFD9F966223 (268 samples, 0.03%)</title><rect x="99.8647%" y="517" width="0.0300%" height="15" fill="rgb(218,1,36)" fg:x="893282" fg:w="268"/><text x="100.1147%" y="527.50"></text></g><g><title>`0x7FFD9F96623A (254 samples, 0.03%)</title><rect x="99.8947%" y="517" width="0.0284%" height="15" fill="rgb(246,84,54)" fg:x="893550" fg:w="254"/><text x="100.1447%" y="527.50"></text></g><g><title>`0x7FFD9F95DD3E (240 samples, 0.03%)</title><rect x="99.8963%" y="501" width="0.0268%" height="15" fill="rgb(242,110,6)" fg:x="893564" fg:w="240"/><text x="100.1463%" y="511.50"></text></g><g><title>`0x7FFDA1A7B3C7 (239 samples, 0.03%)</title><rect x="99.8964%" y="485" width="0.0267%" height="15" fill="rgb(214,47,5)" fg:x="893565" fg:w="239"/><text x="100.1464%" y="495.50"></text></g><g><title>`0x7FFDA1A69A1D (3,547 samples, 0.40%)</title><rect x="99.5373%" y="533" width="0.3965%" height="15" fill="rgb(218,159,25)" fg:x="890353" fg:w="3547"/><text x="99.7873%" y="543.50"></text></g><g><title>`0x7FFDA1A6789F (3,577 samples, 0.40%)</title><rect x="99.5367%" y="549" width="0.3999%" height="15" fill="rgb(215,211,28)" fg:x="890348" fg:w="3577"/><text x="99.7867%" y="559.50"></text></g><g><title>`0x7FFDA1A67955 (375 samples, 0.04%)</title><rect x="99.9451%" y="549" width="0.0419%" height="15" fill="rgb(238,59,32)" fg:x="894001" fg:w="375"/><text x="100.1951%" y="559.50"></text></g><g><title>`0x7FFDA1AED724 (361 samples, 0.04%)</title><rect x="99.9467%" y="533" width="0.0404%" height="15" fill="rgb(226,82,3)" fg:x="894015" fg:w="361"/><text x="100.1967%" y="543.50"></text></g><g><title>`0x7FFDA1AC60A4 (5,465 samples, 0.61%)</title><rect x="99.3765%" y="565" width="0.6110%" height="15" fill="rgb(240,164,32)" fg:x="888915" fg:w="5465"/><text x="99.6265%" y="575.50"></text></g><g><title>`0x7FFDA1AC5C83 (5,577 samples, 0.62%)</title><rect x="99.3733%" y="581" width="0.6235%" height="15" fill="rgb(232,46,7)" fg:x="888886" fg:w="5577"/><text x="99.6233%" y="591.50"></text></g><g><title>`0x7FFDA1AC5C2E (5,618 samples, 0.63%)</title><rect x="99.3696%" y="597" width="0.6281%" height="15" fill="rgb(229,129,53)" fg:x="888853" fg:w="5618"/><text x="99.6196%" y="607.50"></text></g><g><title>all (894,492 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="894492"/><text x="0.2500%" y="623.50"></text></g></svg></svg>